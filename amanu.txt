

=== README.md ===

1) Create a key value pair to use when using CDK to launch the instance# cdk


=== ai_helper.py ===

import os
import sys

def combine_files_with_headers_recursive(folder_path, output_file, extensions=None, extra_files=None, exclude_dirs=None, exclude_files=None):
    """
    Combines files with specified extensions or extra filenames into one output.
    Skips specified folders, files, and unreadable/binary files.
    
    :param folder_path: Root directory to start.
    :param output_file: Output file path.
    :param extensions: List of allowed file extensions (e.g., ['.py', '.txt']).
    :param extra_files: List of extra filenames without extensions (e.g., ['Dockerfile', '.env']).
    :param exclude_dirs: Set of directory names to exclude (e.g., {'.venv', 'node_modules'}).
    :param exclude_files: Set of filenames to exclude (e.g., {'package-lock.json'}).
    """
    if exclude_dirs is None:
        exclude_dirs = {'__pycache__', '.venv', 'node_modules', '.git'}
    
    if exclude_files is None:
        exclude_files = set()

    with open(output_file, 'w', encoding='utf-8') as outfile:
        for root, dirs, files in os.walk(folder_path):
            dirs[:] = [d for d in dirs if d not in exclude_dirs]

            for filename in sorted(files):
                # Skip excluded files
                if filename in exclude_files:
                    continue
                    
                file_path = os.path.join(root, filename)
                relative_path = os.path.relpath(file_path, folder_path)

                _, ext = os.path.splitext(filename)

                if ext in ('.pyc', '.pyo', '.so', '.dll'):
                    continue

                if (extensions and ext not in extensions) and (extra_files and filename not in extra_files):
                    continue

                outfile.write(f"\n\n=== {relative_path} ===\n\n")
                try:
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as infile:
                        outfile.write(infile.read())
                except Exception as e:
                    print(f"Skipping {relative_path}: {e}")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python script.py <input_directory>")
        sys.exit(1)

    input_folder = os.path.abspath(sys.argv[1])

    if not os.path.isdir(input_folder):
        print(f"Error: '{input_folder}' is not a valid directory.")
        sys.exit(1)

    script_dir = os.path.dirname(os.path.abspath(__file__))
    output_file_path = os.path.join(script_dir, f"{sys.argv[1]}.txt")

    combine_files_with_headers_recursive(
        folder_path=input_folder,
        output_file=output_file_path,
        extensions=[".py", ".txt", ".yml", ".yaml", ".md", ".json", ".ts", ".scss"],
        extra_files=["Dockerfile", ".gitignore", ".env"],  # Removed package-lock.json from here
        exclude_dirs={'.venv', 'node_modules', '__pycache__', '.git', '.angular', 'sql', 'sql new'},  # Removed package-lock.json from here
        exclude_files={'package-lock.json'}  # Added new parameter to exclude this file
    )

=== amanu.txt ===



=== docker-compose.ec2.yml ===

services:
  backend:
    image: backend:latest
    ports:
      - "8000:8000"
    restart: unless-stopped
    
  frontend:
    image: frontend:latest
    ports:
      - "4200:80" 
    depends_on:
      - backend
    restart: unless-stopped

=== tree.py ===

from directory_tree import DisplayTree
import os

if __name__ == '__main__':
    DisplayTree(
        os.path.abspath('ec2'), 
        ignoreList=['.git', 'node_modules', '__pycache__', '.pytest_cache'],
         showHidden=True
        
    )

=== infra/README.md ===

# Infrastructure Setup

This directory contains AWS CDK infrastructure code and deployment scripts for the FastAPI + Angular application.

## Files Overview

- **`app.py`** - CDK application entry point

- **`ec2_stack.py`** - Main CDK stack definition (EC2, Route53, Security Groups)
- **`cdk.json`** - CDK configuration
- **`cdk.context.json`** - CDK context cache (auto-generated)
- **`ec2-setup.sh`** - Server configuration script (runs on EC2)
- **`setup-instance.sh`** - Local script to deploy and configure the instance
- **`cdk.out/`** - CDK synthesized templates (auto-generated)

## Prerequisites

0. **Domain name** registered and hosted zone created in Route53

1. **AWS CLI installed and configured**:

   ```bash
   # Install AWS CLI (if not installed)
   curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
   sudo installer -pkg AWSCLIV2.pkg -target /

   # Configure AWS credentials
   aws configure
   # Enter your:
   # - AWS Access Key ID
   # - AWS Secret Access Key
   # - Default region (e.g., eu-west-3)
   # - Default output format (json)
   ```

2. **AWS CDK installed**: `npm install -g aws-cdk`
3. **Python dependencies**: `pip install aws-cdk-lib constructs`
4. **SSH key pair**: `Elsuq-ssh-key` must exist in your AWS account

## Quick Start

### 1. Create SSH Key Pair

```bash
# Create AWS key pair
aws ec2 create-key-pair \
    --key-name Elsuq-ssh-key \
    --query 'KeyMaterial' \
    --output text > ~/.ssh/Elsuq-ssh-key.pem

# Set permissions
chmod 400 ~/.ssh/Elsuq-ssh-key.pem
```

### 2. Deploy Infrastructure

```bash
cd infra
cdk bootstrap  # First time only
cdk deploy
```

### 3. Configure Server

```bash
# Update the EC2_IP in setup-instance.sh with the output from step 2
# Then run:
./setup-instance.sh
```

**Important Configuration**: Before running, update these variables in your scripts:

- **`setup-instance.sh`**: Update `EC2_IP` with your instance's public IP
- **`ec2-setup.sh`**: Update `DOMAIN_NAME` and `EMAIL` if using a different domain
  ```bash
  DOMAIN_NAME="domain.com"     # Change this to your domain
  EMAIL="example@gmail.com" # Change this to your email
  ```

## What Gets Created

### AWS Resources

- **EC2 Instance** (t3.small) with Amazon Linux 2023
- **Security Group** with ports: 22 (SSH), 80 (HTTP), 443 (HTTPS), 4200 (Angular), 8000 (FastAPI)
- **Route53 Records** for `example.com` and `www.example.com`
- **IAM Role** for the EC2 instance

### Server Configuration

- **Docker & Docker Compose** installed
- **Nginx** configured as reverse proxy
- **SSL certificates** via Let's Encrypt/Certbot
- **Automatic HTTPS redirect**

## Configuration Variables

### Domain Setup

The domain is configured in multiple places:

1. **CDK Stack** (`app.py`):

   ```python
   Ec2ProjectStack(app, "MyEc2ProjectStack",
       domain_name="example.com",  # Main domain configuration
   ```

2. **Setup Script** (`ec2-setup.sh`):

   ```bash
   DOMAIN_NAME="example.com"        # Domain for SSL certificate
   EMAIL="example@gmail.com"    # Email for Let's Encrypt
   ```

3. **Instance Script** (`setup-instance.sh`):
   ```bash
   EC2_IP="35.181.57.216"  # Update with your EC2 public IP
   ```

**To use a different domain**: Update all three locations with your domain name.

### `ec2-setup.sh`

Runs ON the EC2 instance to configure:

- Nginx reverse proxy (port 80 → 4200 for frontend, /api → 8000 for backend)
- SSL certificates for HTTPS
- Automatic certificate renewal

### `setup-instance.sh`

Runs FROM your local machine to:

- Copy the setup script to EC2
- Execute the setup script via SSH
- Handle the deployment process

## DNS Configuration

The stack automatically creates:

- `example.com` → EC2 public IP
- `www.example.com` → EC2 public IP

**Important**: Wait 1-5 minutes for DNS propagation before running SSL setup.

## Deployment Flow

1. **Infrastructure**: `cdk deploy` creates AWS resources
2. **Application**: Deploy your Docker containers to EC2
3. **Configuration**: Run setup scripts for nginx and SSL
4. **Verification**: Check `https://example.com`

## Useful Commands

```bash
# View stack outputs
cdk deploy --outputs-file outputs.json

# SSH into instance
ssh -i ~/.ssh/Elsuq-ssh-key.pem ec2-user@<PUBLIC_IP>

# Check deployment status
cdk list
cdk diff

# Destroy everything
cdk destroy
```

## Troubleshooting

### DNS Issues

```bash
# Check if DNS has propagated
dig example.com +short
nslookup example.com
```

### SSL Certificate Issues

```bash
# On EC2 instance, check certbot logs
sudo tail -f /var/log/letsencrypt/letsencrypt.log

# Test certificate renewal
sudo certbot renew --dry-run
```

### Application Issues

```bash
# Check Docker containers on EC2
docker ps
docker-compose logs
```

## Security Notes

- SSH key is required for instance access
- Security group restricts access to necessary ports only
- SSL certificates are automatically renewed via cron
- All HTTP traffic redirects to HTTPS

## Cost Estimation

- **EC2 t3.small**: ~$15-20/month
- **Route53 hosted zone**: $0.50/month
- **Data transfer**: Minimal for development use
- **Total**: ~$16-21/month

---

**Next**: See the [main README](../README.md) for application deployment instructions.


=== infra/app.py ===

#!/usr/bin/env python3
import os
import aws_cdk as cdk
from ec2_stack import Ec2ProjectStack

app = cdk.App()

Ec2ProjectStack(app, "MyEc2ProjectStack",
    domain_name="elsuq.org",  # This will create DNS records
    env=cdk.Environment(
        account=os.getenv('CDK_DEFAULT_ACCOUNT'),
        region=os.getenv('CDK_DEFAULT_REGION')
    )
)

app.synth()

=== infra/cdk.context.json ===

{
  "vpc-provider:account=974445237958:filter.isDefault=true:region=eu-west-3:returnAsymmetricSubnets=true": {
    "vpcId": "vpc-01fa743127f2b5bfa",
    "vpcCidrBlock": "172.31.0.0/16",
    "ownerAccountId": "974445237958",
    "availabilityZones": [],
    "subnetGroups": [
      {
        "name": "Public",
        "type": "Public",
        "subnets": [
          {
            "subnetId": "subnet-0653848b1b02595ac",
            "cidr": "172.31.0.0/20",
            "availabilityZone": "eu-west-3a",
            "routeTableId": "rtb-09cbeb78723bd40b0"
          },
          {
            "subnetId": "subnet-060dd99af1fc4d1a2",
            "cidr": "172.31.16.0/20",
            "availabilityZone": "eu-west-3b",
            "routeTableId": "rtb-09cbeb78723bd40b0"
          },
          {
            "subnetId": "subnet-080a92dc46dee5563",
            "cidr": "172.31.32.0/20",
            "availabilityZone": "eu-west-3c",
            "routeTableId": "rtb-09cbeb78723bd40b0"
          }
        ]
      }
    ]
  },
  "hosted-zone:account=974445237958:domainName=elsuq.org:region=eu-west-3": {
    "Id": "/hostedzone/Z040531834UZQRHG5PULE",
    "Name": "elsuq.org."
  }
}


=== infra/cdk.json ===


{
    "app": "python app.py"
  }

  

=== infra/ec2_stack.py ===

from aws_cdk import (
    Stack,
    CfnOutput,
    aws_ec2 as ec2,
    aws_route53 as route53,
    Duration,
)
from constructs import Construct


class Ec2ProjectStack(Stack):

    def __init__(self, scope: Construct, construct_id: str, domain_name: str = None, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)

        # Use default VPC
        vpc = ec2.Vpc.from_lookup(self, "DefaultVpc", is_default=True)

        # Create security group
        security_group = ec2.SecurityGroup(
            self, "WebServerSG",
            vpc=vpc,
            description="Security group for web server",
            allow_all_outbound=True
        )

        # Allow SSH
        security_group.add_ingress_rule(
            ec2.Peer.any_ipv4(),
            ec2.Port.tcp(22),
            "Allow SSH"
        )

        # Allow HTTP
        security_group.add_ingress_rule(
            ec2.Peer.any_ipv4(),
            ec2.Port.tcp(80),
            "Allow HTTP"
        )

        # Allow HTTPS
        security_group.add_ingress_rule(
            ec2.Peer.any_ipv4(),
            ec2.Port.tcp(443),
            "Allow HTTPS"
        )

        # Allow FastAPI (port 8000)
        security_group.add_ingress_rule(
            ec2.Peer.any_ipv4(),
            ec2.Port.tcp(8000),
            "Allow FastAPI"
        )

        # Allow Angular dev server (port 4200)
        security_group.add_ingress_rule(
            ec2.Peer.any_ipv4(),
            ec2.Port.tcp(4200),
            "Allow Angular"
        )

        # Simplified user data - just basic setup
        user_data = ec2.UserData.for_linux()
        user_data.add_commands(
            "#!/bin/bash",
            "sudo dnf update -y",
            "sudo dnf install -y git",
            "echo 'Instance is ready!' | sudo tee /var/log/user-data.log",

            "sudo dnf install -y docker",
            "sudo systemctl start docker",
            "sudo systemctl enable docker",
            "sudo usermod -a -G docker ec2-user",

            "sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose",
            "sudo chmod +x /usr/local/bin/docker-compose",
            
            # Install Python 3 and pip
            "sudo dnf install -y python3 python3-pip",
            "sudo dnf install -y nginx certbot python3-certbot-nginx",
            "sudo systemctl enable nginx",
        )

        # Create EC2 instance
        instance = ec2.Instance(
            self, "WebServer",
            instance_type=ec2.InstanceType.of(
                ec2.InstanceClass.T3, 
                ec2.InstanceSize.SMALL
            ),
            machine_image=ec2.MachineImage.latest_amazon_linux2023(),
            vpc=vpc,
            security_group=security_group,
            key_name="Elsuq-ssh-key",
            user_data=user_data
        )

        # Domain configuration (if domain provided)
        if domain_name:
            # Lookup the existing hosted zone
            hosted_zone = route53.HostedZone.from_lookup(
                self, "HostedZone",
                domain_name=domain_name
            )

            # Create A record pointing to the instance public IP
            route53.ARecord(
                self, "ARecord",
                zone=hosted_zone,
                target=route53.RecordTarget.from_ip_addresses(instance.instance_public_ip),
                ttl=Duration.minutes(5)
            )

            # Create www subdomain record
            route53.ARecord(
                self, "WWWRecord",
                zone=hosted_zone,
                record_name="www",
                target=route53.RecordTarget.from_ip_addresses(instance.instance_public_ip),
                ttl=Duration.minutes(5)
            )

        # Output the public IP
        CfnOutput(
            self, "PublicIP",
            value=instance.instance_public_ip,
            description="Public IP of the EC2 instance"
        )

        # Output SSH command
        CfnOutput(
            self, "SSHCommand",
            value=f"ssh -i Elsuq-ssh-key.pem ec2-user@{instance.instance_public_ip}",
            description="SSH command to connect to the instance"
        )

        # Output server status URL
        CfnOutput(
            self, "ServerStatusURL",
            value=f"https://{domain_name}" if domain_name else f"http://{instance.instance_public_ip}",
            description="Application URL"
        )

=== infra/cdk.out/MyEc2ProjectStack.assets.json ===

{
  "version": "34.0.0",
  "files": {
    "1c78418f4b53a53221c162c4d61c7a4c6ecfbeef722c0ff1646d205a86a83f6b": {
      "source": {
        "path": "MyEc2ProjectStack.template.json",
        "packaging": "file"
      },
      "destinations": {
        "974445237958-eu-west-3": {
          "bucketName": "cdk-hnb659fds-assets-974445237958-eu-west-3",
          "objectKey": "1c78418f4b53a53221c162c4d61c7a4c6ecfbeef722c0ff1646d205a86a83f6b.json",
          "region": "eu-west-3",
          "assumeRoleArn": "arn:${AWS::Partition}:iam::974445237958:role/cdk-hnb659fds-file-publishing-role-974445237958-eu-west-3"
        }
      }
    }
  },
  "dockerImages": {}
}

=== infra/cdk.out/MyEc2ProjectStack.template.json ===

{
  "Resources": {
    "WebServerSG4D0F372C": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for web server",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow SSH",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTP",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow HTTPS",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow FastAPI",
            "FromPort": 8000,
            "IpProtocol": "tcp",
            "ToPort": 8000
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow Angular",
            "FromPort": 4200,
            "IpProtocol": "tcp",
            "ToPort": 4200
          }
        ],
        "VpcId": "vpc-01fa743127f2b5bfa"
      },
      "Metadata": {
        "aws:cdk:path": "MyEc2ProjectStack/WebServerSG/Resource"
      }
    },
    "WebServerInstanceRoleEEE3F4CD": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyEc2ProjectStack/WebServer"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "MyEc2ProjectStack/WebServer/InstanceRole/Resource"
      }
    },
    "WebServerInstanceProfile7A5DA8F6": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "WebServerInstanceRoleEEE3F4CD"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "MyEc2ProjectStack/WebServer/InstanceProfile"
      }
    },
    "WebServer99EDD300": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": "eu-west-3a",
        "IamInstanceProfile": {
          "Ref": "WebServerInstanceProfile7A5DA8F6"
        },
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter"
        },
        "InstanceType": "t3.small",
        "KeyName": "Elsuq-ssh-key",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": ["WebServerSG4D0F372C", "GroupId"]
          }
        ],
        "SubnetId": "subnet-0653848b1b02595ac",
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyEc2ProjectStack/WebServer"
          }
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/bash\n#!/bin/bash\nsudo dnf update -y\nsudo dnf install -y git\necho 'Instance is ready!' | sudo tee /var/log/user-data.log\nsudo dnf install -y docker\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo usermod -a -G docker ec2-user\nsudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\nsudo dnf install -y python3 python3-pip\nsudo dnf install -y nginx certbot python3-certbot-nginx\nsudo systemctl enable nginx"
        }
      },
      "DependsOn": ["WebServerInstanceRoleEEE3F4CD"],
      "Metadata": {
        "aws:cdk:path": "MyEc2ProjectStack/WebServer/Resource"
      }
    },
    "ARecordE7B57761": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": "Z040531834UZQRHG5PULE",
        "Name": "elsuq.org.",
        "ResourceRecords": [
          {
            "Fn::GetAtt": ["WebServer99EDD300", "PublicIp"]
          }
        ],
        "TTL": "300",
        "Type": "A"
      },
      "Metadata": {
        "aws:cdk:path": "MyEc2ProjectStack/ARecord/Resource"
      }
    },
    "WWWRecordA21741B4": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": "Z040531834UZQRHG5PULE",
        "Name": "www.elsuq.org.",
        "ResourceRecords": [
          {
            "Fn::GetAtt": ["WebServer99EDD300", "PublicIp"]
          }
        ],
        "TTL": "300",
        "Type": "A"
      },
      "Metadata": {
        "aws:cdk:path": "MyEc2ProjectStack/WWWRecord/Resource"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/1WOzQqDMBCEn8V73PpD6bn0UHqq6AOUNK40VRPZbBAJefei4qGnmflmDlNAnmWQJXJ2qWr7dNBvCA1L1YsanfWkUMjZvQKqAkKDypPm5U7WT+LWmX/wMI6lUbg2h49CyxFCbYcNH3rUFdlODxgFWc94LiFca1SW2m28uQY5xjVWkuSIjLSGp+fJ877af0ZRLfyx5lRCXsAl+TqtU/KG9YhQ7/oDVj/Hcu8AAAA="
      },
      "Metadata": {
        "aws:cdk:path": "MyEc2ProjectStack/CDKMetadata/Default"
      }
    }
  },
  "Parameters": {
    "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
    },
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Outputs": {
    "PublicIP": {
      "Description": "Public IP of the EC2 instance",
      "Value": {
        "Fn::GetAtt": ["WebServer99EDD300", "PublicIp"]
      }
    },
    "SSHCommand": {
      "Description": "SSH command to connect to the instance",
      "Value": {
        "Fn::Join": [
          "",
          [
            "ssh -i Elsuq-ssh-key.pem ec2-user@",
            {
              "Fn::GetAtt": ["WebServer99EDD300", "PublicIp"]
            }
          ]
        ]
      }
    },
    "ServerStatusURL": {
      "Description": "Application URL",
      "Value": "https://elsuq.org"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  ["1", "2", "3", "4", "5"],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}


=== infra/cdk.out/manifest.json ===

{
  "version": "34.0.0",
  "artifacts": {
    "MyEc2ProjectStack.assets": {
      "type": "cdk:asset-manifest",
      "properties": {
        "file": "MyEc2ProjectStack.assets.json",
        "requiresBootstrapStackVersion": 6,
        "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version"
      }
    },
    "MyEc2ProjectStack": {
      "type": "aws:cloudformation:stack",
      "environment": "aws://974445237958/eu-west-3",
      "properties": {
        "templateFile": "MyEc2ProjectStack.template.json",
        "terminationProtection": false,
        "validateOnSynth": false,
        "assumeRoleArn": "arn:${AWS::Partition}:iam::974445237958:role/cdk-hnb659fds-deploy-role-974445237958-eu-west-3",
        "cloudFormationExecutionRoleArn": "arn:${AWS::Partition}:iam::974445237958:role/cdk-hnb659fds-cfn-exec-role-974445237958-eu-west-3",
        "stackTemplateAssetObjectUrl": "s3://cdk-hnb659fds-assets-974445237958-eu-west-3/1c78418f4b53a53221c162c4d61c7a4c6ecfbeef722c0ff1646d205a86a83f6b.json",
        "requiresBootstrapStackVersion": 6,
        "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
        "additionalDependencies": [
          "MyEc2ProjectStack.assets"
        ],
        "lookupRole": {
          "arn": "arn:${AWS::Partition}:iam::974445237958:role/cdk-hnb659fds-lookup-role-974445237958-eu-west-3",
          "requiresBootstrapStackVersion": 8,
          "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version"
        }
      },
      "dependencies": [
        "MyEc2ProjectStack.assets"
      ],
      "metadata": {
        "/MyEc2ProjectStack/WebServerSG/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "WebServerSG4D0F372C"
          }
        ],
        "/MyEc2ProjectStack/WebServer/InstanceRole/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "WebServerInstanceRoleEEE3F4CD"
          }
        ],
        "/MyEc2ProjectStack/WebServer/InstanceProfile": [
          {
            "type": "aws:cdk:logicalId",
            "data": "WebServerInstanceProfile7A5DA8F6"
          }
        ],
        "/MyEc2ProjectStack/WebServer/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "WebServer99EDD300"
          }
        ],
        "/MyEc2ProjectStack/SsmParameterValue:--aws--service--ami-amazon-linux-latest--al2023-ami-kernel-6.1-x86_64:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter": [
          {
            "type": "aws:cdk:logicalId",
            "data": "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter"
          }
        ],
        "/MyEc2ProjectStack/ARecord/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "ARecordE7B57761"
          }
        ],
        "/MyEc2ProjectStack/WWWRecord/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "WWWRecordA21741B4"
          }
        ],
        "/MyEc2ProjectStack/PublicIP": [
          {
            "type": "aws:cdk:logicalId",
            "data": "PublicIP"
          }
        ],
        "/MyEc2ProjectStack/SSHCommand": [
          {
            "type": "aws:cdk:logicalId",
            "data": "SSHCommand"
          }
        ],
        "/MyEc2ProjectStack/ServerStatusURL": [
          {
            "type": "aws:cdk:logicalId",
            "data": "ServerStatusURL"
          }
        ],
        "/MyEc2ProjectStack/CDKMetadata/Default": [
          {
            "type": "aws:cdk:logicalId",
            "data": "CDKMetadata"
          }
        ],
        "/MyEc2ProjectStack/BootstrapVersion": [
          {
            "type": "aws:cdk:logicalId",
            "data": "BootstrapVersion"
          }
        ],
        "/MyEc2ProjectStack/CheckBootstrapVersion": [
          {
            "type": "aws:cdk:logicalId",
            "data": "CheckBootstrapVersion"
          }
        ]
      },
      "displayName": "MyEc2ProjectStack"
    },
    "Tree": {
      "type": "cdk:tree",
      "properties": {
        "file": "tree.json"
      }
    }
  }
}

=== infra/cdk.out/tree.json ===

{
  "version": "tree-0.1",
  "tree": {
    "id": "App",
    "path": "",
    "children": {
      "MyEc2ProjectStack": {
        "id": "MyEc2ProjectStack",
        "path": "MyEc2ProjectStack",
        "children": {
          "DefaultVpc": {
            "id": "DefaultVpc",
            "path": "MyEc2ProjectStack/DefaultVpc",
            "children": {
              "PublicSubnet1": {
                "id": "PublicSubnet1",
                "path": "MyEc2ProjectStack/DefaultVpc/PublicSubnet1",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.Resource",
                  "version": "2.100.0"
                }
              },
              "PublicSubnet2": {
                "id": "PublicSubnet2",
                "path": "MyEc2ProjectStack/DefaultVpc/PublicSubnet2",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.Resource",
                  "version": "2.100.0"
                }
              },
              "PublicSubnet3": {
                "id": "PublicSubnet3",
                "path": "MyEc2ProjectStack/DefaultVpc/PublicSubnet3",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.Resource",
                  "version": "2.100.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.Resource",
              "version": "2.100.0"
            }
          },
          "WebServerSG": {
            "id": "WebServerSG",
            "path": "MyEc2ProjectStack/WebServerSG",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "MyEc2ProjectStack/WebServerSG/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                  "aws:cdk:cloudformation:props": {
                    "groupDescription": "Security group for web server",
                    "securityGroupEgress": [
                      {
                        "cidrIp": "0.0.0.0/0",
                        "description": "Allow all outbound traffic by default",
                        "ipProtocol": "-1"
                      }
                    ],
                    "securityGroupIngress": [
                      {
                        "cidrIp": "0.0.0.0/0",
                        "ipProtocol": "tcp",
                        "fromPort": 22,
                        "toPort": 22,
                        "description": "Allow SSH"
                      },
                      {
                        "cidrIp": "0.0.0.0/0",
                        "ipProtocol": "tcp",
                        "fromPort": 80,
                        "toPort": 80,
                        "description": "Allow HTTP"
                      },
                      {
                        "cidrIp": "0.0.0.0/0",
                        "ipProtocol": "tcp",
                        "fromPort": 443,
                        "toPort": 443,
                        "description": "Allow HTTPS"
                      },
                      {
                        "cidrIp": "0.0.0.0/0",
                        "ipProtocol": "tcp",
                        "fromPort": 8000,
                        "toPort": 8000,
                        "description": "Allow FastAPI"
                      },
                      {
                        "cidrIp": "0.0.0.0/0",
                        "ipProtocol": "tcp",
                        "fromPort": 4200,
                        "toPort": 4200,
                        "description": "Allow Angular"
                      }
                    ],
                    "vpcId": "vpc-01fa743127f2b5bfa"
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ec2.CfnSecurityGroup",
                  "version": "2.100.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ec2.SecurityGroup",
              "version": "2.100.0"
            }
          },
          "WebServer": {
            "id": "WebServer",
            "path": "MyEc2ProjectStack/WebServer",
            "children": {
              "InstanceRole": {
                "id": "InstanceRole",
                "path": "MyEc2ProjectStack/WebServer/InstanceRole",
                "children": {
                  "ImportInstanceRole": {
                    "id": "ImportInstanceRole",
                    "path": "MyEc2ProjectStack/WebServer/InstanceRole/ImportInstanceRole",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.100.0"
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "MyEc2ProjectStack/WebServer/InstanceRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "ec2.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "MyEc2ProjectStack/WebServer"
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                      "version": "2.100.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.Role",
                  "version": "2.100.0"
                }
              },
              "InstanceProfile": {
                "id": "InstanceProfile",
                "path": "MyEc2ProjectStack/WebServer/InstanceProfile",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::IAM::InstanceProfile",
                  "aws:cdk:cloudformation:props": {
                    "roles": [
                      {
                        "Ref": "WebServerInstanceRoleEEE3F4CD"
                      }
                    ]
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.CfnInstanceProfile",
                  "version": "2.100.0"
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "MyEc2ProjectStack/WebServer/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::Instance",
                  "aws:cdk:cloudformation:props": {
                    "availabilityZone": "eu-west-3a",
                    "iamInstanceProfile": {
                      "Ref": "WebServerInstanceProfile7A5DA8F6"
                    },
                    "imageId": {
                      "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter"
                    },
                    "instanceType": "t3.small",
                    "keyName": "Elsuq-ssh-key",
                    "securityGroupIds": [
                      {
                        "Fn::GetAtt": ["WebServerSG4D0F372C", "GroupId"]
                      }
                    ],
                    "subnetId": "subnet-0653848b1b02595ac",
                    "tags": [
                      {
                        "key": "Name",
                        "value": "MyEc2ProjectStack/WebServer"
                      }
                    ],
                    "userData": {
                      "Fn::Base64": "#!/bin/bash\n#!/bin/bash\nsudo dnf update -y\nsudo dnf install -y git\necho 'Instance is ready!' | sudo tee /var/log/user-data.log\nsudo dnf install -y docker\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo usermod -a -G docker ec2-user\nsudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\nsudo dnf install -y python3 python3-pip\nsudo dnf install -y nginx certbot python3-certbot-nginx\nsudo systemctl enable nginx"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_ec2.CfnInstance",
                  "version": "2.100.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_ec2.Instance",
              "version": "2.100.0"
            }
          },
          "SsmParameterValue:--aws--service--ami-amazon-linux-latest--al2023-ami-kernel-6.1-x86_64:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter": {
            "id": "SsmParameterValue:--aws--service--ami-amazon-linux-latest--al2023-ami-kernel-6.1-x86_64:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter",
            "path": "MyEc2ProjectStack/SsmParameterValue:--aws--service--ami-amazon-linux-latest--al2023-ami-kernel-6.1-x86_64:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnParameter",
              "version": "2.100.0"
            }
          },
          "SsmParameterValue:--aws--service--ami-amazon-linux-latest--al2023-ami-kernel-6.1-x86_64:C96584B6-F00A-464E-AD19-53AFF4B05118": {
            "id": "SsmParameterValue:--aws--service--ami-amazon-linux-latest--al2023-ami-kernel-6.1-x86_64:C96584B6-F00A-464E-AD19-53AFF4B05118",
            "path": "MyEc2ProjectStack/SsmParameterValue:--aws--service--ami-amazon-linux-latest--al2023-ami-kernel-6.1-x86_64:C96584B6-F00A-464E-AD19-53AFF4B05118",
            "constructInfo": {
              "fqn": "aws-cdk-lib.Resource",
              "version": "2.100.0"
            }
          },
          "HostedZone": {
            "id": "HostedZone",
            "path": "MyEc2ProjectStack/HostedZone",
            "constructInfo": {
              "fqn": "aws-cdk-lib.Resource",
              "version": "2.100.0"
            }
          },
          "ARecord": {
            "id": "ARecord",
            "path": "MyEc2ProjectStack/ARecord",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "MyEc2ProjectStack/ARecord/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Route53::RecordSet",
                  "aws:cdk:cloudformation:props": {
                    "hostedZoneId": "Z040531834UZQRHG5PULE",
                    "name": "elsuq.org.",
                    "resourceRecords": [
                      {
                        "Fn::GetAtt": ["WebServer99EDD300", "PublicIp"]
                      }
                    ],
                    "ttl": "300",
                    "type": "A"
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_route53.CfnRecordSet",
                  "version": "2.100.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_route53.ARecord",
              "version": "2.100.0"
            }
          },
          "WWWRecord": {
            "id": "WWWRecord",
            "path": "MyEc2ProjectStack/WWWRecord",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "MyEc2ProjectStack/WWWRecord/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Route53::RecordSet",
                  "aws:cdk:cloudformation:props": {
                    "hostedZoneId": "Z040531834UZQRHG5PULE",
                    "name": "www.elsuq.org.",
                    "resourceRecords": [
                      {
                        "Fn::GetAtt": ["WebServer99EDD300", "PublicIp"]
                      }
                    ],
                    "ttl": "300",
                    "type": "A"
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_route53.CfnRecordSet",
                  "version": "2.100.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_route53.ARecord",
              "version": "2.100.0"
            }
          },
          "PublicIP": {
            "id": "PublicIP",
            "path": "MyEc2ProjectStack/PublicIP",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnOutput",
              "version": "2.100.0"
            }
          },
          "SSHCommand": {
            "id": "SSHCommand",
            "path": "MyEc2ProjectStack/SSHCommand",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnOutput",
              "version": "2.100.0"
            }
          },
          "ServerStatusURL": {
            "id": "ServerStatusURL",
            "path": "MyEc2ProjectStack/ServerStatusURL",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnOutput",
              "version": "2.100.0"
            }
          },
          "CDKMetadata": {
            "id": "CDKMetadata",
            "path": "MyEc2ProjectStack/CDKMetadata",
            "children": {
              "Default": {
                "id": "Default",
                "path": "MyEc2ProjectStack/CDKMetadata/Default",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnResource",
                  "version": "2.100.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "constructs.Construct",
              "version": "10.4.2"
            }
          },
          "BootstrapVersion": {
            "id": "BootstrapVersion",
            "path": "MyEc2ProjectStack/BootstrapVersion",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnParameter",
              "version": "2.100.0"
            }
          },
          "CheckBootstrapVersion": {
            "id": "CheckBootstrapVersion",
            "path": "MyEc2ProjectStack/CheckBootstrapVersion",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnRule",
              "version": "2.100.0"
            }
          }
        },
        "constructInfo": {
          "fqn": "aws-cdk-lib.Stack",
          "version": "2.100.0"
        }
      },
      "Tree": {
        "id": "Tree",
        "path": "Tree",
        "constructInfo": {
          "fqn": "constructs.Construct",
          "version": "10.4.2"
        }
      }
    },
    "constructInfo": {
      "fqn": "aws-cdk-lib.App",
      "version": "2.100.0"
    }
  }
}


=== frontend/.gitignore ===

# See https://docs.github.com/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db


=== frontend/Dockerfile ===

FROM nginx:alpine

# Copy the pre-built Angular app
COPY dist/Elsuq/browser /usr/share/nginx/html


EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]


=== frontend/README.md ===

# elsuq

This project was generated using [Angular CLI](https://github.com/angular/angular-cli) version 19.2.3.

## Create project

```bash
ng new Elsuq
```

## Install PrimeNG Dependencies

```bash
npm install primeng primeflex primeicons @primeng/themes
```


=== frontend/angular.json ===

{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "Elsuq": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "style": "scss"
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular/build:application",
          "options": {
            "outputPath": "dist/Elsuq",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": ["zone.js"],
            "tsConfig": "tsconfig.app.json",
            "inlineStyleLanguage": "scss",
            "assets": [
              {
                "glob": "**/*",
                "input": "public",
                "output": "/"
              },
              {
                "glob": "**/*",
                "input": "public"
              },
              {
                "glob": "favicon.ico",
                "input": "src",
                "output": "/"
              },
              {
                "glob": "**/*",
                "input": "src/assets",
                "output": "/assets/"
              },
              {
                "glob": "**/*",
                "input": "node_modules/primeicons/fonts",
                "output": "/assets/fonts"
              }
            ],
            "styles": ["src/styles.scss"],
            "stylePreprocessorOptions": {
              "includePaths": ["node_modules/"]
            },
            "scripts": []
          },
          "configurations": {
            "production": {
              "fileReplacements": [
                {
                  "replace": "src/environments/environment.ts",
                  "with": "src/environments/environment.prod.ts"
                }
              ],
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "2mb",
                  "maximumError": "3mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "400kb",
                  "maximumError": "500kb"
                }
              ],
              "outputHashing": "all",
              "optimization": {
                "scripts": true,
                "styles": {
                  "minify": true,
                  "inlineCritical": true
                },
                "fonts": true
              },
              "serviceWorker": "ngsw-config.json"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular/build:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "Elsuq:build:production"
            },
            "development": {
              "buildTarget": "Elsuq:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular/build:extract-i18n"
        },
        "test": {
          "builder": "@angular/build:karma",
          "options": {
            "polyfills": ["zone.js", "zone.js/testing"],
            "tsConfig": "tsconfig.spec.json",
            "inlineStyleLanguage": "scss",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              },
              {
                "glob": "favicon.ico",
                "input": "src",
                "output": "/"
              },
              {
                "glob": "**/*",
                "input": "node_modules/primeicons/fonts",
                "output": "/assets/fonts"
              }
            ],
            "styles": ["src/styles.scss"],
            "scripts": []
          }
        }
      }
    }
  },
  "cli": {
    "analytics": "0af97856-5cd7-4361-9724-b5d1d731a3cd"
  },
  "schematics": {
    "@schematics/angular:component": {
      "type": "component"
    },
    "@schematics/angular:directive": {
      "type": "directive"
    },
    "@schematics/angular:service": {
      "type": "service"
    },
    "@schematics/angular:guard": {
      "typeSeparator": "."
    },
    "@schematics/angular:interceptor": {
      "typeSeparator": "."
    },
    "@schematics/angular:module": {
      "typeSeparator": "."
    },
    "@schematics/angular:pipe": {
      "typeSeparator": "."
    },
    "@schematics/angular:resolver": {
      "typeSeparator": "."
    }
  }
}


=== frontend/ngsw-config.json ===

{
  "$schema": "./node_modules/@angular/service-worker/config/schema.json",
  "index": "/index.html",
  "assetGroups": [
    {
      "name": "app",
      "installMode": "prefetch",
      "resources": {
        "files": [
          "/favicon.ico",
          "/index.csr.html",
          "/index.html",
          "/manifest.webmanifest",
          "/*.css",
          "/*.js"
        ]
      }
    },
    {
      "name": "assets",
      "installMode": "lazy",
      "updateMode": "prefetch",
      "resources": {
        "files": [
          "/**/*.(svg|cur|jpg|jpeg|png|apng|webp|avif|gif|otf|ttf|woff|woff2)"
        ]
      }
    }
  ]
}


=== frontend/package.json ===

{
  "name": "Elsuq",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve --proxy-config proxy.conf.json",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test",
    "start-pwa": "ng build --configuration production && http-server -p 8080 -c-1 dist/Elsuq/browser"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^20.1.2",
    "@angular/common": "^20.1.2",
    "@angular/compiler": "^20.1.2",
    "@angular/core": "^20.1.2",
    "@angular/forms": "^20.1.2",
    "@angular/localize": "^20.1.2",
    "@angular/platform-browser": "^20.1.2",
    "@angular/platform-browser-dynamic": "^20.1.2",
    "@angular/router": "^20.1.2",
    "@angular/service-worker": "^20.1.2",
    "@ngx-translate/core": "^16.0.4",
    "@ngx-translate/http-loader": "^16.0.1",
    "@primeng/themes": "^20.0.0",
    "chart.js": "^4.4.9",
    "jwt-decode": "^4.0.0",
    "primeflex": "^4.0.0",
    "primeicons": "^7.0.0",
    "primeng": "^20.0.0",
    "rxjs": "~7.8.1",
    "tailwindcss-primeui": "^0.6.1",
    "tslib": "^2.6.2",
    "zone.js": "~0.15.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^20.1.1",
    "@angular/cli": "^20.1.1",
    "@angular/compiler-cli": "^20.1.2",
    "@fullhuman/postcss-purgecss": "^7.0.2",
    "@types/jasmine": "~5.1.0",
    "@vite-pwa/assets-generator": "^1.0.0",
    "jasmine-core": "~5.1.1",
    "karma": "~6.4.2",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.1",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "5.8.2"
  }
}


=== frontend/proxy.conf.json ===

{
  "/api": {
    "target": "https://Elsuq-5028o9mls-yazids-projects-3370118f.vercel.app",
    "secure": true,
    "changeOrigin": true,
    "logLevel": "debug"
  }
}


=== frontend/tsconfig.app.json ===

/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}


=== frontend/tsconfig.json ===

/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "moduleResolution": "bundler",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022"
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}


=== frontend/tsconfig.spec.json ===

/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}


=== frontend/dist/Elsuq/3rdpartylicenses.txt ===


--------------------------------------------------------------------------------
Package: @angular/platform-browser
License: "MIT"

The MIT License

Copyright (c) 2010-2025 Google LLC. https://angular.dev/license

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

--------------------------------------------------------------------------------
Package: @primeng/themes
License: "SEE LICENSE IN LICENSE.md"

# PRIMENG LICENSES

## PRIMENG COMMUNITY VERSIONS LICENSE

The MIT License (MIT)

Copyright (c) 2016-2025 PrimeTek

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

## PRIMENG LTS VERSIONS LICENSE (Versions with -lts suffix)

THIS LICENSE AGREEMENT (THIS “CLA”) CONTAINS THE TERMS AND CONDITIONS FOR YOUR USE OF “PRIMENG LONG TERM SUPPORT”, A SUITE OF Angular Components (THE “Software”). THIS CLA IS A BINDING AGREEMENT BETWEEN YOU (“Licensee”) AND PrimeTek Bilişim. (“Licensor“); HOWEVER, IF YOU ARE ACTING AS AN AGENT FOR ANOTHER, SUCH AS ON BEHALF OF YOUR EMPLOYER, THEN “YOU” MEANS THE OTHER PERSON. BY INSTALLING, COPYING, USING OR OTHERWISE ACCESSING THE SOFTWARE, YOU AGREE TO BE BOUND BY THESE TERMS AND CONDITIONS.

The term “Software” includes all source and object code, in whole and/or part; all printed materials; “online” or electronic documentation; data, data engines, images; updates and upgrades; and anything provided for use with or in conjunction with the Software.

## Summary

- Can be used on unlimited sites and servers
- Source-code cannot be resold or distributed
- Commercial use allowed
- Can modify source-code but cannot distribute modifications (derivative works)

## Terms and Conditions

1. **License Grant:** Licensor hereby grants Licensee a Personal, Non-assignable and non-transferable, Commercial, Royalty free, Including the rights to create but not distribute derivative works, Non-exclusive license identified with a unique key stated in section 3, all with accordance with the terms set forth and other legal restrictions set forth in 3rd party software used while running Software.

    1. **Limited:** Licensee may use Software for the purpose of:

        1. Running Software on Licensee’s Website\[s\] and Server\[s\];
        2. Allowing 3rd Parties to run Software on Licensee’s Website\[s\] and Server\[s\];
        3. Publishing Software’s output to Licensee and 3rd Parties;
        4. Distribute verbatim copies of Software’s output (including compiled binaries);
        5. Modify Software to suit Licensee’s needs and specifications.

    2. **Non Assignable and Non-Transferable:** Licensee may not assign or transfer his rights and duties under this license.
    3. **Commercial, Royalty Free:** Licensee may use Software for any purpose, including paid-services, without any royalties
    4. **Including the Right to Create Derivative Works:** Licensee may create derivative works based on Software, including amending Software’s source code, modifying it, integrating it into a larger work or removing portions of Software, as long as no distribution of the derivative works is made

2. **Term & Termination:** The Term of this license shall be until terminated. Licensor may terminate this Agreement, including Licensee’s license in the case where Licensee :
    1. became insolvent or otherwise entered into any liquidation process; or
    2. exported The Software to any jurisdiction where licensor may not enforce his rights under this agreements in; or
    3. Licensee was in breach of any of this license's terms and conditions and such breach was not cured, immediately upon notification; or
    4. Licensee in breach of any of the terms of clause 2 to this license; or
    5. Licensee otherwise entered into any arrangement which caused Licensor to be unable to enforce his rights under this License.
3. **Payment:** In consideration of the License granted under clause 2, Licensee shall pay Licensor a fee, via credit card or any other mean which Licensor may deem adequate. Failure to perform payment shall construe as material breach of this Agreement. Transaction id of the payment is the unique license key granted to Licensee.
4. **Upgrades, Updates and Fixes:** .

    1. **Fix:** for the purpose of this license, a fix shall be a minor amendment in The Software, intended to remove bugs or alter minor features which impair the The Software's functionality. A fix shall be marked as a new sub-sub-version number. For example, should Licensee purchase Software under version 1.1.1, an upgrade shall commence under number 1.1.2.

5. **Support:** Software is provided under an AS-IS basis and without any support, updates or maintenance. Nothing in this Agreement shall require Licensor to provide Licensee with support or fixes to any bug, failure, mis-performance or other defect in The Software.
6. **Liability:** To the extent permitted under Law, The Software is provided under an AS-IS basis. Licensor shall never, and without any limit, be liable for any damage, cost, expense or any other payment incurred by Licesee as a result of Software’s actions, failure, bugs and/or any other interaction between The Software and Licesee’s end-equipment, computers, other software or any 3rd party, end-equipment, computer or services. Moreover, Licensor shall never be liable for any defect in source code written by Licensee when relying on The Software or using The Software’s source code.
7. **Warranty:**

    1. **Intellectual Property:** Licensor hereby warrants that The Software does not violate or infringe any 3rd party claims in regards to intellectual property, patents and/or trademarks and that to the best of its knowledge no legal action has been taken against it for any infringement or violation of any 3rd party intellectual property rights.
    2. **No-Warranty:** The Software is provided without any warranty; Licensor hereby disclaims any warranty that The Software shall be error free, without defects or code which may cause damage to Licensee’s computers or to Licensee, and that Software shall be functional. Licensee shall be solely liable to any damage, defect or loss incurred as a result of operating software and undertake the risks contained in running The Software on License’s Server\[s\] and Website\[s\].
    3. **Prior Inspection:** Licensee hereby states that he inspected The Software thoroughly and found it satisfactory and adequate to his needs, that it does not interfere with his regular operation and that it does meet the standards and scope of his computer systems and architecture. Licensee found that The Software interacts with his development, website and server environment and that it does not infringe any of End User License Agreement of any software Licensee may use in performing his services. Licensee hereby waives any claims regarding The Software's incompatibility, performance, results and features, and warrants that he inspected the The Software.

8. **No Refunds:** Licensee warrants that he inspected The Software according to clause 7(c) and that it is adequate to his needs. Accordingly, as The Software is intangible goods, Licensee shall not be, ever, entitled to any refund, rebate, compensation or restitution for any reason whatsoever, even if The Software contains material flaws.
9. **Indemnification:** Licensee hereby warrants to hold Licensor harmless and indemnify Licensor for any lawsuit brought against it in regards to Licensee’s use of The Software in means that violate, breach or otherwise circumvent this license, Licensor's intellectual property rights or Licensor's title in The Software. Licensor shall promptly notify Licensee in case of such legal action and request Licensee’s consent prior to any settlement in relation to such lawsuit or claim.
10. **Governing Law, Jurisdiction:** Licensee hereby agrees not to initiate class-action lawsuits against Licensor in relation to this license and to compensate Licensor for any legal fees, cost or attorney fees should any claim brought by Licensee against Licensor be denied, in part or in full.

--------------------------------------------------------------------------------
Package: primeng
License: "SEE LICENSE IN LICENSE.md"

# PRIMENG LICENSES

## PRIMENG COMMUNITY VERSIONS LICENSE

The MIT License (MIT)

Copyright (c) 2016-2025 PrimeTek

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

## PRIMENG LTS VERSIONS LICENSE (Versions with -lts suffix)

THIS LICENSE AGREEMENT (THIS “CLA”) CONTAINS THE TERMS AND CONDITIONS FOR YOUR USE OF “PRIMENG LONG TERM SUPPORT”, A SUITE OF Angular Components (THE “Software”). THIS CLA IS A BINDING AGREEMENT BETWEEN YOU (“Licensee”) AND PrimeTek Bilişim. (“Licensor“); HOWEVER, IF YOU ARE ACTING AS AN AGENT FOR ANOTHER, SUCH AS ON BEHALF OF YOUR EMPLOYER, THEN “YOU” MEANS THE OTHER PERSON. BY INSTALLING, COPYING, USING OR OTHERWISE ACCESSING THE SOFTWARE, YOU AGREE TO BE BOUND BY THESE TERMS AND CONDITIONS.

The term “Software” includes all source and object code, in whole and/or part; all printed materials; “online” or electronic documentation; data, data engines, images; updates and upgrades; and anything provided for use with or in conjunction with the Software.

## Summary

- Can be used on unlimited sites and servers
- Source-code cannot be resold or distributed
- Commercial use allowed
- Can modify source-code but cannot distribute modifications (derivative works)

## Terms and Conditions

1. **License Grant:** Licensor hereby grants Licensee a Personal, Non-assignable and non-transferable, Commercial, Royalty free, Including the rights to create but not distribute derivative works, Non-exclusive license identified with a unique key stated in section 3, all with accordance with the terms set forth and other legal restrictions set forth in 3rd party software used while running Software.

    1. **Limited:** Licensee may use Software for the purpose of:

        1. Running Software on Licensee’s Website\[s\] and Server\[s\];
        2. Allowing 3rd Parties to run Software on Licensee’s Website\[s\] and Server\[s\];
        3. Publishing Software’s output to Licensee and 3rd Parties;
        4. Distribute verbatim copies of Software’s output (including compiled binaries);
        5. Modify Software to suit Licensee’s needs and specifications.

    2. **Non Assignable and Non-Transferable:** Licensee may not assign or transfer his rights and duties under this license.
    3. **Commercial, Royalty Free:** Licensee may use Software for any purpose, including paid-services, without any royalties
    4. **Including the Right to Create Derivative Works:** Licensee may create derivative works based on Software, including amending Software’s source code, modifying it, integrating it into a larger work or removing portions of Software, as long as no distribution of the derivative works is made

2. **Term & Termination:** The Term of this license shall be until terminated. Licensor may terminate this Agreement, including Licensee’s license in the case where Licensee :
    1. became insolvent or otherwise entered into any liquidation process; or
    2. exported The Software to any jurisdiction where licensor may not enforce his rights under this agreements in; or
    3. Licensee was in breach of any of this license's terms and conditions and such breach was not cured, immediately upon notification; or
    4. Licensee in breach of any of the terms of clause 2 to this license; or
    5. Licensee otherwise entered into any arrangement which caused Licensor to be unable to enforce his rights under this License.
3. **Payment:** In consideration of the License granted under clause 2, Licensee shall pay Licensor a fee, via credit card or any other mean which Licensor may deem adequate. Failure to perform payment shall construe as material breach of this Agreement. Transaction id of the payment is the unique license key granted to Licensee.
4. **Upgrades, Updates and Fixes:** .

    1. **Fix:** for the purpose of this license, a fix shall be a minor amendment in The Software, intended to remove bugs or alter minor features which impair the The Software's functionality. A fix shall be marked as a new sub-sub-version number. For example, should Licensee purchase Software under version 1.1.1, an upgrade shall commence under number 1.1.2.

5. **Support:** Software is provided under an AS-IS basis and without any support, updates or maintenance. Nothing in this Agreement shall require Licensor to provide Licensee with support or fixes to any bug, failure, mis-performance or other defect in The Software.
6. **Liability:** To the extent permitted under Law, The Software is provided under an AS-IS basis. Licensor shall never, and without any limit, be liable for any damage, cost, expense or any other payment incurred by Licesee as a result of Software’s actions, failure, bugs and/or any other interaction between The Software and Licesee’s end-equipment, computers, other software or any 3rd party, end-equipment, computer or services. Moreover, Licensor shall never be liable for any defect in source code written by Licensee when relying on The Software or using The Software’s source code.
7. **Warranty:**

    1. **Intellectual Property:** Licensor hereby warrants that The Software does not violate or infringe any 3rd party claims in regards to intellectual property, patents and/or trademarks and that to the best of its knowledge no legal action has been taken against it for any infringement or violation of any 3rd party intellectual property rights.
    2. **No-Warranty:** The Software is provided without any warranty; Licensor hereby disclaims any warranty that The Software shall be error free, without defects or code which may cause damage to Licensee’s computers or to Licensee, and that Software shall be functional. Licensee shall be solely liable to any damage, defect or loss incurred as a result of operating software and undertake the risks contained in running The Software on License’s Server\[s\] and Website\[s\].
    3. **Prior Inspection:** Licensee hereby states that he inspected The Software thoroughly and found it satisfactory and adequate to his needs, that it does not interfere with his regular operation and that it does meet the standards and scope of his computer systems and architecture. Licensee found that The Software interacts with his development, website and server environment and that it does not infringe any of End User License Agreement of any software Licensee may use in performing his services. Licensee hereby waives any claims regarding The Software's incompatibility, performance, results and features, and warrants that he inspected the The Software.

8. **No Refunds:** Licensee warrants that he inspected The Software according to clause 7(c) and that it is adequate to his needs. Accordingly, as The Software is intangible goods, Licensee shall not be, ever, entitled to any refund, rebate, compensation or restitution for any reason whatsoever, even if The Software contains material flaws.
9. **Indemnification:** Licensee hereby warrants to hold Licensor harmless and indemnify Licensor for any lawsuit brought against it in regards to Licensee’s use of The Software in means that violate, breach or otherwise circumvent this license, Licensor's intellectual property rights or Licensor's title in The Software. Licensor shall promptly notify Licensee in case of such legal action and request Licensee’s consent prior to any settlement in relation to such lawsuit or claim.
10. **Governing Law, Jurisdiction:** Licensee hereby agrees not to initiate class-action lawsuits against Licensor in relation to this license and to compensate Licensor for any legal fees, cost or attorney fees should any claim brought by Licensee against Licensor be denied, in part or in full.

--------------------------------------------------------------------------------
Package: @angular/service-worker
License: "MIT"

The MIT License

Copyright (c) 2010-2025 Google LLC. https://angular.dev/license

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

--------------------------------------------------------------------------------
Package: @angular/animations
License: "MIT"

The MIT License

Copyright (c) 2010-2025 Google LLC. https://angular.dev/license

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

--------------------------------------------------------------------------------
Package: @kurkle/color
License: "MIT"

The MIT License (MIT)

Copyright (c) 2018-2024 Jukka Kurkela

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------
Package: chart.js
License: "MIT"

The MIT License (MIT)

Copyright (c) 2014-2024 Chart.js Contributors

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------
Package: @angular/common
License: "MIT"

The MIT License

Copyright (c) 2010-2025 Google LLC. https://angular.dev/license

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

--------------------------------------------------------------------------------
Package: @angular/router
License: "MIT"

The MIT License

Copyright (c) 2010-2025 Google LLC. https://angular.dev/license

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

--------------------------------------------------------------------------------
Package: @primeuix/utils
License: "MIT"

MIT License

Copyright (c) 2024 PrimeTek

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

--------------------------------------------------------------------------------
Package: @angular/forms
License: "MIT"

The MIT License

Copyright (c) 2010-2025 Google LLC. https://angular.dev/license

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

--------------------------------------------------------------------------------
Package: @primeuix/styled
License: "MIT"

MIT License

Copyright (c) 2024 PrimeTek

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

--------------------------------------------------------------------------------
Package: rxjs
License: "Apache-2.0"

                               Apache License
                         Version 2.0, January 2004
                      http://www.apache.org/licenses/

 TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

 1. Definitions.

    "License" shall mean the terms and conditions for use, reproduction,
    and distribution as defined by Sections 1 through 9 of this document.

    "Licensor" shall mean the copyright owner or entity authorized by
    the copyright owner that is granting the License.

    "Legal Entity" shall mean the union of the acting entity and all
    other entities that control, are controlled by, or are under common
    control with that entity. For the purposes of this definition,
    "control" means (i) the power, direct or indirect, to cause the
    direction or management of such entity, whether by contract or
    otherwise, or (ii) ownership of fifty percent (50%) or more of the
    outstanding shares, or (iii) beneficial ownership of such entity.

    "You" (or "Your") shall mean an individual or Legal Entity
    exercising permissions granted by this License.

    "Source" form shall mean the preferred form for making modifications,
    including but not limited to software source code, documentation
    source, and configuration files.

    "Object" form shall mean any form resulting from mechanical
    transformation or translation of a Source form, including but
    not limited to compiled object code, generated documentation,
    and conversions to other media types.

    "Work" shall mean the work of authorship, whether in Source or
    Object form, made available under the License, as indicated by a
    copyright notice that is included in or attached to the work
    (an example is provided in the Appendix below).

    "Derivative Works" shall mean any work, whether in Source or Object
    form, that is based on (or derived from) the Work and for which the
    editorial revisions, annotations, elaborations, or other modifications
    represent, as a whole, an original work of authorship. For the purposes
    of this License, Derivative Works shall not include works that remain
    separable from, or merely link (or bind by name) to the interfaces of,
    the Work and Derivative Works thereof.

    "Contribution" shall mean any work of authorship, including
    the original version of the Work and any modifications or additions
    to that Work or Derivative Works thereof, that is intentionally
    submitted to Licensor for inclusion in the Work by the copyright owner
    or by an individual or Legal Entity authorized to submit on behalf of
    the copyright owner. For the purposes of this definition, "submitted"
    means any form of electronic, verbal, or written communication sent
    to the Licensor or its representatives, including but not limited to
    communication on electronic mailing lists, source code control systems,
    and issue tracking systems that are managed by, or on behalf of, the
    Licensor for the purpose of discussing and improving the Work, but
    excluding communication that is conspicuously marked or otherwise
    designated in writing by the copyright owner as "Not a Contribution."

    "Contributor" shall mean Licensor and any individual or Legal Entity
    on behalf of whom a Contribution has been received by Licensor and
    subsequently incorporated within the Work.

 2. Grant of Copyright License. Subject to the terms and conditions of
    this License, each Contributor hereby grants to You a perpetual,
    worldwide, non-exclusive, no-charge, royalty-free, irrevocable
    copyright license to reproduce, prepare Derivative Works of,
    publicly display, publicly perform, sublicense, and distribute the
    Work and such Derivative Works in Source or Object form.

 3. Grant of Patent License. Subject to the terms and conditions of
    this License, each Contributor hereby grants to You a perpetual,
    worldwide, non-exclusive, no-charge, royalty-free, irrevocable
    (except as stated in this section) patent license to make, have made,
    use, offer to sell, sell, import, and otherwise transfer the Work,
    where such license applies only to those patent claims licensable
    by such Contributor that are necessarily infringed by their
    Contribution(s) alone or by combination of their Contribution(s)
    with the Work to which such Contribution(s) was submitted. If You
    institute patent litigation against any entity (including a
    cross-claim or counterclaim in a lawsuit) alleging that the Work
    or a Contribution incorporated within the Work constitutes direct
    or contributory patent infringement, then any patent licenses
    granted to You under this License for that Work shall terminate
    as of the date such litigation is filed.

 4. Redistribution. You may reproduce and distribute copies of the
    Work or Derivative Works thereof in any medium, with or without
    modifications, and in Source or Object form, provided that You
    meet the following conditions:

    (a) You must give any other recipients of the Work or
        Derivative Works a copy of this License; and

    (b) You must cause any modified files to carry prominent notices
        stating that You changed the files; and

    (c) You must retain, in the Source form of any Derivative Works
        that You distribute, all copyright, patent, trademark, and
        attribution notices from the Source form of the Work,
        excluding those notices that do not pertain to any part of
        the Derivative Works; and

    (d) If the Work includes a "NOTICE" text file as part of its
        distribution, then any Derivative Works that You distribute must
        include a readable copy of the attribution notices contained
        within such NOTICE file, excluding those notices that do not
        pertain to any part of the Derivative Works, in at least one
        of the following places: within a NOTICE text file distributed
        as part of the Derivative Works; within the Source form or
        documentation, if provided along with the Derivative Works; or,
        within a display generated by the Derivative Works, if and
        wherever such third-party notices normally appear. The contents
        of the NOTICE file are for informational purposes only and
        do not modify the License. You may add Your own attribution
        notices within Derivative Works that You distribute, alongside
        or as an addendum to the NOTICE text from the Work, provided
        that such additional attribution notices cannot be construed
        as modifying the License.

    You may add Your own copyright statement to Your modifications and
    may provide additional or different license terms and conditions
    for use, reproduction, or distribution of Your modifications, or
    for any such Derivative Works as a whole, provided Your use,
    reproduction, and distribution of the Work otherwise complies with
    the conditions stated in this License.

 5. Submission of Contributions. Unless You explicitly state otherwise,
    any Contribution intentionally submitted for inclusion in the Work
    by You to the Licensor shall be under the terms and conditions of
    this License, without any additional terms or conditions.
    Notwithstanding the above, nothing herein shall supersede or modify
    the terms of any separate license agreement you may have executed
    with Licensor regarding such Contributions.

 6. Trademarks. This License does not grant permission to use the trade
    names, trademarks, service marks, or product names of the Licensor,
    except as required for reasonable and customary use in describing the
    origin of the Work and reproducing the content of the NOTICE file.

 7. Disclaimer of Warranty. Unless required by applicable law or
    agreed to in writing, Licensor provides the Work (and each
    Contributor provides its Contributions) on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
    implied, including, without limitation, any warranties or conditions
    of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
    PARTICULAR PURPOSE. You are solely responsible for determining the
    appropriateness of using or redistributing the Work and assume any
    risks associated with Your exercise of permissions under this License.

 8. Limitation of Liability. In no event and under no legal theory,
    whether in tort (including negligence), contract, or otherwise,
    unless required by applicable law (such as deliberate and grossly
    negligent acts) or agreed to in writing, shall any Contributor be
    liable to You for damages, including any direct, indirect, special,
    incidental, or consequential damages of any character arising as a
    result of this License or out of the use or inability to use the
    Work (including but not limited to damages for loss of goodwill,
    work stoppage, computer failure or malfunction, or any and all
    other commercial damages or losses), even if such Contributor
    has been advised of the possibility of such damages.

 9. Accepting Warranty or Additional Liability. While redistributing
    the Work or Derivative Works thereof, You may choose to offer,
    and charge a fee for, acceptance of support, warranty, indemnity,
    or other liability obligations and/or rights consistent with this
    License. However, in accepting such obligations, You may act only
    on Your own behalf and on Your sole responsibility, not on behalf
    of any other Contributor, and only if You agree to indemnify,
    defend, and hold each Contributor harmless for any liability
    incurred by, or claims asserted against, such Contributor by reason
    of your accepting any such warranty or additional liability.

 END OF TERMS AND CONDITIONS

 APPENDIX: How to apply the Apache License to your work.

    To apply the Apache License to your work, attach the following
    boilerplate notice, with the fields enclosed by brackets "[]"
    replaced with your own identifying information. (Don't include
    the brackets!)  The text should be enclosed in the appropriate
    comment syntax for the file format. We also recommend that a
    file or class name and description of purpose be included on the
    same "printed page" as the copyright notice for easier
    identification within third-party archives.

 Copyright (c) 2015-2018 Google, Inc., Netflix, Inc., Microsoft Corp. and contributors

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 

--------------------------------------------------------------------------------
Package: tslib
License: "0BSD"

Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
--------------------------------------------------------------------------------
Package: @angular/core
License: "MIT"

The MIT License

Copyright (c) 2010-2025 Google LLC. https://angular.dev/license

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

--------------------------------------------------------------------------------
Package: zone.js
License: "MIT"

The MIT License

Copyright (c) 2010-2024 Google LLC. https://angular.io/license

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

--------------------------------------------------------------------------------
Package: primeicons
License: "MIT"

MIT License

Copyright (c) 2018-2021 PrimeTek

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

--------------------------------------------------------------------------------


=== frontend/dist/Elsuq/prerendered-routes.json ===

{
  "routes": {}
}

=== frontend/dist/Elsuq/browser/ngsw.json ===

{
  "configVersion": 1,
  "timestamp": 1753139956711,
  "index": "/index.html",
  "assetGroups": [
    {
      "name": "app",
      "installMode": "prefetch",
      "updateMode": "prefetch",
      "cacheQueryOptions": {
        "ignoreVary": true
      },
      "urls": [
        "/chunk-3XQLIVAJ.js",
        "/chunk-52K45TNK.js",
        "/chunk-5KXUJUKE.js",
        "/chunk-6BQFCXYI.js",
        "/chunk-BDKHI4ZM.js",
        "/chunk-HCI3OPLW.js",
        "/chunk-J2Q5JUYZ.js",
        "/chunk-J2VLTBHC.js",
        "/chunk-JSKIRH73.js",
        "/chunk-MR3LTEKL.js",
        "/chunk-NN2DNJJJ.js",
        "/chunk-RXTX4AFK.js",
        "/chunk-TKRJ2DRO.js",
        "/chunk-VC6FG47Q.js",
        "/chunk-YZI3BQ6A.js",
        "/chunk-ZNY6AGU3.js",
        "/favicon.ico",
        "/index.html",
        "/main-US5BHQ2Y.js",
        "/manifest.webmanifest",
        "/polyfills-FFHMD2TL.js",
        "/styles-E45T435F.css"
      ],
      "patterns": []
    },
    {
      "name": "assets",
      "installMode": "lazy",
      "updateMode": "prefetch",
      "cacheQueryOptions": {
        "ignoreVary": true
      },
      "urls": [
        "/assets/fonts/primeicons.svg",
        "/assets/fonts/primeicons.ttf",
        "/assets/fonts/primeicons.woff",
        "/assets/fonts/primeicons.woff2",
        "/assets/images/product-placeholder.jpg",
        "/elsuq.png",
        "/icons/apple-touch-icon-114x114.png",
        "/icons/apple-touch-icon-120x120.png",
        "/icons/apple-touch-icon-144x144.png",
        "/icons/apple-touch-icon-152x152.png",
        "/icons/apple-touch-icon-167x167.png",
        "/icons/apple-touch-icon-180x180.png",
        "/icons/apple-touch-icon-57x57.png",
        "/icons/apple-touch-icon-60x60.png",
        "/icons/apple-touch-icon-72x72.png",
        "/icons/apple-touch-icon-76x76.png",
        "/icons/icon-192x192.png",
        "/icons/icon-512x512.png",
        "/icons/icon-64x64.png",
        "/icons/maskable-icon-128x128.png",
        "/icons/maskable-icon-144x144.png",
        "/icons/maskable-icon-152x152.png",
        "/icons/maskable-icon-192x192.png",
        "/icons/maskable-icon-384x384.png",
        "/icons/maskable-icon-512x512.png",
        "/icons/maskable-icon-64x64.png",
        "/icons/maskable-icon-72x72.png",
        "/icons/maskable-icon-96x96.png",
        "/icons/pwa-128x128.png",
        "/icons/pwa-144x144.png",
        "/icons/pwa-152x152.png",
        "/icons/pwa-192x192.png",
        "/icons/pwa-384x384.png",
        "/icons/pwa-512x512.png",
        "/icons/pwa-64x64.png",
        "/icons/pwa-72x72.png",
        "/icons/pwa-96x96.png",
        "/logo.png",
        "/media/primeicons-4GST5W3O.woff2",
        "/media/primeicons-DHQU4SEP.svg",
        "/media/primeicons-GEFHGEHP.ttf",
        "/media/primeicons-P53SE5CV.woff",
        "/screenshots/desktop-home.jpg",
        "/screenshots/mobile-home.png"
      ],
      "patterns": []
    }
  ],
  "dataGroups": [],
  "hashTable": {
    "/assets/fonts/primeicons.svg": "a07ae39027c1a780b42fd82fad7575c2924d9d28",
    "/assets/fonts/primeicons.ttf": "3b878ca7e88945a8ec25814810b95367d8977ae6",
    "/assets/fonts/primeicons.woff": "361e3af71bb4e515feead2f787348a92a5527158",
    "/assets/fonts/primeicons.woff2": "837c1279b6af9d297f34fdb43e6fcc9206a79f32",
    "/assets/images/product-placeholder.jpg": "7d29bd1c2721fa5afb594ef689a851db0b1f3b27",
    "/chunk-3XQLIVAJ.js": "448e208f80a9653e0949b0a6fe036aecaf64f426",
    "/chunk-52K45TNK.js": "c694ed81a97432fe18ac7739b2e8390d2afb04f8",
    "/chunk-5KXUJUKE.js": "01d973af058105a9def69116493ff1c13a9c8c1f",
    "/chunk-6BQFCXYI.js": "21351b79aff5f857aab8ebd66ef0a18a74d37027",
    "/chunk-BDKHI4ZM.js": "b7686b158fd5427752556359b09c0e5d21b57c1c",
    "/chunk-HCI3OPLW.js": "6f25feb7b09b69c89266a7ade291028952d433b2",
    "/chunk-J2Q5JUYZ.js": "ed58d4a309391c30d73cad888923fb1ceba9f64c",
    "/chunk-J2VLTBHC.js": "4ea210c4f9bd3586509b669f65a551bcbd1404a2",
    "/chunk-JSKIRH73.js": "9ab45990bef127356bc32512a0941ddca738230a",
    "/chunk-MR3LTEKL.js": "3823b7a01a53af20a087b89bb24f16290b8dc97c",
    "/chunk-NN2DNJJJ.js": "41e36d09692218f105ea25e6de0aca2a65f2fb11",
    "/chunk-RXTX4AFK.js": "d0606d7cb082714c8181422e4c66367a302b0f15",
    "/chunk-TKRJ2DRO.js": "834b65e9e2135633068e9ec5f7edebf8d254c963",
    "/chunk-VC6FG47Q.js": "0da49e5579c0ddcf2085142cc962b2ad24035b59",
    "/chunk-YZI3BQ6A.js": "b9e7b01c9c505088bfb129a9f8cdc121265eaece",
    "/chunk-ZNY6AGU3.js": "8eaefbfbbfe21957b580088b3d6574b35a323108",
    "/elsuq.png": "959d1ad0ef7fa6770e990a9bbc4696fb7deeb258",
    "/favicon.ico": "c7eb568aaa4e9ac393dd78391f119a0a32c4f887",
    "/icons/apple-touch-icon-114x114.png": "ea23edbb78662938b2049a378bc76c91f3e2ee9e",
    "/icons/apple-touch-icon-120x120.png": "ebc515a114dc9cb9fb3e707c9b98ae5aa64865ea",
    "/icons/apple-touch-icon-144x144.png": "a80ab7ff46c82225a5dbdad1f940adc367e43d5b",
    "/icons/apple-touch-icon-152x152.png": "bd0cda1216b04a056ed58ce78d295a7f61da22c3",
    "/icons/apple-touch-icon-167x167.png": "abe33922435bfb2de56d43a7523b69c4b024fb58",
    "/icons/apple-touch-icon-180x180.png": "7344ca7e16b42e2e2873de12cb430df204e43cb1",
    "/icons/apple-touch-icon-57x57.png": "81c57949b3ea6d9094883b8c495371f155abad6a",
    "/icons/apple-touch-icon-60x60.png": "0bdf98569fd3a932f161db4016037c22ac351887",
    "/icons/apple-touch-icon-72x72.png": "46cafa3677202ac56d90ea158f3e3e689ba84d46",
    "/icons/apple-touch-icon-76x76.png": "8b20383df5c656be648d95afbefd26e4d8fbb54f",
    "/icons/icon-192x192.png": "f0c73b7be1037857c292b81ce9d74e6c2fac5916",
    "/icons/icon-512x512.png": "59b65cb35eb15e1993a7049555450631f967e487",
    "/icons/icon-64x64.png": "75e2d0e9c16d2d3ff8188fd06443659b609cef50",
    "/icons/maskable-icon-128x128.png": "4beafe86ae242be5d47892214ba82ef695f7dbb5",
    "/icons/maskable-icon-144x144.png": "a80ab7ff46c82225a5dbdad1f940adc367e43d5b",
    "/icons/maskable-icon-152x152.png": "bd0cda1216b04a056ed58ce78d295a7f61da22c3",
    "/icons/maskable-icon-192x192.png": "67b739703212e84753a2fe78c7f5caa786e12446",
    "/icons/maskable-icon-384x384.png": "b32150d646455980b632ca75afcebe2099321949",
    "/icons/maskable-icon-512x512.png": "ba758a32de23ec1902b2c73676489cb62988f141",
    "/icons/maskable-icon-64x64.png": "5179cb2e3b0059b5f32e1ceee0c6b02b51f2a7f9",
    "/icons/maskable-icon-72x72.png": "46cafa3677202ac56d90ea158f3e3e689ba84d46",
    "/icons/maskable-icon-96x96.png": "4eb26549d463686059cee1d4a0fdbcbfa69cd6f2",
    "/icons/pwa-128x128.png": "480c95014efe11b0005fce6bbabcc695f4b9381f",
    "/icons/pwa-144x144.png": "44581f48d7561116e595bacf57ad803592dfcf30",
    "/icons/pwa-152x152.png": "e25b9677b4ad51959141448349585507b4210b13",
    "/icons/pwa-192x192.png": "f0c73b7be1037857c292b81ce9d74e6c2fac5916",
    "/icons/pwa-384x384.png": "44ae976c0c6d93a3eeb862d7a913a3e6c5b79130",
    "/icons/pwa-512x512.png": "59b65cb35eb15e1993a7049555450631f967e487",
    "/icons/pwa-64x64.png": "75e2d0e9c16d2d3ff8188fd06443659b609cef50",
    "/icons/pwa-72x72.png": "cc22a55ed50d7c0adac285cb1f149c879547a987",
    "/icons/pwa-96x96.png": "67d4238900fb76b1211ad566a64f201aff529000",
    "/index.html": "9f487ffc1eabd5fcac269cf62f0b902c0961334b",
    "/logo.png": "f9adace283daf0516029f2c3f949976beb3cd705",
    "/main-US5BHQ2Y.js": "c1f907ff48d1878cd2131b9df3b579f92ed5549a",
    "/manifest.webmanifest": "c0bb7f5fe330751818718607ba8fe248cc40558a",
    "/media/primeicons-4GST5W3O.woff2": "837c1279b6af9d297f34fdb43e6fcc9206a79f32",
    "/media/primeicons-DHQU4SEP.svg": "a07ae39027c1a780b42fd82fad7575c2924d9d28",
    "/media/primeicons-GEFHGEHP.ttf": "3b878ca7e88945a8ec25814810b95367d8977ae6",
    "/media/primeicons-P53SE5CV.woff": "361e3af71bb4e515feead2f787348a92a5527158",
    "/polyfills-FFHMD2TL.js": "f49b49a155bc7d192db62a4c15d0a612b460a667",
    "/screenshots/desktop-home.jpg": "4e4a9f858aa359c21cc32c909ad666786c8feed6",
    "/screenshots/mobile-home.png": "6294c08fb485d92af7e537f8c16c1ecd5b79e519",
    "/styles-E45T435F.css": "9404cbb4845fec9af207de64de0f048d4824a567"
  },
  "navigationUrls": [
    {
      "positive": true,
      "regex": "^\\/.*$"
    },
    {
      "positive": false,
      "regex": "^\\/(?:.+\\/)?[^/]*\\.[^/]*$"
    },
    {
      "positive": false,
      "regex": "^\\/(?:.+\\/)?[^/]*__[^/]*$"
    },
    {
      "positive": false,
      "regex": "^\\/(?:.+\\/)?[^/]*__[^/]*\\/.*$"
    }
  ],
  "navigationRequestStrategy": "performance"
}

=== frontend/src/main.ts ===

import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));


=== frontend/src/styles.scss ===

/* You can add global styles to this file, and also import other style files */
@use 'primeflex/primeflex' as *;

@font-face {
  font-family: 'primeicons';
  font-style: normal;
  font-weight: normal;
  src: url('/assets/fonts/primeicons.eot');
  src: url('/assets/fonts/primeicons.eot?#iefix') format('embedded-opentype'),
       url('/assets/fonts/primeicons.ttf') format('truetype'),
       url('/assets/fonts/primeicons.woff') format('woff'),
       url('/assets/fonts/primeicons.woff2') format('woff2'),
       url('/assets/fonts/primeicons.svg?#primeicons') format('svg');
}




@import 'primeicons/primeicons.css';
// @import "tailwindcss";



html, body{
    font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";

      padding: 0 !important; margin: 0 !important;
}

:root {
  --header-height: 9vh;
  --filters-header-height: 9vh;
  --p-datatable-header-cell-selected-background: transparent !important;
--p-datatable-header-cell-selected-color: inherit !important;
  
}

.p-timeline-event-opposite {
  flex: 0 !important;
}

.mobile-menu-btn .pi {
  font-size: 1.5rem !important;
}

.icon-large .pi {
  font-size: 1.2rem !important;
}

.filtes-fixed{
position: fixed; top:var(--header-height) ; z-index: 200; left:20%;right:0;
}


.header-height{height: var(--header-height) !important};
.header-height-margin{ margin-top:  var(--header-height) };
// .content-height {
//   padding: 0 !important;
//   height: calc(100vh - var(--header-height) ) !important; 
//   overflow: hidden;

// }

.p-error{
  color:rgb(240, 52, 52);
}

@media (max-width: 968px) {
  :root {
    --header-height: 8vh !important;
  }

  .filtes-fixed{
position: fixed; top:var(--header-height) ; z-index: 200; left:0;right:0;
}

.content-height {
  padding: 0 !important;
  height: 100%; 
  overflow: scroll;

}
//   // .h-height{top: 2rem !important}
}

  /* Custom heights for product cards */
   .h-200 {
    height: 200px;
  }
  
.h-100 {
    height: 100px;

  }
  
.min-h-20 {
    min-height: 5rem;
  }
  
  .obj-cover {
    object-fit: cover;
  }

// :root {
//   // Layout dimensions
//   --header-height: 85px;
//   --app-spacing: 15px;
//   --font-family:"Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
//     Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
//     "Segoe UI Symbol";
  
//   // Color & appearance
//   --backdrop: rgba(253, 253, 253, 0.8);
//   --language-input-border: none;
  
//   // PrimeNG overrides
//   --p-datatable-header-cell-selected-background: transparent !important;
//   --p-datatable-header-cell-selected-color: inherit !important;
// }

// Dark Theme
:root.my-app-dark {
  // Color overrides for dark mode
  --p-blue-50: #080911;
  --p-green-50: #080911;
  --p-orange-50: #080911;
  --bg-blue-200: red;
  --backdrop: rgba(22, 21, 21, 0.7);
  --language-input-border: rgb(49, 47, 47) !important;
}

.grid {
  margin-right: 0 !important;
  margin-left: 0 !important;
  margin-top: 0 !important;
}

/* Remove default link styling globally */
a {
  color: inherit !important;
  text-decoration: none !important;
}

a:hover {
  color: inherit !important;
}

a:visited {
  color: inherit !important;
}

a:active {
  color: inherit !important;
}


.input-icon {
  position: absolute;
  z-index: 1;
  left: 10px;
  top: 50%;
  margin-top: -0.5rem;
  color: var(--text-color-secondary);
  

}

/* In your styles.css or global stylesheet */
:root {
    --font-family: 'Inter', sans-serif;
    --font-family-heading: 'Poppins', sans-serif;
    --font-family-mono: 'Courier New', monospace;
}

body {
    font-family: var(--font-family);
}

h1, h2, h3, h4, h5, h6 {
    font-family: var(--font-family-heading);
}

code, pre {
    font-family: var(--font-family-mono);
}

/* Add this to your existing src/styles.scss file */

// /* RTL Support */
// [dir="rtl"] {
//   /* Text alignment */
//   .text-left { text-align: right !important; }
//   .text-right { text-align: left !important; }
  
//   /* Margins */
//   .ml-1 { margin-right: 0.25rem !important; margin-left: 0 !important; }
//   .ml-2 { margin-right: 0.5rem !important; margin-left: 0 !important; }
//   .ml-3 { margin-right: 0.75rem !important; margin-left: 0 !important; }
//   .ml-4 { margin-right: 1rem !important; margin-left: 0 !important; }
//   .ml-auto { margin-right: auto !important; margin-left: 0 !important; }
  
//   .mr-1 { margin-left: 0.25rem !important; margin-right: 0 !important; }
//   .mr-2 { margin-left: 0.5rem !important; margin-right: 0 !important; }
//   .mr-3 { margin-left: 0.75rem !important; margin-right: 0 !important; }
//   .mr-4 { margin-left: 1rem !important; margin-right: 0 !important; }
//   .mr-auto { margin-left: auto !important; margin-right: 0 !important; }
  
//   /* Padding */
//   .pl-1 { padding-right: 0.25rem !important; padding-left: 0 !important; }
//   .pl-2 { padding-right: 0.5rem !important; padding-left: 0 !important; }
//   .pl-3 { padding-right: 0.75rem !important; padding-left: 0 !important; }
//   .pl-4 { padding-right: 1rem !important; padding-left: 0 !important; }
  
//   .pr-1 { padding-left: 0.25rem !important; padding-right: 0 !important; }
//   .pr-2 { padding-left: 0.5rem !important; padding-right: 0 !important; }
//   .pr-3 { padding-left: 0.75rem !important; padding-right: 0 !important; }
//   .pr-4 { padding-left: 1rem !important; padding-right: 0 !important; }
  
//   /* Border radius */
//   .border-radius-left { 
//     border-top-right-radius: var(--border-radius) !important;
//     border-bottom-right-radius: var(--border-radius) !important;
//     border-top-left-radius: 0 !important;
//     border-bottom-left-radius: 0 !important;
//   }
  
//   .border-radius-right { 
//     border-top-left-radius: var(--border-radius) !important;
//     border-bottom-left-radius: var(--border-radius) !important;
//     border-top-right-radius: 0 !important;
//     border-bottom-right-radius: 0 !important;
//   }
// }

// /* PrimeNG RTL Support */
// [dir="rtl"] {
//   /* Menu items */
//   .p-menuitem-link {
//     text-align: right;
//   }
  
//   /* Input icons */
//   .input-icon {
//     left: auto !important;
//     right: 10px !important;
//   }
  
//   /* Button icons */
//   .p-button .p-button-icon-left {
//     margin-right: 0 !important;
//     margin-left: 0.5rem !important;
//   }
  
//   .p-button .p-button-icon-right {
//     margin-left: 0 !important;
//     margin-right: 0.5rem !important;
//   }
  
//   /* Dropdown */
//   .p-dropdown .p-dropdown-trigger {
//     right: auto !important;
//     left: 0 !important;
//   }
  
//   /* Card headers */
//   .p-card-header {
//     text-align: right;
//   }
  
//   /* Breadcrumb */
//   .p-breadcrumb ol li + li::before {
//     content: "◀" !important;
//   }
  
//   /* Table */
//   .p-datatable .p-datatable-tbody > tr > td {
//     text-align: right;
//   }
  
//   .p-datatable .p-datatable-thead > tr > th {
//     text-align: right;
//   }
// }

// /* Language-specific fonts */
// [lang="ar"] {
//   font-family: 'Noto Sans Arabic', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  
//   /* Improve Arabic text rendering */
//   text-rendering: optimizeLegibility;
//   -webkit-font-feature-settings: "kern" 1, "liga" 1, "calt" 1;
//   font-feature-settings: "kern" 1, "liga" 1, "calt" 1;
// }

// [lang="fr"], [lang="en"] {
//   font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
//     Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
//     "Segoe UI Symbol";
// }

// /* Smooth transitions for direction changes */
// * {
//   transition: margin 0.3s ease, padding 0.3s ease;
// }

.p-select-overlay,
.p-select-panel,
.language-panel {
  z-index: 99999 !important;
}

=== frontend/src/app/app.component.scss ===



=== frontend/src/app/app.component.spec.ts ===

// import { TestBed } from '@angular/core/testing';
// import { AppComponent } from './app.component';

// describe('AppComponent', () => {
//   beforeEach(async () => {
//     await TestBed.configureTestingModule({
//       imports: [AppComponent],
//     }).compileComponents();
//   });

//   it('should create the app', () => {
//     const fixture = TestBed.createComponent(AppComponent);
//     const app = fixture.componentInstance;
//     expect(app).toBeTruthy();
//   });

//   it(`should have the 'Elsuq' title`, () => {
//     const fixture = TestBed.createComponent(AppComponent);
//     const app = fixture.componentInstance;
//     expect(app.title).toEqual('Elsuq');
//   });

//   it('should render title', () => {
//     const fixture = TestBed.createComponent(AppComponent);
//     fixture.detectChanges();
//     const compiled = fixture.nativeElement as HTMLElement;
//     expect(compiled.querySelector('h1')?.textContent).toContain('Hello, Elsuq');
//   });
// });


=== frontend/src/app/app.component.ts ===

// src/app/app.component.ts
import { Component, inject, OnInit } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { ButtonModule } from 'primeng/button';
import { HeaderComponent } from './layout/header/header.component';
import { FooterComponent } from './layout/footer/footer.component';
import { ViewportService } from './services/viewport.service';
import { TranslationService } from './services/translation.service';
import { TranslateModule } from '@ngx-translate/core';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    RouterOutlet, 
    ButtonModule, 
    HeaderComponent,
    TranslateModule
  ],
  templateUrl: './app.component.html',
  styleUrl: './app.component.scss'
})
export class AppComponent implements OnInit {
  title = 'Fresh Produce';
  
  private viewportService = inject(ViewportService);
  private translationService = inject(TranslationService);

  ngOnInit() {
    // Initialize translation service
    // The service will automatically load the saved language or default to French
    console.log('App initialized with language:', this.translationService.getCurrentLanguage());
  }
}

=== frontend/src/app/app.config.ts ===

// src/app/app.config.ts
import { ApplicationConfig, provideZoneChangeDetection, isDevMode, importProvidersFrom } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideHttpClient, withInterceptors, HttpClient } from '@angular/common/http';
import { provideAnimationsAsync } from '@angular/platform-browser/animations/async';
import { providePrimeNG } from 'primeng/config';
import { TranslateModule, TranslateLoader } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';

import { MyPreset } from './styles';
import { routes } from './app.routes';
import { authInterceptor } from './interceptors/auth.interceptor';
import { provideServiceWorker } from '@angular/service-worker';

// Factory function for TranslateHttpLoader
export function HttpLoaderFactory(http: HttpClient) {
  return new TranslateHttpLoader(http, './assets/i18n/', '.json');
}

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }), 
    provideRouter(routes),
    provideHttpClient(withInterceptors([authInterceptor])),
    provideAnimationsAsync(),
    providePrimeNG({
      theme: {
        preset: MyPreset,
        options: {
          darkModeSelector: '.my-app-dark'
        },
      }
    }),
    // Import TranslateModule with configuration
    importProvidersFrom(
      TranslateModule.forRoot({
        loader: {
          provide: TranslateLoader,
          useFactory: HttpLoaderFactory,
          deps: [HttpClient]
        },
        defaultLanguage: 'fr'
      })
    ),
    provideServiceWorker('ngsw-worker.js', {
      enabled: !isDevMode(),
      registrationStrategy: 'registerWhenStable:30000'
    })
  ]
};

=== frontend/src/app/app.routes.ts ===

// src/app/app.routes.ts
import { Routes } from '@angular/router';
import { LoginComponent } from './pages/login/login.component';
import { RegisterComponent } from './pages/register/register.component';
import { HomeComponent } from './pages/home/home.component';
import { ProductListComponent } from './pages/products/product-list/product-list.component';
import { ProductDetailComponent } from './pages/products/product-detail/product-detail.component';
import { authGuard } from './shared/auth.guard';
import { CartComponent } from './pages/cart/cart.component';
import { adminGuard } from './shared/admin.guard'; 

export const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'login', component: LoginComponent },
  { path: 'register', component: RegisterComponent },
  { path: 'products', component: ProductListComponent },
  { path: 'products/:id', component: ProductDetailComponent },
  { path: 'cart', component: CartComponent },
  { 
    path: 'checkout', 
    loadComponent: () => import('./pages/checkout/checkout.component').then(m => m.CheckoutComponent),
    canActivate: [authGuard]
  },
  { 
    path: 'orders', 
    loadComponent: () => import('./pages/orders/order-list/order-list.component').then(m => m.OrderListComponent),
    canActivate: [authGuard]
  },
  { 
    path: 'orders/:id', 
    loadComponent: () => import('./pages/orders/order-detail/order-detail.component').then(m => m.OrderDetailComponent),
    canActivate: [authGuard]
  },
  // Admin Routes
  { 
    path: 'admin', 
    loadComponent: () => import('./pages/admin/admin-dashboard/admin-dashboard.component').then(m => m.AdminDashboardComponent),
    canActivate: [adminGuard]
  },
  { 
    path: 'admin/orders', 
    loadComponent: () => import('./pages/admin/admin-orders/admin-orders.component').then(m => m.AdminOrdersComponent),
    canActivate: [adminGuard]
  },
  { 
    path: 'admin/users', 
    loadComponent: () => import('./pages/admin/admin-users/admin-users.component').then(m => m.AdminUsersComponent),
    canActivate: [adminGuard]
  },
  { path: '**', redirectTo: '' }
];

=== frontend/src/app/styles.ts ===

import { definePreset } from '@primeng/themes';
import Aura from '@primeng/themes/aura';

export const MyPreset = definePreset(Aura, {
    semantic: {
        primary: {
            50: '{pink.50}',
            100: '{pink.100}',
            200: '{pink.200}',
            300: '{pink.300}',
            400: '{pink.400}',
            500: '{pink.500}',
            600: '{pink.600}',
            700: '{pink.700}',
            800: '{pink.800}',
            900: '{pink.900}',
            950: '{pink.950}'
        },
        colorScheme: {
            light: {
                primary: {
                    color: '{zinc.950}',
                    hoverColor: '{zinc.900}',
                    activeColor: '{zinc.800}'
                },
                highlight: {
                    background: '{zinc.950}',
                    focusBackground: '{zinc.700}',
                    color: '#ffffff',
                    focusColor: '#ffffff'
                }
            },
            dark: {
                primary: {
                    color: '{zinc.50}',
                    hoverColor: '{zinc.100}',
                    activeColor: '{zinc.200}'
                },
                highlight: {
                    background: 'rgba(250, 250, 250, .16)',
                    focusBackground: 'rgba(250, 250, 250, .24)',
                    color: 'rgba(255,255,255,.87)',
                    focusColor: 'rgba(255,255,255,.87)'
                }
            }
        }
    }
});

=== frontend/src/app/interceptors/auth.interceptor.ts ===

// src/app/interceptors/auth.interceptor.ts
import { HttpInterceptorFn, HttpErrorResponse } from '@angular/common/http';
import { inject } from '@angular/core';
import { Router } from '@angular/router';
import { catchError, throwError } from 'rxjs';
import { AuthService } from '../services/auth.service';

export const authInterceptor: HttpInterceptorFn = (req, next) => {
  const authService = inject(AuthService);
  const router = inject(Router);
  
  // Skip auth endpoints
  if (req.url.includes('/auth/login')) {
    return next(req);
  }
  
  const token = localStorage.getItem('token');
  
  if (token) {
    const cloned = req.clone({
      headers: req.headers.set('Authorization', `Bearer ${token}`)
    });
    
    // 401 handling with direct message
    return next(cloned).pipe(
      catchError((error) => {
        if (error instanceof HttpErrorResponse && error.status === 401) {
          console.log('Token expired, redirecting to login');
          
          // Store the session expired message flag in localStorage
          localStorage.setItem('session_expired', 'true');
          
          // Log out and clear data
          authService.logout();
          
          // Navigate to login with return URL
          router.navigate(['/login'], { 
            queryParams: { returnUrl: router.url }
          });
          
          return throwError(() => new Error('Session expired. Please log in again.'));
        }
        return throwError(() => error);
      })
    );
  }
  
  return next(req);
};

=== frontend/src/app/layout/footer/footer.component.scss ===



=== frontend/src/app/layout/footer/footer.component.spec.ts ===

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { FooterComponent } from './footer.component';

describe('FooterComponent', () => {
  let component: FooterComponent;
  let fixture: ComponentFixture<FooterComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [FooterComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(FooterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== frontend/src/app/layout/footer/footer.component.ts ===

// src/app/layout/footer/footer.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-footer',
  standalone: true,
  imports: [],
  template: `
    <div class="p-3 surface-card shadow-2 text-center mt-4">
      <p>© 2025 Fresh Produce E-commerce. All rights reserved.</p>
    </div>
  `,
  styles: ``
})
export class FooterComponent {}

=== frontend/src/app/layout/header/header.component.scss ===


  // For header.component.scss
.mobile-menu {
  position: relative;
  z-index: 1000;
  
  .surface-overlay {
    animation: slideDown 0.3s ease;
    max-height: calc(100vh - 70px);
    overflow-y: auto;
  }
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}




=== frontend/src/app/layout/header/header.component.spec.ts ===

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HeaderComponent } from './header.component';

describe('HeaderComponent', () => {
  let component: HeaderComponent;
  let fixture: ComponentFixture<HeaderComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [HeaderComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(HeaderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== frontend/src/app/layout/header/header.component.ts ===

// src/app/layout/header/header.component.ts
import { Component, OnInit, OnDestroy, signal, computed, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink } from '@angular/router';
import { ButtonModule } from 'primeng/button';
import { MenubarModule } from 'primeng/menubar';
import { MenuItem } from 'primeng/api';
import { AvatarModule } from 'primeng/avatar';
import { MenuModule } from 'primeng/menu';
import { BadgeModule } from 'primeng/badge';
import { OverlayBadgeModule } from 'primeng/overlaybadge';
import { RippleModule } from 'primeng/ripple';
import { DrawerModule } from 'primeng/drawer';
import { TooltipModule } from 'primeng/tooltip';
import { TranslateModule, TranslateService } from '@ngx-translate/core';

import { AuthService } from '../../services/auth.service';
import { CartService } from '../../services/cart.service';
import { TranslationService } from '../../services/translation.service';
import { LanguageSelectorComponent } from '../../components/language-selector/language-selector.component';
import { User } from '../../models/user.model';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [
    CommonModule, 
    RouterLink, 
    OverlayBadgeModule,
    BadgeModule,
    ButtonModule, 
    MenubarModule, 
    AvatarModule, 
    MenuModule,
    RippleModule,
    DrawerModule,
    TooltipModule,
    TranslateModule,
    LanguageSelectorComponent
  ],
  templateUrl: './header.component.html',
  styleUrl: './header.component.scss'
})
export class HeaderComponent implements OnInit, OnDestroy {
  // Dependency injection
  public authService = inject(AuthService);
  private cartService = inject(CartService);
  private translationService = inject(TranslationService);
  private translateService = inject(TranslateService);
  
  // UI state signals
  menuVisible = signal(false);
  isDarkMode = signal(false);
  
  // Data signals
  currentUser = signal<User | null>(null);
  items = signal<MenuItem[]>([]);
  mobileItems = signal<MenuItem[]>([]);
  userMenuItems = signal<MenuItem[]>([]);
  private cartItems = signal<any[]>([]);
  
  // Subscriptions
  private subscriptions: Subscription[] = [];
  
  // Style definitions
  avatarStyle = { 'background-color': '#ece9fc', color: '#2a1261' }
  
  // Computed signals
  isAdmin = computed(() => {
    const user = this.currentUser();
    const isLoggedIn = this.authService.isLoggedIn;
    const hasAdminRole = user?.role === 'admin' || user?.role === 'staff';
    
    return isLoggedIn && user && hasAdminRole;
  });
  
  displayName = computed(() => this.currentUser()?.full_name || 'User');
  userEmail = computed(() => this.currentUser()?.email || '');
  
  cartCount = computed(() => {
    return this.cartItems().length > 0 
      ? this.cartItems().length.toString() 
      : null;
  });
  
  themeIcon = computed(() => this.isDarkMode() ? 'pi pi-sun' : 'pi pi-moon');

  // RTL support
  isRTL = computed(() => this.translationService.isRTL());

  ngOnInit() {
    this.initializeTheme();
    this.subscribeToUserChanges();
    this.subscribeToLanguageChanges();
    this.loadInitialUserData();
    this.loadCartItems();
  }

  private initializeTheme(): void {
    this.isDarkMode.set(document.querySelector('html')?.classList.contains('my-app-dark') || false);
  }

  private subscribeToUserChanges(): void {
    this.subscriptions.push(
      this.authService.currentUser$.subscribe(user => {
        this.currentUser.set(user);
        this.buildMenus(); // Rebuild menus when user changes
      })
    );
  }

  private subscribeToLanguageChanges(): void {
    this.subscriptions.push(
      this.translationService.currentLanguage$.subscribe(() => {
        this.buildMenus(); // Rebuild menus when language changes
      })
    );
  }

  private loadInitialUserData(): void {
    if (this.authService.isLoggedIn) {
      this.authService.loadCurrentUser().subscribe({
        error: err => console.error('Error loading user in header:', err)
      });
    }
  }

  private loadCartItems(): void {
    this.cartService.getCartItems().subscribe();
    
    this.subscriptions.push(
      this.cartService.cartItems$.subscribe(items => {
        this.cartItems.set(items || []);
      })
    );
  }

  // UI Actions
  toggleDarkMode(): void {
    this.isDarkMode.update(isDark => !isDark);
    const element = document.querySelector('html');
    if (element) {
      element.classList.toggle('my-app-dark');
    }
  }

  toggleMobileMenu(): void {
    this.menuVisible.update(visible => !visible);
  }

  closeMenu(): void {
    this.menuVisible.set(false);
  }

  logout(): void {
    this.authService.logout();
    this.closeMenu();
  }

  // Helper method to execute menu item commands
  executeCommand(item: MenuItem, event: Event): void {
    if (item.command) {
      item.command({ originalEvent: event, item: item });
    }
  }

  // Menu Configuration with translations
  private buildMenus(): void {
    const baseItems: MenuItem[] = [
      {
        label: this.translateService.instant('common.home'),
        icon: 'pi pi-home',
        routerLink: '/'
      },
      {
        label: this.translateService.instant('common.products'),
        icon: 'pi pi-shopping-bag',
        routerLink: '/products'
      }
    ];

    const user = this.currentUser();
    const isAdminUser = this.authService.isLoggedIn && user && (user.role === 'admin' || user.role === 'staff');

    // Desktop menu with sub-menus
    const desktopItems: MenuItem[] = [...baseItems];
    if (isAdminUser) {
      desktopItems.push(this.getAdminMenuItem());
    }
    this.items.set(desktopItems);

    // Mobile menu - flattened with direct links
    const mobileItems: MenuItem[] = [...baseItems];
    
    // Add Orders for logged-in users
    if (this.authService.isLoggedIn) {
      mobileItems.push({
        label: this.translateService.instant('header.orders'),
        icon: 'pi pi-list',
        routerLink: '/orders'
      });
    }
    
    // Add Admin for admin users
    if (isAdminUser) {
      mobileItems.push({
        label: this.translateService.instant('header.admin'),
        icon: 'pi pi-cog',
        routerLink: '/admin'
      });
    }
    
    this.mobileItems.set(mobileItems);

    // User dropdown menu items
    this.userMenuItems.set(
      this.authService.isLoggedIn ? this.getUserMenuItems() : []
    );
  }

  // Add trackBy function for better change detection
  trackByLabel(index: number, item: MenuItem): string {
    return item.label || index.toString();
  }
  
  private getAdminMenuItem(): MenuItem {
    return {
      label: this.translateService.instant('header.admin'),
      icon: 'pi pi-cog',
      items: [
        {
          label: this.translateService.instant('common.home'), // Dashboard
          icon: 'pi pi-chart-bar',
          routerLink: '/admin'
        },
        {
          label: this.translateService.instant('header.orders'),
          icon: 'pi pi-list',
          routerLink: '/admin/orders'
        },
        {
          label: 'Users', // We'll add this translation later
          icon: 'pi pi-users',
          routerLink: '/admin/users'
        },
        {
          label: this.translateService.instant('common.products'),
          icon: 'pi pi-tag',
          routerLink: '/admin/products'
        },
        {
          label: 'Categories', // We'll add this translation later
          icon: 'pi pi-tags',
          routerLink: '/admin/categories'
        }
      ]
    };
  }
  
  private getUserMenuItems(): MenuItem[] {
    return [
      {
        label: this.translateService.instant('header.profile'),
        icon: 'pi pi-user',
        routerLink: '/profile'
      },
      {
        label: this.translateService.instant('header.orders'),
        icon: 'pi pi-list',
        routerLink: '/orders'
      },
      {
        label: this.translateService.instant('common.logout'),
        icon: 'pi pi-sign-out',
        command: () => this.logout()
      }
    ];
  }

  ngOnDestroy(): void {
    this.subscriptions.forEach(sub => sub.unsubscribe());
  }
}

=== frontend/src/app/shared/admin.guard.ts ===

// src/app/shared/admin.guard.ts
import { inject } from '@angular/core';
import { Router, CanActivateFn } from '@angular/router';
import { AuthService } from '../services/auth.service';
import { UserRole } from '../models/user.model';

export const adminGuard: CanActivateFn = (route, state) => {
  const router = inject(Router);
  const authService = inject(AuthService);
  
  if (!authService.isLoggedIn) {
    router.navigate(['/login'], { queryParams: { returnUrl: state.url } });
    return false;
  }
  
  const currentUser = authService.currentUserValue;
  
  if (currentUser && (currentUser.role === 'admin' || currentUser.role === 'staff')) {
    return true;
  }
  
  router.navigate(['/']);
  return false;
};

=== frontend/src/app/shared/auth.guard.ts ===

// src/app/shared/auth.guard.ts
import { inject } from '@angular/core';
import { CanActivateFn, Router } from '@angular/router';
import { AuthService } from '../services/auth.service';

export const authGuard: CanActivateFn = (route, state) => {
  const authService = inject(AuthService);
  const router = inject(Router);
  
  if (authService.isLoggedIn) {
    return true;
  }
  
  // Redirect to login page with return url
  router.navigate(['/login'], { queryParams: { returnUrl: state.url } });
  return false;
};

=== frontend/src/app/models/admin.model.ts ===

// src/app/models/admin.model.ts
export interface DashboardStats {
    total_users: number;
    total_products: number;
    total_categories: number;
    total_orders: number;
    total_revenue: number;
    pending_orders: number;
    low_stock_products: number;
    top_selling_products: TopSellingProduct[];
    recent_orders: RecentOrder[];
    sales_by_category: SalesByCategory[];
  }
  
  export interface TopSellingProduct {
    product_id: number;
    name: string;
    total_quantity: number;
    total_sales: number;
    category: string;
  }
  
  export interface RecentOrder {
    order_id: number;
    status: string;
    total_amount: number;
    created_at: string;
    customer_name: string;
  }
  
  export interface SalesByCategory {
    category_id: number;
    name: string;
    total_sales: number;
  }
  
  export interface SalesReport {
    period: string;
    data: SalesData[];
    total_sales: number;
  }
  
  export interface SalesData {
    date: string;
    sales: number;
  }
  
  export interface LowStockProduct {
    id: number;
    name: string;
    category: string;
    stock_quantity: number;
    price: number;
    unit: string;
  }
  
  export interface Order {
    id: number;
    user_id: number;
    status: string;
    shipping_address: string;
    contact_phone: string;
    total_amount: number;
    created_at: string;
    updated_at?: string;
    items?: OrderItem[];
    user?: {
      full_name: string;
      email: string;
    };
  }
  
  export interface OrderItem {
    id: number;
    product_id: number;
    product_name: string;
    unit_price: number;
    quantity: number;
    product_unit: string;
  }
  
  export interface UserManage {
    id: number;
    email: string;
    full_name: string;
    phone?: string;
    address?: string;
    role: string;
    is_active: boolean;
    created_at: string;
    updated_at?: string;
  }

=== frontend/src/app/models/order.model.ts ===

export interface OrderItem {
    id: number;
    product_id: number;
    product_name: string;
    unit_price: number;
    quantity: number;
    product_unit: string;
  }
export interface OrderCreateItem {
    product_id: number;
    quantity: number;
  }
  
  export interface OrderCreate {
    user_id: number;
    shipping_address: string;
    contact_phone: string;
    items: OrderCreateItem[];
  }
  
  export interface Order {
    id: number;
    user_id: number;
    status: 'pending' | 'confirmed' | 'shipped' | 'delivered' | 'cancelled';
    shipping_address: string;
    contact_phone: string;
    total_amount: number;
    created_at: string;
    updated_at?: string;
    items?: OrderItem[];
  }

=== frontend/src/app/models/product.model.ts ===

// src/app/models/product.model.ts
export interface Product {
    id: number;
    name: string;
    description?: string;
    price: number;
    unit: 'kg' | 'gram' | 'piece' | 'bunch' | 'dozen' | 'pound';
    stock_quantity: number;
    image_url?: string;
    is_organic: boolean;
    is_active: boolean;
    category_id: number;
    created_at: string;
    updated_at?: string;
    tempQuantity?: number;
  }
  
  export interface Category {
    id: number;
    name: string;
    description?: string;
    image_url?: string;
    is_active: boolean;
    created_at: string;
    updated_at?: string;
  }
  
  export interface ProductFilter {
    category_id?: number;
    is_organic?: boolean;
    active_only?: boolean;
    search?: string;
    min_price?: number;
    max_price?: number;
    sort_by?: 'name' | 'price' | 'created_at';
    sort_order?: 'asc' | 'desc';
  }

=== frontend/src/app/models/user.model.ts ===

// src/app/models/user.model.ts
export enum UserRole {
  CUSTOMER = 'customer',
  STAFF = 'staff',
  ADMIN = 'admin'
}

export interface User {
  id: number;
  email: string;
  full_name: string;
  phone?: string;
  address?: string;
  role: UserRole;
  is_active: boolean;
  created_at: string;
  updated_at?: string;
}

export interface LoginRequest {
  username: string;
  password: string;
}

export interface LoginResponse {
  access_token: string;
  token_type: string;
}

export interface RegisterRequest {
  email: string;
  password: string;
  full_name: string;
  phone?: string;
  address?: string;
  role?: UserRole;
}

=== frontend/src/app/components/language-selector/language-selector.component.ts ===

// src/app/components/language-selector/language-selector.component.ts
import { Component, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ButtonModule } from 'primeng/button';
import { DialogModule } from 'primeng/dialog';
import { TranslateModule, TranslateService } from '@ngx-translate/core';

import { TranslationService, Language } from '../../services/translation.service';

@Component({
  selector: 'app-language-selector',
  standalone: true,
  imports: [
    CommonModule,
    ButtonModule,
    DialogModule,
    TranslateModule
  ],
  template: `
    <div class="language-selector">
      <!-- Language trigger button -->
      <p-button 
        [label]="getCurrentLanguageDisplay()" 
        (onClick)="showLanguageDialog = true"
        severity="secondary"
        text
        size="small"
        styleClass="language-trigger"
      />
      
      <!-- Language selection dialog -->
      <p-dialog 
        [(visible)]="showLanguageDialog"
        [header]="'language.select' | translate"
        [modal]="true"
        [closable]="true"
        [draggable]="false"
        [resizable]="false"
        [blockScroll]="true"
        [dismissableMask]="true"
        [closeOnEscape]="true"
        styleClass="language-dialog"
        [style]="{width: '300px'}"
        appendTo="body"
      >
        <div class="language-options">
          <div 
            *ngFor="let language of languageOptions()" 
            class="language-option"
            [class.selected]="language.code === getCurrentLanguageCode()"
            (click)="selectLanguage(language.code)"
          >
            <span class="language-flag">{{ getLanguageFlag(language.code) }}</span>
            <span class="language-name">{{ getLanguageName(language.code) }}</span>
            <i *ngIf="language.code === getCurrentLanguageCode()" class="pi pi-check language-check"></i>
          </div>
        </div>
      </p-dialog>
    </div>
  `,
  styles: [`
    .language-selector {
      min-width: 120px;
    }

    .language-trigger {
      min-width: 120px;
    }

    :host ::ng-deep .language-dialog {
      z-index: 999999 !important;
    }

    :host ::ng-deep .language-dialog .p-dialog-mask {
      z-index: 999998 !important;
      background-color: rgba(0, 0, 0, 0.4) !important;
    }

    :host ::ng-deep .language-dialog .p-dialog-content {
      padding: 0;
    }

    .language-options {
      display: flex;
      flex-direction: column;
    }

    .language-option {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.75rem 1rem;
      cursor: pointer;
      transition: background-color 0.2s ease;
      border-bottom: 1px solid var(--surface-border);
    }

    .language-option:last-child {
      border-bottom: none;
    }

    .language-option:hover {
      background-color: var(--surface-hover);
    }

    .language-option.selected {
      background-color: var(--primary-50);
      color: var(--primary-color);
    }

    .language-flag {
      font-size: 1.2rem;
      min-width: 24px;
    }

    .language-name {
      flex: 1;
      font-weight: 500;
    }

    .language-check {
      color: var(--primary-color);
      font-weight: bold;
    }
  `]
})
export class LanguageSelectorComponent {
  private translationService = inject(TranslationService);
  private translateService = inject(TranslateService);

  // Signal for select options
  languageOptions = signal<{code: string, label: string}[]>([]);
  
  // Control dialog visibility
  showLanguageDialog = false;

  constructor() {
    this.buildLanguageOptions();
    
    // Rebuild options when language changes
    this.translationService.currentLanguage$.subscribe(() => {
      this.buildLanguageOptions();
    });
  }

  private buildLanguageOptions(): void {
    const options = this.translationService.availableLanguages.map((language: Language) => ({
      code: language.code,
      label: `${language.flag} ${language.name}`
    }));

    this.languageOptions.set(options);
  }

  selectLanguage(languageCode: string): void {
    this.translationService.setLanguage(languageCode);
    this.showLanguageDialog = false; // Close dialog after selection
  }

  getCurrentLanguageCode(): string {
    return this.translationService.getCurrentLanguage();
  }

  getCurrentLanguageDisplay(): string {
    const currentLang = this.translationService.getCurrentLanguageObject();
    return `${currentLang.flag} ${currentLang.name}`;
  }

  getLanguageFlag(code: string): string {
    const language = this.translationService.availableLanguages.find(lang => lang.code === code);
    return language?.flag || '';
  }

  getLanguageName(code: string): string {
    const language = this.translationService.availableLanguages.find(lang => lang.code === code);
    return language?.name || '';
  }
}

=== frontend/src/app/pages/home/home.component.scss ===



=== frontend/src/app/pages/home/home.component.spec.ts ===

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HomeComponent } from './home.component';

describe('HomeComponent', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [HomeComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(HomeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== frontend/src/app/pages/home/home.component.ts ===

// src/app/pages/home/home.component.ts
import { Component } from '@angular/core';
import { RouterLink } from '@angular/router';
import { ButtonModule } from 'primeng/button';
import { CardModule } from 'primeng/card';
import { TranslateModule } from '@ngx-translate/core';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [RouterLink, ButtonModule, CardModule, TranslateModule],
  templateUrl: './home.component.html',
  styleUrl: './home.component.scss'
})
export class HomeComponent {
  categories = [
    { 
      name: 'home.categories.fresh_fruits.name',
      description: 'home.categories.fresh_fruits.description',
      image: 'https://images.unsplash.com/photo-1619566636858-adf3ef46400b?auto=format&fit=crop&w=1470&q=80',
      link: '/products?category=1'
    },
    { 
      name: 'home.categories.fresh_vegetables.name',
      description: 'home.categories.fresh_vegetables.description',
      image: 'https://images.unsplash.com/photo-1518843875459-f738682238a6?auto=format&fit=crop&w=1442&q=80',
      link: '/products?category=2'
    },
    { 
      name: 'home.categories.organic_produce.name',
      description: 'home.categories.organic_produce.description',
      image: 'https://images.unsplash.com/photo-1576675466969-38eeae4b41f6?auto=format&fit=crop&w=1442&q=80',
      link: '/products?category=3'
    }
  ];
}

=== frontend/src/app/pages/products/product-detail/product-detail.component.scss ===



=== frontend/src/app/pages/products/product-detail/product-detail.component.spec.ts ===

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProductDetailComponent } from './product-detail.component';

describe('ProductDetailComponent', () => {
  let component: ProductDetailComponent;
  let fixture: ComponentFixture<ProductDetailComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ProductDetailComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ProductDetailComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== frontend/src/app/pages/products/product-detail/product-detail.component.ts ===

// src/app/pages/products/product-detail/product-detail.component.ts
import { Component, OnInit, inject, signal, computed } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterLink, ActivatedRoute, Router } from '@angular/router';
import { switchMap, catchError } from 'rxjs/operators';
import { of } from 'rxjs';

// PrimeNG imports
import { ButtonModule } from 'primeng/button';
import { CardModule } from 'primeng/card';
import { ToastModule } from 'primeng/toast';
import { MessageService } from 'primeng/api';
import { TagModule } from 'primeng/tag';
import { SelectModule } from 'primeng/select';
import { BadgeModule } from 'primeng/badge';
import { TranslateModule, TranslateService } from '@ngx-translate/core';

// Services and models
import { ProductService } from '../../../services/product.service';
import { CartService } from '../../../services/cart.service';
import { AuthService } from '../../../services/auth.service';
import { Product, Category } from '../../../models/product.model';

@Component({
  selector: 'app-product-detail',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    RouterLink,
    ButtonModule,
    CardModule,
    ToastModule,
    TagModule,
    SelectModule,
    BadgeModule,
    TranslateModule
  ],
  providers: [MessageService],
  templateUrl: './product-detail.component.html'
})
export class ProductDetailComponent implements OnInit {
  // Dependency injection
  private route = inject(ActivatedRoute);
  private router = inject(Router);
  private productService = inject(ProductService);
  private cartService = inject(CartService);
  private messageService = inject(MessageService);
  private translateService = inject(TranslateService);
  public authService = inject(AuthService);
  
  // Signals
  product = signal<Product | null>(null);
  category = signal<Category | null>(null);
  relatedProducts = signal<Product[]>([]);
  loading = signal<boolean>(true);
  error = signal<boolean>(false);
  selectedQuantity = signal<number>(5);
  
  // For related products quantities
  productQuantities: { [key: number]: number } = {};
  
  // Computed values
  isOutOfStock = computed(() => {
    return this.product()?.stock_quantity === 0;
  });
  
  isLowStock = computed(() => {
    const product = this.product();
    return product ? (product.stock_quantity > 0 && product.stock_quantity < 10) : false;
  });

  // Computed property for low stock translation parameters
  lowStockParams = computed(() => {
    const currentProduct = this.product();
    if (!currentProduct) return { count: 0 };
    
    return {
      count: currentProduct.stock_quantity
    };
  });

  // Computed property for unit display
  unitDisplay = computed(() => {
    const currentProduct = this.product();
    if (!currentProduct) return '';
    
    return this.getUnitDisplay(currentProduct.unit);
  });

  ngOnInit() {
    this.route.paramMap.pipe(
      switchMap(params => {
        const productId = params.get('id');
        if (!productId) {
          this.error.set(true);
          this.loading.set(false);
          return of(null);
        }
        
        return this.productService.getProduct(Number(productId)).pipe(
          catchError(error => {
            this.error.set(true);
            this.loading.set(false);
            this.messageService.add({
              severity: 'error',
              summary: this.translateService.instant('common.error'),
              detail: this.translateService.instant('products.errors.failed_to_load')
            });
            return of(null);
          })
        );
      })
    ).subscribe(product => {
      if (product) {
        this.product.set(product);
        
        // Load category
        this.productService.getCategory(product.category_id).subscribe(category => {
          this.category.set(category);
        });
        
        // Load related products (same category, excluding current product)
        this.productService.getProductsByCategory(product.category_id).subscribe(products => {
          const related = products.filter(p => p.id !== product.id).slice(0, 4);
          this.relatedProducts.set(related);
          
          // Initialize quantities for related products
          this.initializeRelatedProductQuantities(related);
        });
      }
      
      this.loading.set(false);
    });
  }
  
  // Initialize quantity inputs for related products
  private initializeRelatedProductQuantities(products: Product[]): void {
    products.forEach(product => {
      if (!this.productQuantities[product.id]) {
        // Set default quantity to 5 for each product
        this.productQuantities[product.id] = 5;
      }
    });
  }

  // Add to cart method for main product
  addToCart(): void {
    const currentProduct = this.product();
    if (!currentProduct || this.isOutOfStock()) return;
    
    const quantity = this.selectedQuantity();
    
    this.cartService.addToCart(currentProduct, quantity).subscribe({
      next: () => {
        this.messageService.add({
          severity: 'success',
          summary: this.translateService.instant('products.cart.added_to_cart'),
          detail: this.translateService.instant('products.cart.added_message', {
            quantity: quantity,
            unit: this.getUnitDisplay(currentProduct.unit),
            name: currentProduct.name
          }),
          life: 3000
        });
      },
      error: (error) => {
        console.error('Error adding to cart:', error);
        this.messageService.add({
          severity: 'error',
          summary: this.translateService.instant('common.error'),
          detail: this.translateService.instant('products.cart.error'),
          life: 3000
        });
      }
    });
  }
  
  // Quick add to cart for related products
  addRelatedToCart(product: Product, event: Event): void {
    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }
    
    if (product.stock_quantity === 0) {
      return;
    }
    
    const quantity = this.productQuantities[product.id] || 5;
    
    this.cartService.addToCart(product, quantity).subscribe({
      next: () => {
        this.messageService.add({
          severity: 'success',
          summary: this.translateService.instant('products.cart.added_to_cart'),
          detail: this.translateService.instant('products.cart.added_message', {
            quantity: quantity,
            unit: this.getUnitDisplay(product.unit),
            name: product.name
          }),
          life: 3000
        });
      },
      error: (error) => {
        console.error('Error adding to cart:', error);
        this.messageService.add({
          severity: 'error',
          summary: this.translateService.instant('common.error'),
          detail: this.translateService.instant('products.cart.error'),
          life: 3000
        });
      }
    });
  }
  
  // Generate quantity options with a consistent step size
  getQuantityOptions(maxQuantity: number): any[] {
    const product = this.product();
    if (!product) return [];
    
    const unitDisplay = this.getUnitDisplay(product.unit);
    const step = 5;
    const max = 1000;
    
    // Generate options with increments of 5
    const allOptions = Array.from({ length: Math.floor(max / step) + 1 }, (_, i) => {
      const value = i * step;
      return {
        label: `${value} ${unitDisplay}`,
        value
      };
    }).slice(1); // remove 0
    
    // Filter options to not exceed the max stock quantity
    return allOptions.filter(option => option.value <= maxQuantity);
  }
  
  // Get quantity options for related products
  getRelatedQuantityOptions(product: Product): any[] {
    const unitDisplay = this.getUnitDisplay(product.unit);
    const step = 5;
    const max = 1000;
    
    // Generate options with increments of 5
    const allOptions = Array.from({ length: Math.floor(max / step) + 1 }, (_, i) => {
      const value = i * step;
      return {
        label: `${value} ${unitDisplay}`,
        value
      };
    }).slice(1); // remove 0
    
    // Filter options to not exceed the max stock quantity
    return allOptions.filter(option => option.value <= product.stock_quantity);
  }
  
  // Get the display label for the selected quantity
  getSelectedQuantityLabel(productId: number): string {
    const quantity = this.productQuantities[productId];
    if (!quantity) return this.translateService.instant('products.product.select_quantity');
    
    const products = this.relatedProducts();
    const product = products.find(p => p.id === productId);
    if (!product) return `${quantity} units`;
    
    return `${quantity} ${this.getUnitDisplay(product.unit)}`;
  }

  // Helper function to get proper unit display
  getUnitDisplay(unit: string): string {
    switch (unit) {
      case 'kg': return 'Kg';
      case 'gram': return 'g';
      case 'piece': return 'Piece';
      case 'bunch': return 'Bunch';
      case 'dozen': return 'Dozen';
      case 'pound': return 'lb';
      default: return unit;
    }
  }
  
  // Check if a product is out of stock
  isProductOutOfStock(product: Product): boolean {
    return product.stock_quantity === 0;
  }
  
  // Check if a product is low on stock
  isProductLowStock(product: Product): boolean {
    return product.stock_quantity > 0 && product.stock_quantity < 10;
  }
  
  // Get stock message for a specific product
  getProductStockMessage(product: Product): string {
    return this.isProductOutOfStock(product) 
      ? this.translateService.instant('products.stock.out_of_stock')
      : this.translateService.instant('products.stock.low_stock', { count: product.stock_quantity });
  }
  
  // Get stock icon
  getStockIcon(product: Product): string {
    return this.isProductOutOfStock(product) 
      ? 'pi pi-exclamation-circle' 
      : 'pi pi-exclamation-triangle';
  }
  
  // Get stock color class
  getStockColorClass(product: Product): string {
    return this.isProductOutOfStock(product) ? 'text-red-500' : 'text-orange-500';
  }
}

=== frontend/src/app/pages/products/product-list/product-list.component.scss ===



  
/* Add this CSS to your component's stylesheet or global styles */

/* Desktop fixed sidebar - only applies on md screens and up */
@media (min-width: 768px) {
  .desktop-fixed-sidebar {
    position: fixed;
    top: 3.5rem;
    left: 0;
    width: 20%; /* Adjust based on your col-3 sizing */
    height: 100vh;
    z-index: 100;
    padding-top: 2rem; /* Match your pt-2 class */
    padding-left: 0.5rem;
    padding-right: 0.5rem;
    overflow-y: auto;
  }
  
  .products-column-with-fixed-sidebar {
    margin-left: 25%; /* Same as sidebar width */
    width: 75%;
  }
}

/* For lg screens and up, adjust the width */
@media (min-width: 1024px) {
  .desktop-fixed-sidebar {
    width: 20%; /* Adjust based on your col-3 sizing for large screens */
  }
  
  .products-column-with-fixed-sidebar {
    margin-left: 20%;
    width: 80%;
  }
}

.search-bar-sticky {
  position: -webkit-sticky !important;
  position: sticky !important;
  top: 0 !important;
  z-index: 9999 !important;
  background: white !important;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
}


=== frontend/src/app/pages/products/product-list/product-list.component.spec.ts ===

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProductListComponent } from './product-list.component';

describe('ProductListComponent', () => {
  let component: ProductListComponent;
  let fixture: ComponentFixture<ProductListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ProductListComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ProductListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== frontend/src/app/pages/products/product-list/product-list.component.ts ===

// src/app/pages/products/product-list/product-list.component.ts
import { Component, computed, effect, inject, OnInit, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterLink } from '@angular/router';
import { ActivatedRoute } from '@angular/router';
import { Observable, forkJoin, of } from 'rxjs';
import { switchMap, tap, map } from 'rxjs/operators';

// PrimeNG imports
import { ButtonModule } from 'primeng/button';
import { CardModule } from 'primeng/card';
import { InputTextModule } from 'primeng/inputtext';
import { ToastModule } from 'primeng/toast';
import { MessageService, MenuItem } from 'primeng/api';
import { SelectButtonModule } from 'primeng/selectbutton';
import { CheckboxModule } from 'primeng/checkbox';
import { AccordionModule } from 'primeng/accordion';
import { MenuModule } from 'primeng/menu';
import { SelectModule } from 'primeng/select';
import { BadgeModule } from 'primeng/badge';
import { TranslateModule, TranslateService } from '@ngx-translate/core';

// Services and models
import { CartService } from '../../../services/cart.service';
import { ProductService } from '../../../services/product.service';
import { Product, Category, ProductFilter } from '../../../models/product.model';

interface SortOption {
  label: string;
  value: string;
}

interface LayoutOption {
  icon: string;
  value: 'grid' | 'list';
}

@Component({
  selector: 'app-product-list',
  standalone: true,
  imports: [
    BadgeModule,
    CommonModule,
    FormsModule,
    AccordionModule,
    RouterLink,
    ButtonModule,
    CardModule,
    InputTextModule,
    ToastModule,
    SelectButtonModule,
    CheckboxModule,
    MenuModule,
    SelectModule,
    TranslateModule
  ],
  providers: [MessageService],
  templateUrl: './product-list.component.html',
  styleUrl: './product-list.component.scss'
})
export class ProductListComponent implements OnInit {
  // Services
  private productService = inject(ProductService);
  private route = inject(ActivatedRoute);
  private messageService = inject(MessageService);
  private cartService = inject(CartService);
  private translateService = inject(TranslateService);
  
  // Signals
  products = signal<Product[]>([]);
  categories = signal<Category[]>([]);
  selectedCategories = signal<Category[]>([]);
  loading = signal(true);
  showMobileFilters = signal(false);
  searchQuery = signal('');
  selectedSort = signal('name_asc');
  layout = signal<'grid' | 'list'>('grid');
  
  // For category checkbox state (binary)
  categorySelections: { [key: number]: boolean } = {};
  
  // For quantities (keeping as object for performance)
  productQuantities: { [key: number]: number } = {};
  
  // Filters signal with computed values for sort
  filters = signal<ProductFilter>({
    active_only: true,
    sort_by: 'name',
    sort_order: 'asc'
  });
  
  // Sort options - now using translations
  get sortOptions(): SortOption[] {
    return [
      { label: this.translateService.instant('products.sort.name_asc'), value: 'name_asc' },
      { label: this.translateService.instant('products.sort.name_desc'), value: 'name_desc' },
      { label: this.translateService.instant('products.sort.price_asc'), value: 'price_asc' },
      { label: this.translateService.instant('products.sort.price_desc'), value: 'price_desc' },
      { label: this.translateService.instant('products.sort.created_at_desc'), value: 'created_at_desc' }
    ];
  }
  
  // Computed sort menu items for mobile based on sort options
  sortMenuItems = computed(() => {
    return this.sortOptions.map(option => ({
      label: option.label,
      command: () => {
        this.selectedSort.set(option.value);
        this.onSortChange();
      }
    }));
  });
  
  // View options - modified for better mobile display
  viewOptions: LayoutOption[] = [
    { icon: 'pi pi-th-large', value: 'grid' },
    { icon: 'pi pi-list', value: 'list' }
  ];

  constructor() {
    // Setup effect to update filters when sort changes
    effect(() => {
      const sortValue = this.selectedSort();
      const [sortBy, sortOrder] = sortValue.split('_');
      this.filters.update(f => ({
        ...f,
        sort_by: sortBy as 'name' | 'price' | 'created_at',
        sort_order: sortOrder as 'asc' | 'desc'
      }));
    });

    // Effect to save layout preference in localStorage
    effect(() => {
      const currentLayout = this.layout();
      localStorage.setItem('product-list-layout', currentLayout);
    });
  }
  
  // Helper method to check if a category is selected
  isSelected(category: Category): boolean {
    return this.selectedCategories().includes(category);
  }
  
  // Handle category selection change with binary checkbox
  onCategorySelectionChange(category: Category): void {
    const isChecked = this.categorySelections[category.id];
    const currentSelected = this.selectedCategories();
    
    if (isChecked) {
      // Add to selection if not already there
      if (!this.isSelected(category)) {
        this.selectedCategories.set([...currentSelected, category]);
      }
    } else {
      // Remove from selection
      this.selectedCategories.set(
        currentSelected.filter(c => c.id !== category.id)
      );
    }
    
    this.onCategoryChange();
  }
  
  // Toggle mobile filters panel
  toggleMobileFilters(): void {
    this.showMobileFilters.update(show => !show);
  }
  
  // Select all categories
  selectAllCategories(): void {
    const allCategories = this.categories();
    this.selectedCategories.set([...allCategories]);
    
    // Update checkbox state
    allCategories.forEach(category => {
      this.categorySelections[category.id] = true;
    });
    
    this.onCategoryChange();
  }
  
  // Deselect all categories
  deselectAllCategories(): void {
    this.selectedCategories.set([]);
    
    // Update checkbox state
    this.categories().forEach(category => {
      this.categorySelections[category.id] = false;
    });
    
    this.onCategoryChange();
  }
  
  ngOnInit(): void {
    // Check if we have a stored layout preference
    const savedLayout = localStorage.getItem('product-list-layout');
    if (savedLayout === 'grid' || savedLayout === 'list') {
      this.layout.set(savedLayout);
    }
    
    this.productService.getCategories(true).subscribe({
      next: (categories) => {
        this.categories.set(categories);
        this.selectedCategories.set([...categories]);
        
        // Initialize category selection state
        categories.forEach(category => {
          this.categorySelections[category.id] = true;
        });
        
        this.route.queryParams.pipe(
          tap(params => {
            if (params['category']) {
              const categoryId = Number(params['category']);
              this.filters.update(f => ({ ...f, category_id: categoryId }));
              
              const selectedCategory = this.categories().find(c => c.id === categoryId);
              if (selectedCategory) {
                // Reset all selections to false
                categories.forEach(cat => {
                  this.categorySelections[cat.id] = false;
                });
                // Set only the selected category to true
                this.categorySelections[categoryId] = true;
                this.selectedCategories.set([selectedCategory]);
              }
            }
            
            if (params['search']) {
              this.searchQuery.set(params['search']);
              this.filters.update(f => ({ ...f, search: params['search'] }));
            }
            
            if (params['layout'] && (params['layout'] === 'grid' || params['layout'] === 'list')) {
              this.layout.set(params['layout']);
            }
            
            this.loading.set(true);
          }),
          switchMap(() => this.loadProducts())
        ).subscribe();
      },
      error: () => {
        this.messageService.add({
          severity: 'error',
          summary: this.translateService.instant('common.error'),
          detail: this.translateService.instant('products.filters.error')
        });
        this.loading.set(false);
      }
    });
  }

  loadProducts(): Observable<Product[]> {
    const selectedCats = this.selectedCategories();
    
    // If no categories selected, return empty array
    if (selectedCats.length === 0) {
      this.products.set([]);
      this.loading.set(false);
      return of([]);
    }
    
    // If only one category selected, use simple API call
    if (selectedCats.length === 1) {
      const currentFilters = { ...this.filters(), category_id: selectedCats[0].id };
      return this.productService.getProducts(currentFilters).pipe(
        tap(products => {
          this.products.set(products);
          this.initializeQuantities(products);
          this.loading.set(false);
        })
      );
    }
    
    // For multiple categories, make multiple calls and combine results
    this.loading.set(true);
    
    // Create an array of observables, one for each category
    const categoryObservables = selectedCats.map(category => {
      const categoryFilter = { ...this.filters(), category_id: category.id };
      return this.productService.getProducts(categoryFilter);
    });
    
    // Combine all the results
    return forkJoin(categoryObservables).pipe(
      map(results => {
        // Flatten the array of arrays and remove duplicates
        const allProducts: Product[] = [];
        const productIds = new Set<number>();
        
        results.forEach(categoryProducts => {
          categoryProducts.forEach(product => {
            if (!productIds.has(product.id)) {
              productIds.add(product.id);
              allProducts.push(product);
            }
          });
        });
        
        // Sort the combined results according to the current sort option
        this.sortProducts(allProducts);
        
        this.products.set(allProducts);
        this.initializeQuantities(allProducts);
        this.loading.set(false);
        return allProducts;
      })
    );
  }
  
  // Initialize quantity inputs for all products
  private initializeQuantities(products: Product[]): void {
    products.forEach(product => {
      if (!this.productQuantities[product.id]) {
        // Set default quantity to 5 for each product
        this.productQuantities[product.id] = 5;
      }
    });
  }
  
  // Helper method to sort products
  private sortProducts(products: Product[]): void {
    const [sortBy, sortOrder] = this.selectedSort().split('_');
    
    products.sort((a, b) => {
      let comparison = 0;
      
      switch (sortBy) {
        case 'name':
          comparison = a.name.localeCompare(b.name);
          break;
        case 'price':
          comparison = a.price - b.price;
          break;
        case 'created_at':
          comparison = new Date(a.created_at).getTime() - new Date(b.created_at).getTime();
          break;
      }
      
      return sortOrder === 'asc' ? comparison : -comparison;
    });
  }

  onSortChange(): void {
    this.loadProducts().subscribe();
  }

  onCategoryChange(): void {
    this.loadProducts().subscribe();
  }

  onSearch(): void {
    this.filters.update(f => ({ ...f, search: this.searchQuery() }));
    this.loadProducts().subscribe();
  }

  onLayoutChange(): void {
    // Store layout preference in localStorage
    localStorage.setItem('product-list-layout', this.layout());
  }
  
  // Toggle between grid and list view
  toggleLayout(): void {
    // Switch to opposite layout
    const newLayout = this.layout() === 'grid' ? 'list' : 'grid';
    this.layout.set(newLayout);
    this.onLayoutChange();
  }

  clearFilters(): void {
    this.filters.set({
      active_only: true,
      sort_by: 'name',
      sort_order: 'asc'
    });
    
    // Reset category selections
    const allCategories = this.categories();
    this.selectedCategories.set([...allCategories]);
    
    // Update checkbox state
    allCategories.forEach(category => {
      this.categorySelections[category.id] = true;
    });
    
    this.searchQuery.set('');
    this.selectedSort.set('name_asc');
    this.loadProducts().subscribe();
    this.showMobileFilters.set(false);
  }

  // Unit display helper
  getUnitDisplay(unit: string): string {
    switch (unit) {
      case 'kg':
        return 'Kg';
      case 'gram':
        return 'g';
      case 'piece':
        return 'Piece';
      case 'bunch':
        return 'Bunch';
      case 'dozen':
        return 'Dozen';
      case 'pound':
        return 'lb';
      default:
        return unit;
    }
  }

  // Method to add product to cart with specific quantity
  addToCartWithQuantity(product: Product, quantity: number, event?: Event): void {
    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }
    
    if (product.stock_quantity === 0 || quantity <= 0) {
      return;
    }
    
    // Check if quantity is greater than stock and cap it if needed
    const actualQuantity = Math.min(quantity, product.stock_quantity);
    
    this.cartService.addToCart(product, actualQuantity).subscribe({
      next: () => {
        // this.messageService.add({
        //   severity: 'success',
        //   summary: this.translateService.instant('products.cart.added_to_cart'),
        //   detail: this.translateService.instant('products.cart.added_message', {
        //     quantity: actualQuantity,
        //     unit: this.getUnitDisplay(product.unit),
        //     name: product.name
        //   }),
        //   life: 3000
        // });
      },
      error: (error) => {
        console.error('Error adding to cart:', error);
        this.messageService.add({
          severity: 'error',
          summary: this.translateService.instant('common.error'),
          detail: this.translateService.instant('products.cart.error'),
          life: 3000
        });
      }
    });
  }

  // Add from select dropdown
  addToCart(event: Event, product: Product): void {
    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }
    
    if (product.stock_quantity === 0) {
      return;
    }
    
    const quantity = this.productQuantities[product.id] || 5;
    this.addToCartWithQuantity(product, quantity, event);
  }
  
  // Generate quantity options with a consistent step size and dynamic unit
  private generateQuantityOptions(product: Product, step: number = 5, max: number = 1000): { label: string; value: number }[] {
    const unitDisplay = this.getUnitDisplay(product.unit);
    
    return Array.from({ length: Math.floor(max / step) + 1 }, (_, i) => {
      const value = i * step;
      return {
        label: `${value} ${unitDisplay}`,
        value
      };
    }).slice(1); // remove 0
  }
  
  // Get select options with increments of 5 and dynamic unit
  getQuantityOptions(maxQuantity: number, productId?: number): any[] {
    // Find the product by id or by stock quantity
    let product: Product | undefined;
    
    if (productId) {
      product = this.products().find(p => p.id === productId);
    } else if (maxQuantity) {
      product = this.products().find(p => p.stock_quantity === maxQuantity) || 
               this.products().find(p => p.stock_quantity >= maxQuantity);
    }
    
    // Default to first product if we still don't have one
    if (!product && this.products().length > 0) {
      product = this.products()[0];
    }
    
    // If we have no products yet, use a default unit
    const unitDisplay = product ? this.getUnitDisplay(product.unit) : 'units';
    
    // Generate options with increments of 5
    const allOptions = product ? 
      this.generateQuantityOptions(product, 5, 1000) : 
      Array.from({ length: Math.floor(1000 / 5) + 1 }, (_, i) => {
        const value = i * 5;
        return { label: `${value} ${unitDisplay}`, value };
      }).slice(1);
    
    // Filter options to not exceed the max stock quantity
    const maxStock = maxQuantity || 5; // Default to at least showing 5 if no stock
    const filteredOptions = allOptions.filter(option => option.value <= maxStock);
    
    // If no options were added (very low stock), add at least one option
    if (filteredOptions.length === 0) {
      filteredOptions.push({
        label: `${maxStock} ${unitDisplay}`,
        value: maxStock
      });
    }
    
    return filteredOptions;
  }
  
  // Get the display label for the selected quantity with dynamic unit
  getSelectedQuantityLabel(productId: number): string {
    const quantity = this.productQuantities[productId];
    if (!quantity) return this.translateService.instant('products.product.select_quantity');
    
    const product = this.products().find(p => p.id === productId);
    if (!product) return `${quantity} units`;
    
    return `${quantity} ${this.getUnitDisplay(product.unit)}`;
  }
  
  // Check if a product is out of stock
  isOutOfStock(product: Product): boolean {
    return product.stock_quantity === 0;
  }
  
  // Check if a product is low on stock
  isLowStock(product: Product): boolean {
    return product.stock_quantity > 0 && product.stock_quantity < 10;
  }
  
  // Get stock message
  getStockMessage(product: Product): string {
    return this.isOutOfStock(product) 
      ? this.translateService.instant('products.stock.out_of_stock')
      : this.translateService.instant('products.stock.low_stock', { count: product.stock_quantity });
  }
  
  // Get stock icon
  getStockIcon(product: Product): string {
    return this.isOutOfStock(product) 
      ? 'pi pi-exclamation-circle' 
      : 'pi pi-exclamation-triangle';
  }
  
  // Get stock color class
  getStockColorClass(product: Product): string {
    return this.isOutOfStock(product) ? 'text-red-500' : 'text-orange-500';
  }
}

=== frontend/src/app/pages/admin/admin-dashboard/admin-dashboard.component.scss ===



=== frontend/src/app/pages/admin/admin-dashboard/admin-dashboard.component.spec.ts ===

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AdminDashboardComponent } from './admin-dashboard.component';

describe('AdminDashboardComponent', () => {
  let component: AdminDashboardComponent;
  let fixture: ComponentFixture<AdminDashboardComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AdminDashboardComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(AdminDashboardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== frontend/src/app/pages/admin/admin-dashboard/admin-dashboard.component.ts ===

// src/app/pages/admin/admin-dashboard/admin-dashboard.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink, Router } from '@angular/router';

import { CardModule } from 'primeng/card';
import { ButtonModule } from 'primeng/button';
import { TableModule } from 'primeng/table';
import { ToastModule } from 'primeng/toast';
import { ChartModule } from 'primeng/chart';
import { MessageService } from 'primeng/api';
import { TagModule } from 'primeng/tag';
import { ProgressSpinnerModule } from 'primeng/progressspinner';

import { AdminService } from '../../../services/admin.service'; 
import { DashboardStats } from '../../../models/admin.model';

@Component({
  selector: 'app-admin-dashboard',
  standalone: true,
  imports: [
    CommonModule,
    RouterLink,
    CardModule,
    ButtonModule,
    TableModule,
    ToastModule,
    ChartModule,
    TagModule,
    ProgressSpinnerModule
  ],
  providers: [MessageService],
  templateUrl: './admin-dashboard.component.html',
  styleUrl: './admin-dashboard.component.scss'
})
export class AdminDashboardComponent implements OnInit {
  stats: DashboardStats | null = null;
  loading = true;
  salesChartData: any;
  salesChartOptions: any;
  categoryChartData: any;
  categoryChartOptions: any;

  constructor(
    private adminService: AdminService,
    private router: Router,
    private messageService: MessageService
  ) {}

  ngOnInit() {
    this.loadDashboardStats();
  }

  loadDashboardStats() {
    this.loading = true;
    this.adminService.getDashboardStats().subscribe({
      next: (stats) => {
        this.stats = stats;
        this.loading = false;
        this.prepareChartData();
      },
      error: (error) => {
        console.error('Error loading dashboard stats:', error);
        this.loading = false;
        
        let errorMessage = 'Failed to load dashboard statistics';
        if (error.status === 403) {
          errorMessage = 'You do not have permission to access this page';
          this.router.navigate(['/']);
        }
        
        this.messageService.add({
          severity: 'error',
          summary: 'Error',
          detail: errorMessage
        });
      }
    });
  }

  prepareChartData() {
    if (!this.stats) return;

    // Sales by category chart
    const categoryLabels = this.stats.sales_by_category.map(item => item.name);
    const categorySales = this.stats.sales_by_category.map(item => item.total_sales);
    
    this.categoryChartData = {
      labels: categoryLabels,
      datasets: [
        {
          label: 'Sales by Category',
          data: categorySales,
          backgroundColor: [
            '#42A5F5', '#66BB6A', '#FFA726', '#26C6DA', '#7E57C2', 
            '#EC407A', '#AB47BC', '#5C6BC0', '#29B6F6', '#26A69A'
          ],
          hoverBackgroundColor: [
            '#64B5F6', '#81C784', '#FFB74D', '#4DD0E1', '#9575CD', 
            '#F06292', '#BA68C8', '#7986CB', '#4FC3F7', '#4DB6AC'
          ]
        }
      ]
    };
    
    this.categoryChartOptions = {
      plugins: {
        legend: {
          position: 'right'
        }
      }
    };
  }

  getStatusSeverity(status: string): "success" | "secondary" | "info" | "warn" | "danger" | "contrast" {
    switch (status) {
      case 'pending': return 'warn';     // Changed from 'warning' to 'warn'
      case 'confirmed': return 'info';
      case 'shipped': return 'info';
      case 'delivered': return 'success';
      case 'cancelled': return 'danger';
      default: return 'secondary';
    }
  }

  formatDate(dateString: string): string {
    const date = new Date(dateString);
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
  }

  navigateToOrders() {
    this.router.navigate(['/admin/orders']);
  }

  navigateToUsers() {
    this.router.navigate(['/admin/users']);
  }

  navigateToProducts() {
    this.router.navigate(['/admin/products']);
  }
}

=== frontend/src/app/pages/admin/admin-users/admin-users.component.scss ===



=== frontend/src/app/pages/admin/admin-users/admin-users.component.spec.ts ===

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AdminUsersComponent } from './admin-users.component';

describe('AdminUsersComponent', () => {
  let component: AdminUsersComponent;
  let fixture: ComponentFixture<AdminUsersComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AdminUsersComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(AdminUsersComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== frontend/src/app/pages/admin/admin-users/admin-users.component.ts ===

// src/app/pages/admin/admin-users/admin-users.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { SelectModule } from 'primeng/select';

import { TableModule } from 'primeng/table';
import { ButtonModule } from 'primeng/button';
import { CardModule } from 'primeng/card';
import { InputTextModule } from 'primeng/inputtext';

import { ToastModule } from 'primeng/toast';
import { MessageService } from 'primeng/api';
import { TagModule } from 'primeng/tag';
import { PaginatorModule } from 'primeng/paginator';
import { DialogModule } from 'primeng/dialog';
import { ConfirmDialogModule } from 'primeng/confirmdialog';
import { ConfirmationService } from 'primeng/api';
import { CheckboxModule } from 'primeng/checkbox';
import { PasswordModule } from 'primeng/password';

import { AdminService } from '../../../services/admin.service';
import { UserManage } from '../../../models/admin.model';

@Component({
  selector: 'app-admin-users',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TableModule,
    ButtonModule,
    CardModule,
    InputTextModule,
    ToastModule,
    TagModule,
    PaginatorModule,
    DialogModule,
    ConfirmDialogModule,
    CheckboxModule,
    PasswordModule,
    SelectModule
  ],
  providers: [MessageService, ConfirmationService],
  templateUrl: './admin-users.component.html',
  styleUrl: './admin-users.component.scss'
})
export class AdminUsersComponent implements OnInit {
  users: UserManage[] = [];
  totalRecords = 0;
  loading = true;
  page = 1;
  pageSize = 10;
  
  selectedUser: UserManage | null = null;
  displayUserDialog = false;
  userForm: FormGroup;
  
  roleOptions = [
    { label: 'Customer', value: 'customer' },
    { label: 'Staff', value: 'staff' },
    { label: 'Admin', value: 'admin' }
  ];
  
  isEditing = false;
  
  constructor(
    private adminService: AdminService,
    private messageService: MessageService,
    private confirmationService: ConfirmationService,
    private fb: FormBuilder,
    private router: Router
  ) {
    this.userForm = this.fb.group({
      full_name: ['', [Validators.required, Validators.minLength(3)]],
      email: ['', [Validators.required, Validators.email]],
      phone: [''],
      address: [''],
      role: ['customer', Validators.required],
      is_active: [true],
      password: ['', [Validators.minLength(8)]]
    });
  }

  ngOnInit() {
    this.loadUsers();
  }

  loadUsers() {
    this.loading = true;
    this.adminService.getAllUsers(this.page, this.pageSize).subscribe({
      next: (response) => {
        this.users = response.users;
        this.totalRecords = response.total;
        this.loading = false;
      },
      error: (error) => {
        console.error('Error loading users:', error);
        this.loading = false;
        
        let errorMessage = 'Failed to load users';
        if (error.status === 403) {
          errorMessage = 'You do not have permission to access this page';
          this.router.navigate(['/']);
        }
        
        this.messageService.add({
          severity: 'error',
          summary: 'Error',
          detail: errorMessage
        });
      }
    });
  }

  onPageChange(event: any) {
    this.page = event.page + 1;
    this.pageSize = event.rows;
    this.loadUsers();
  }

  openUserDetails(user: UserManage) {
    this.selectedUser = user;
    this.isEditing = true;
    
    this.userForm.patchValue({
      full_name: user.full_name,
      email: user.email,
      phone: user.phone || '',
      address: user.address || '',
      role: user.role,
      is_active: user.is_active,
      password: ''  // Do not patch password for security
    });
    
    // Disable email field in edit mode
    this.userForm.get('email')?.disable();
    
    this.displayUserDialog = true;
  }

  createNewUser() {
    this.selectedUser = null;
    this.isEditing = false;
    
    this.userForm.reset({
      role: 'customer',
      is_active: true
    });
    
    // Enable email field in create mode
    this.userForm.get('email')?.enable();
    
    // Make password required for new users
    this.userForm.get('password')?.setValidators([Validators.required, Validators.minLength(8)]);
    this.userForm.get('password')?.updateValueAndValidity();
    
    this.displayUserDialog = true;
  }

  saveUser() {
    if (this.userForm.invalid) {
      this.userForm.markAllAsTouched();
      return;
    }
    
    const userData = this.userForm.value;
    
    // If password is empty and we're editing, remove it from the payload
    if (this.isEditing && !userData.password) {
      delete userData.password;
    }
    
    if (this.isEditing && this.selectedUser) {
      // Update existing user
      this.adminService.updateUser(this.selectedUser.id, userData).subscribe({
        next: (updatedUser) => {
          const index = this.users.findIndex(u => u.id === this.selectedUser?.id);
          if (index !== -1) {
            this.users[index] = updatedUser;
          }
          
          this.messageService.add({
            severity: 'success',
            summary: 'User Updated',
            detail: `User ${updatedUser.full_name} has been updated successfully`
          });
          
          this.displayUserDialog = false;
        },
        error: (error) => {
          console.error('Error updating user:', error);
          this.messageService.add({
            severity: 'error',
            summary: 'Update Failed',
            detail: error.error?.detail || 'Failed to update user'
          });
        }
      });
    } else {
      // Create new user (handled by registration endpoint)
      this.displayUserDialog = false;
      this.messageService.add({
        severity: 'info',
        summary: 'Not Implemented',
        detail: 'Creating users from admin panel is not implemented in this demo'
      });
      
      // In a real app, you'd call a service method to create the user
    }
  }

  confirmDeleteUser(user: UserManage) {
    this.confirmationService.confirm({
      message: `Are you sure you want to delete user ${user.full_name}?`,
      header: 'Confirm Deletion',
      icon: 'pi pi-exclamation-triangle',
      accept: () => {
        this.adminService.deleteUser(user.id).subscribe({
          next: () => {
            this.users = this.users.filter(u => u.id !== user.id);
            
            this.messageService.add({
              severity: 'success',
              summary: 'User Deleted',
              detail: `User ${user.full_name} has been deleted successfully`
            });
          },
          error: (error) => {
            console.error('Error deleting user:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Deletion Failed',
              detail: error.error?.detail || 'Failed to delete user'
            });
          }
        });
      }
    });
  }

  getRoleSeverity(role: string): string {
    switch (role) {
      case 'admin': return 'danger';
      case 'staff': return 'warning';
      case 'customer': return 'info';
      default: return 'secondary';
    }
  }

  formatDate(dateString: string): string {
    const date = new Date(dateString);
    return date.toLocaleDateString();
  }
}

=== frontend/src/app/pages/admin/admin-orders/admin-orders.component.scss ===



=== frontend/src/app/pages/admin/admin-orders/admin-orders.component.spec.ts ===

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AdminOrdersComponent } from './admin-orders.component';

describe('AdminOrdersComponent', () => {
  let component: AdminOrdersComponent;
  let fixture: ComponentFixture<AdminOrdersComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AdminOrdersComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(AdminOrdersComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== frontend/src/app/pages/admin/admin-orders/admin-orders.component.ts ===

// src/app/pages/admin/admin-orders/admin-orders.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterLink, Router } from '@angular/router';

import { TableModule } from 'primeng/table';
import { ButtonModule } from 'primeng/button';
import { CardModule } from 'primeng/card';

import { ToastModule } from 'primeng/toast';
import { MessageService } from 'primeng/api';
import { TagModule } from 'primeng/tag';
import { PaginatorModule } from 'primeng/paginator';
import { DialogModule } from 'primeng/dialog';
import { ConfirmDialogModule } from 'primeng/confirmdialog';
import { ConfirmationService } from 'primeng/api';
import { SelectModule } from 'primeng/select';
import { AdminService } from '../../../services/admin.service';
import { Order } from '../../../models/admin.model';

@Component({
  selector: 'app-admin-orders',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    SelectModule,
    // RouterLink,
    TableModule,
    ButtonModule,
    CardModule,
    ToastModule,
    TagModule,
    PaginatorModule,
    DialogModule,
    ConfirmDialogModule
  ],
  providers: [MessageService, ConfirmationService],
  templateUrl: './admin-orders.component.html',
  styleUrl: './admin-orders.component.scss'
})
export class AdminOrdersComponent implements OnInit {
  orders: Order[] = [];
  totalRecords = 0;
  loading = true;
  filterStatus = '';
  page = 1;
  pageSize = 10;
  
  statusOptions = [
    { label: 'All', value: '' },
    { label: 'Pending', value: 'pending' },
    { label: 'Confirmed', value: 'confirmed' },
    { label: 'Shipped', value: 'shipped' },
    { label: 'Delivered', value: 'delivered' },
    { label: 'Cancelled', value: 'cancelled' }
  ];
  
  selectedOrder: Order | null = null;
  displayOrderDialog = false;
  
  constructor(
    private adminService: AdminService,
    private messageService: MessageService,
    private confirmationService: ConfirmationService,
    private router: Router
  ) {}

  ngOnInit() {
    this.loadOrders();
  }

// Updated loadOrders method in component with better error handling
loadOrders() {
  this.loading = true;
  this.adminService.getAllOrders(this.filterStatus, this.page, this.pageSize).subscribe({
    next: (response) => {
      console.log('Orders response:', response);
      
      // Check if we received a valid response
      if (!response) {
        console.error('Response is null or undefined');
        this.orders = [];
        this.totalRecords = 0;
      } else {
        // Check if orders property exists
        if (response.orders) {
          this.orders = response.orders;
          console.log('Parsed orders:', this.orders);
        } else {
          console.error('Orders property missing in response:', response);
          this.orders = [];
        }
        
        // Check if total property exists
        if (response.total !== undefined) {
          this.totalRecords = response.total;
        } else {
          console.error('Total property missing in response');
          this.totalRecords = 0;
        }
      }
      
      this.loading = false;
    },
    error: (error) => {
      console.error('Error loading orders:', error);
      this.loading = false;
      
      let errorMessage = 'Failed to load orders';
      if (error.status === 403) {
        errorMessage = 'You do not have permission to access this page';
        this.router.navigate(['/']);
      } else if (error.status === 404) {
        errorMessage = 'Orders endpoint not found';
      } else if (error.status === 500) {
        errorMessage = 'Server error while loading orders';
      }
      
      this.messageService.add({
        severity: 'error',
        summary: 'Error',
        detail: errorMessage
      });
      
      this.orders = [];
      this.totalRecords = 0;
    }
  });
}

  onPageChange(event: any) {
    this.page = event.page + 1;
    this.pageSize = event.rows;
    this.loadOrders();
  }

  onStatusChange() {
    this.page = 1; // Reset to first page on filter change
    this.loadOrders();
  }

  openOrderDetails(order: Order) {
    this.selectedOrder = order;
    this.displayOrderDialog = true;
  }

  getStatusSeverity(status: string): "success" | "secondary" | "info" | "warn" | "danger" | "contrast" {
    switch (status) {
      case 'pending': return 'warn';     // Changed from 'warning' to 'warn'
      case 'confirmed': return 'info';
      case 'shipped': return 'info';
      case 'delivered': return 'success';
      case 'cancelled': return 'danger';
      default: return 'secondary';
    }
  }

  formatDate(dateString: string): string {
    const date = new Date(dateString);
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
  }

  updateOrderStatus(orderId: number, newStatus: string) {
    this.confirmationService.confirm({
      message: `Are you sure you want to update this order status to ${newStatus}?`,
      header: 'Confirm Status Update',
      icon: 'pi pi-exclamation-triangle',
      accept: () => {
        this.adminService.updateOrderStatus(orderId, newStatus).subscribe({
          next: (updatedOrder) => {
            // Update order in the list
            const index = this.orders.findIndex(o => o.id === orderId);
            if (index !== -1) {
              this.orders[index] = updatedOrder;
            }
            
            this.messageService.add({
              severity: 'success',
              summary: 'Status Updated',
              detail: `Order #${orderId} status changed to ${newStatus}`
            });
            
            // Close dialog if open
            if (this.selectedOrder && this.selectedOrder.id === orderId) {
              this.selectedOrder = updatedOrder;
            }
          },
          error: (error) => {
            console.error('Error updating order status:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Update Failed',
              detail: error.error?.detail || 'Failed to update order status'
            });
          }
        });
      }
    });
  }
}

=== frontend/src/app/pages/checkout/checkout.component.scss ===



=== frontend/src/app/pages/checkout/checkout.component.spec.ts ===

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CheckoutComponent } from '../checkout.component';

describe('CheckoutComponent', () => {
  let component: CheckoutComponent;
  let fixture: ComponentFixture<CheckoutComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [CheckoutComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(CheckoutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== frontend/src/app/pages/checkout/checkout.component.ts ===

// src/app/pages/checkout/checkout.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { AccordionModule } from 'primeng/accordion';
import { ProgressBarModule } from 'primeng/progressbar';
import { BadgeModule } from 'primeng/badge';
import { ButtonModule } from 'primeng/button';
import { CardModule } from 'primeng/card';
import { InputTextModule } from 'primeng/inputtext';
import { TextareaModule } from 'primeng/textarea';
import { ToastModule } from 'primeng/toast';
import { MessageService } from 'primeng/api';
import { DividerModule } from 'primeng/divider';
import { TableModule } from 'primeng/table';
import { TagModule } from 'primeng/tag';
import { TranslateModule, TranslateService } from '@ngx-translate/core';

import { AuthService } from '../../services/auth.service';
import { CartService, CartItem } from '../../services/cart.service';
import { OrderService } from '../../services/order.service';
import { OrderCreate } from '../../models/order.model';
import { User } from '../../models/user.model';

@Component({
  selector: 'app-checkout',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    RouterLink,
    ButtonModule,
    CardModule,
    InputTextModule,
    TextareaModule,
    ToastModule,
    DividerModule,
    TableModule,
    AccordionModule,
    ProgressBarModule,
    BadgeModule,
    TagModule,
    TranslateModule
  ],
  providers: [MessageService],
  templateUrl: './checkout.component.html',
  styleUrl: './checkout.component.scss'
})
export class CheckoutComponent implements OnInit {
  checkoutForm: FormGroup;
  cartItems: CartItem[] = [];
  currentUser: User | null = null;
  isSubmitting = false;
  accordionExpanded = false;

  toggleShippingAccordion() {
    this.accordionExpanded = !this.accordionExpanded;
  }

  getFormCompletionPercentage() {
    const controls = ['fullName', 'phone', 'address'];
    const completed = controls.filter(control => 
      this.checkoutForm.get(control)?.value?.trim()
    ).length;
    return Math.round((completed / controls.length) * 100);
  }

  constructor(
    private fb: FormBuilder,
    private router: Router,
    private authService: AuthService,
    private cartService: CartService,
    private orderService: OrderService,
    private messageService: MessageService,
    private translateService: TranslateService
  ) {
    this.checkoutForm = this.fb.group({
      fullName: ['', Validators.required],
      phone: ['', [Validators.required, Validators.pattern(/^\+?[0-9\s\-()]+$/)]],
      address: ['', [Validators.required, Validators.minLength(10)]]
    });
  }

  ngOnInit() {
    // Get current user
    this.currentUser = this.authService.currentUserValue;
    
    if (!this.currentUser) {
      this.messageService.add({
        severity: 'error',
        summary: this.translateService.instant('checkout.auth_required'),
        detail: this.translateService.instant('checkout.auth_required_message')
      });
      this.router.navigate(['/login'], { queryParams: { returnUrl: '/checkout' }});
      return;
    }
    
    // Get cart items
    this.cartService.getCartItems().subscribe(items => {
      this.cartItems = items;
      
      if (items.length === 0) {
        this.messageService.add({
          severity: 'info',
          summary: this.translateService.instant('checkout.empty_cart'),
          detail: this.translateService.instant('checkout.empty_cart_message')
        });
        this.router.navigate(['/products']);
        return;
      }
    });
    
    // Pre-fill form with user data
    if (this.currentUser) {
      this.checkoutForm.patchValue({
        fullName: this.currentUser.full_name,
        phone: this.currentUser.phone || '',
        address: this.currentUser.address || ''
      });
    }
  }
  
  // Convenience getter for easy access to form fields
  get f() { return this.checkoutForm.controls; }

  getCartTotal(): number {
    return this.cartItems.reduce((total, item) => 
      total + (item.product_price * item.quantity), 0);
  }

  getUnitDisplay(unit: string): string {
    switch (unit) {
      case 'kg': return 'Kg';
      case 'gram': return 'g';
      case 'piece': return 'Piece';
      case 'bunch': return 'Bunch';
      case 'dozen': return 'Dozen';
      case 'pound': return 'lb';
      default: return unit;
    }
  }

  placeOrder() {
    if (this.checkoutForm.invalid) {
      // Mark all fields as touched to trigger validation messages
      this.checkoutForm.markAllAsTouched();
      return;
    }
    
    if (!this.currentUser) {
      this.messageService.add({
        severity: 'error',
        summary: this.translateService.instant('checkout.auth_required'),
        detail: this.translateService.instant('checkout.auth_required_message')
      });
      return;
    }
    
    this.isSubmitting = true;
    
    // Create order data
    const orderData: OrderCreate = {
      user_id: this.currentUser.id,
      shipping_address: this.checkoutForm.value.address,
      contact_phone: this.checkoutForm.value.phone,
      items: this.orderService.cartItemsToOrderItems(this.cartItems)
    };
    
    // Submit order
    this.orderService.createOrder(orderData).subscribe({
      next: (order) => {
        this.messageService.add({
          severity: 'success',
          summary: this.translateService.instant('checkout.order_placed'),
          detail: this.translateService.instant('checkout.order_placed_message', { orderNumber: order.id })
        });
        
        // Clear cart after successful order
        this.cartService.clearCart().subscribe(() => {
          setTimeout(() => {
            this.router.navigate(['/orders', order.id], { 
              queryParams: { success: 'true' } 
            });
          }, 1500);
        });
      },
      error: (error) => {
        console.error('Error creating order:', error);
        this.isSubmitting = false;
        
        let errorMessage = this.translateService.instant('checkout.order_error_default');
        
        if (error.error && error.error.detail) {
          errorMessage = error.error.detail;
        }
        
        this.messageService.add({
          severity: 'error',
          summary: this.translateService.instant('checkout.order_error'),
          detail: errorMessage
        });
      }
    });
  }
}

=== frontend/src/app/pages/register/register.component.scss ===



=== frontend/src/app/pages/register/register.component.spec.ts ===

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RegisterComponent } from './register.component';

describe('RegisterComponent', () => {
  let component: RegisterComponent;
  let fixture: ComponentFixture<RegisterComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [RegisterComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(RegisterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== frontend/src/app/pages/register/register.component.ts ===

// src/app/pages/register/register.component.ts
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { ButtonModule } from 'primeng/button';
import { CardModule } from 'primeng/card';
import { InputTextModule } from 'primeng/inputtext';
import { PasswordModule } from 'primeng/password';
import { MessageModule } from 'primeng/message';
import { ToastModule } from 'primeng/toast';
import { MessageService } from 'primeng/api';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-register',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    ButtonModule,
    CardModule,
    InputTextModule,
    PasswordModule,
    MessageModule,
    ToastModule,
    RouterLink
  ],
  providers: [MessageService],
  templateUrl: './register.component.html',
  styleUrl: './register.component.scss'
})
export class RegisterComponent {
  registerForm: FormGroup;
  loading = false;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router,
    private messageService: MessageService
  ) {
    // Initialize form
    this.registerForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      full_name: ['', Validators.required],
      password: ['', [Validators.required, Validators.minLength(8)]],
      phone: [''],
      address: ['']
    });
  }

  // Convenience getter for easy access to form fields
  get f() { return this.registerForm.controls; }

  onSubmit() {
    // Stop here if form is invalid
    if (this.registerForm.invalid) {
      return;
    }

    

    this.loading = true;
    this.authService.register(this.registerForm.value)
      .subscribe({
        next: () => {
          this.messageService.add({
            severity: 'success',
            summary: 'Success',
            detail: 'Registration successful. You can now login.'
          });
          // Navigate to login page after successful registration
          setTimeout(() => {
            this.router.navigate(['/login']);
          }, 1500);
        },
        error: (error) => {
          this.messageService.add({
            severity: 'error',
            summary: 'Error',
            detail: error.error?.detail || 'Registration failed'
          });
          this.loading = false;
        }
      });
  }
}

=== frontend/src/app/pages/cart/cart.component.scss ===



=== frontend/src/app/pages/cart/cart.component.spec.ts ===

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CartComponent } from './cart.component';

describe('CartComponent', () => {
  let component: CartComponent;
  let fixture: ComponentFixture<CartComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [CartComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(CartComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== frontend/src/app/pages/cart/cart.component.ts ===

// src/app/pages/cart/cart.component.ts
import { Component, OnInit, inject, signal, computed, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterLink, Router } from '@angular/router';
import { ButtonModule } from 'primeng/button';
import { TableModule } from 'primeng/table';
import { ToastModule } from 'primeng/toast';
import { MessageService } from 'primeng/api';
import { TagModule } from 'primeng/tag';
import { DividerModule } from 'primeng/divider';
import { TooltipModule } from 'primeng/tooltip';
import { SelectModule } from 'primeng/select';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { Subscription } from 'rxjs';

import { CartService, CartItem } from '../../services/cart.service';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-cart-page',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    RouterLink,
    ButtonModule,
    TableModule,
    ToastModule,
    TagModule,
    DividerModule,
    TooltipModule,
    SelectModule,
    TranslateModule
  ],
  providers: [MessageService],
  templateUrl: './cart.component.html',
})
export class CartComponent implements OnInit, OnDestroy {
  // Dependency injection
  private cartService = inject(CartService);
  private authService = inject(AuthService);
  private messageService = inject(MessageService);
  private router = inject(Router);
  private translateService = inject(TranslateService);
  
  // Signals
  cartItems = signal<CartItem[]>([]);
  loading = signal(false);
  
  // For quantity selection
  productQuantities: { [key: string]: number } = {};
  
  // Computed values
  cartTotal = computed(() => {
    return this.cartItems().reduce((total, item) => 
      total + (item.product_price * item.quantity), 0);
  });
  
  cartItemCount = computed(() => this.cartItems().length);
  
  // Subscription management
  private cartSubscription?: Subscription;
  
  ngOnInit() {
    this.loadCart();
    
    // Subscribe to cart changes
    this.cartSubscription = this.cartService.cartItems$.subscribe(items => {
      this.cartItems.set(items);
      // Initialize quantities
      items.forEach(item => {
        this.productQuantities[item.id] = item.quantity;
      });
    });
  }
  
  ngOnDestroy() {
    if (this.cartSubscription) {
      this.cartSubscription.unsubscribe();
    }
  }
  
  loadCart() {
    this.loading.set(true);
    
    this.cartService.getCartItems().subscribe({
      next: (items) => {
        this.cartItems.set(items);
        // Initialize quantities
        items.forEach(item => {
          this.productQuantities[item.id] = item.quantity;
        });
        this.loading.set(false);
      },
      error: (error) => {
        console.error('Error loading cart:', error);
        this.messageService.add({
          severity: 'error',
          summary: this.translateService.instant('common.error'),
          detail: this.translateService.instant('cart.errors.failed_to_load')
        });
        this.loading.set(false);
      }
    });
  }
  
  increaseQuantity(item: CartItem) {
    const maxStock = item.stock_quantity || 99;
    if (item.quantity < maxStock) {
      this.updateItemQuantity(item, item.quantity + 1);
    }
  }
  
  decreaseQuantity(item: CartItem) {
    if (item.quantity > 1) {
      this.updateItemQuantity(item, item.quantity - 1);
    }
  }
  
  updateItemQuantity(item: CartItem, newQuantity: number) {
    this.cartService.updateCartItem(item.id, newQuantity).subscribe({
      next: () => {
        // Update the local quantity in productQuantities
        this.productQuantities[item.id] = newQuantity;
      },
      error: (error) => {
        console.error('Error updating quantity:', error);
        this.messageService.add({
          severity: 'error',
          summary: this.translateService.instant('common.error'),
          detail: this.translateService.instant('cart.errors.update_failed')
        });
        // Reset the select value to match the item's actual quantity
        this.productQuantities[item.id] = item.quantity;
      }
    });
  }
  
  removeItem(itemId: string) {
    this.cartService.removeCartItem(itemId).subscribe({
      next: () => {
        // this.messageService.add({
        //   severity: 'success',
        //   summary: this.translateService.instant('cart.item_removed'),
        //   detail: this.translateService.instant('cart.item_removed_message'),
        //   life: 3000
        // });
        // Clean up the quantities object
        delete this.productQuantities[itemId];
      },
      error: (error) => {
        console.error('Error removing item:', error);
        this.messageService.add({
          severity: 'error',
          summary: this.translateService.instant('common.error'),
          detail: this.translateService.instant('cart.errors.remove_failed')
        });
      }
    });
  }
  
  clearCart() {
    this.cartService.clearCart().subscribe({
      next: () => {
        this.messageService.add({
          severity: 'success',
          summary: this.translateService.instant('cart.cart_cleared'),
          detail: this.translateService.instant('cart.cart_cleared_message')
        });
        // Reset quantities
        this.productQuantities = {};
      },
      error: (error) => {
        console.error('Error clearing cart:', error);
        this.messageService.add({
          severity: 'error',
          summary: this.translateService.instant('common.error'),
          detail: this.translateService.instant('cart.errors.clear_failed')
        });
      }
    });
  }
  
  getUnitDisplay(unit: string): string {
    switch (unit) {
      case 'kg':
        return 'Kg';
      case 'gram':
        return 'g';
      case 'piece':
        return 'Piece';
      case 'bunch':
        return 'Bunch';
      case 'dozen':
        return 'Dozen';
      case 'pound':
        return 'lb';
      default:
        return unit;
    }
  }
  
  getQuantityOptions(maxQuantity: number | undefined, itemId?: string): any[] {
    // Find the item by id
    const item = this.cartItems().find(i => i.id === itemId);
    const unitDisplay = item ? this.getUnitDisplay(item.product_unit) : 'units';
    
    // Generate options with increments of 1 up to maxQuantity (or 99 if not specified)
    const maxStock = maxQuantity || 99;
    return Array.from({ length: Math.min(maxStock, 99) }, (_, i) => {
      const value = i + 1; // Start from 1
      return { 
        label: `${value} ${unitDisplay}`, 
        value 
      };
    });
  }
  
  getSelectedQuantityLabel(itemId: string): string {
    const quantity = this.productQuantities[itemId];
    if (!quantity) return this.translateService.instant('products.product.qty');
    
    const item = this.cartItems().find(i => i.id === itemId);
    if (!item) return `${quantity} units`;
    
    return `${quantity} ${this.getUnitDisplay(item.product_unit)}`;
  }
  
  isOutOfStock(item: CartItem): boolean {
    return item.stock_quantity !== undefined && item.stock_quantity <= 0;
  }
  
  proceedToCheckout() {
    if (this.cartItemCount() === 0) {
      this.messageService.add({
        severity: 'info',
        summary: this.translateService.instant('cart.empty'),
        detail: this.translateService.instant('cart.empty_checkout_message')
      });
      return;
    }
    
    if (this.authService.isLoggedIn) {
      // User is logged in, proceed to checkout
      this.router.navigate(['/checkout']);
    } else {
      // User is not logged in, redirect to login with returnUrl
      this.messageService.add({
        severity: 'info', 
        summary: this.translateService.instant('cart.login_required'), 
        detail: this.translateService.instant('cart.login_message')
      });
      
      // Save the return URL
      this.router.navigate(['/login'], { 
        queryParams: { returnUrl: '/checkout' } 
      });
    }
  }
}

=== frontend/src/app/pages/orders/orders.routes.ts ===

// src/app/pages/orders/orders.routes.ts
import { Routes } from '@angular/router';
import { OrderListComponent } from './order-list/order-list.component';
import { OrderDetailComponent } from './order-detail/order-detail.component'; 

export const ORDERS_ROUTES: Routes = [
  { path: '', component: OrderListComponent },
  { path: ':id', component: OrderDetailComponent }
];

=== frontend/src/app/pages/orders/order-list/order-list.component.scss ===



=== frontend/src/app/pages/orders/order-list/order-list.component.spec.ts ===

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { OrderListComponent } from './order-list.component';

describe('OrderListComponent', () => {
  let component: OrderListComponent;
  let fixture: ComponentFixture<OrderListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [OrderListComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(OrderListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== frontend/src/app/pages/orders/order-list/order-list.component.ts ===

// src/app/pages/orders/order-list/order-list.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink, Router } from '@angular/router';

import { ButtonModule } from 'primeng/button';
import { CardModule } from 'primeng/card';
import { TableModule } from 'primeng/table';
import { ToastModule } from 'primeng/toast';
import { MessageService } from 'primeng/api';
import { TagModule } from 'primeng/tag';
import { TranslateModule, TranslateService } from '@ngx-translate/core';

import { OrderService } from '../../../services/order.service';
import { Order } from '../../../models/order.model';

@Component({
  selector: 'app-order-list',
  standalone: true,
  imports: [
    CommonModule,
    RouterLink,
    ButtonModule,
    CardModule,
    TableModule,
    ToastModule,
    TagModule,
    TranslateModule
  ],
  providers: [MessageService],
  templateUrl: './order-list.component.html',
  styleUrl: './order-list.component.scss'
})
export class OrderListComponent implements OnInit {
  orders: Order[] = [];
  loading = true;

  constructor(
    private orderService: OrderService,
    private router: Router,
    private messageService: MessageService,
    private translateService: TranslateService
  ) {}

  ngOnInit() {
    this.loadOrders();
  }

  loadOrders() {
    this.loading = true;
    this.orderService.getUserOrders().subscribe({
      next: (orders) => {
        this.orders = orders;
        this.loading = false;
      },
      error: (error) => {
        console.error('Error loading orders:', error);
        this.loading = false;
        this.messageService.add({
          severity: 'error',
          summary: this.translateService.instant('common.error'),
          detail: this.translateService.instant('orders.errors.failed_to_load')
        });
      }
    });
  }

  viewOrderDetails(orderId: number) {
    this.router.navigate(['/orders', orderId]);
  }

  getStatusSeverity(status: string): "success" | "secondary" | "info" | "warn" | "danger" | "contrast" {
    switch (status) {
      case 'pending': return 'warn';
      case 'confirmed': return 'info';
      case 'shipped': return 'info';
      case 'delivered': return 'success';
      case 'cancelled': return 'danger';
      default: return 'secondary';
    }
  }

  getStatusLabel(status: string): string {
    return this.translateService.instant(`orders.status.${status}`);
  }
}

=== frontend/src/app/pages/orders/order-detail/order-detail.component.scss ===



=== frontend/src/app/pages/orders/order-detail/order-detail.component.spec.ts ===

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { OrderDetailComponent } from './order-detail.component';

describe('OrderDetailComponent', () => {
  let component: OrderDetailComponent;
  let fixture: ComponentFixture<OrderDetailComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [OrderDetailComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(OrderDetailComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== frontend/src/app/pages/orders/order-detail/order-detail.component.ts ===

// src/app/pages/orders/order-detail/order-detail.component.ts
import { Component, OnInit, computed, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink, ActivatedRoute, Router } from '@angular/router';
import { switchMap, catchError } from 'rxjs/operators';
import { of } from 'rxjs';

import { ButtonModule } from 'primeng/button';

import { TableModule } from 'primeng/table';
import { ToastModule } from 'primeng/toast';
import { MessageService } from 'primeng/api';
import { TagModule } from 'primeng/tag';
import { TimelineModule } from 'primeng/timeline';
import { DividerModule } from 'primeng/divider';

import { OrderService } from '../../../services/order.service'; 
import { Order } from '../../../models/order.model';
import { PanelModule } from 'primeng/panel';
import { CardModule } from 'primeng/card';




interface OrderStatus {
  status: string;
  date: string;
  icon: string;
  color: string;
}

@Component({
  selector: 'app-order-detail',
  standalone: true,
  imports: [
    CommonModule,
    RouterLink,
    PanelModule,
    ButtonModule,
    CardModule,
    TableModule,
    ToastModule,
    TagModule,
    TimelineModule,
    DividerModule
  ],
  providers: [MessageService],
  templateUrl: './order-detail.component.html'
})
export class OrderDetailComponent implements OnInit {
  // Dependency injection
  private route = inject(ActivatedRoute);
  private router = inject(Router);
  private orderService = inject(OrderService);
  private messageService = inject(MessageService);

  // Signals
  order = signal<Order | null>(null);
  loading = signal<boolean>(true);
  error = signal<boolean>(false);
  orderStatuses = signal<OrderStatus[]>([]);

  // Computed values
  totalAmount = computed(() => this.order()?.total_amount || 0);
  canCancelOrder = computed(() => this.order()?.status === 'pending');

  ngOnInit(): void {
    // Check for success parameter
    this.route.queryParams.subscribe(params => {
      if (params['success'] === 'true') {
        this.messageService.add({
          severity: 'success',
          summary: 'Order Placed',
          detail: 'Your order has been placed successfully!',
          life: 5000
        });
      }
    });
    
    // Load order details
    this.route.paramMap.pipe(
      switchMap(params => {
        const orderId = params.get('id');
        if (!orderId) {
          this.error.set(true);
          this.loading.set(false);
          return of(null);
        }
        
        return this.orderService.getOrderDetails(Number(orderId)).pipe(
          catchError(error => {
            this.error.set(true);
            this.loading.set(false);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: 'Failed to load order details'
            });
            return of(null);
          })
        );
      })
    ).subscribe(orderData => {
      this.order.set(orderData);
      this.loading.set(false);
      
      if (orderData) {
        this.generateOrderStatusTimeline(orderData);
      }
    });
  }

  generateOrderStatusTimeline(order: Order): void {
    // Create timeline based on order status
    const statuses: OrderStatus[] = [
      {
        status: 'Order Placed',
        date: order.created_at,
        icon: 'pi pi-shopping-cart',
        color: '#607D8B'
      }
    ];
    
    // Add statuses based on current order status
    switch (order.status) {
      case 'cancelled':
        statuses.push({
          status: 'Order Cancelled',
          date: order.updated_at || order.created_at,
          icon: 'pi pi-times',
          color: '#F44336'
        });
        break;
        
      case 'confirmed':
      case 'shipped':
      case 'delivered':
        statuses.push({
          status: 'Order Confirmed',
          date: order.updated_at || order.created_at,
          icon: 'pi pi-check-circle',
          color: '#4CAF50'
        });
        
        if (order.status === 'shipped' || order.status === 'delivered') {
          statuses.push({
            status: 'Order Shipped',
            date: order.updated_at || order.created_at,
            icon: 'pi pi-truck',
            color: '#3F51B5'
          });
          
          if (order.status === 'delivered') {
            statuses.push({
              status: 'Order Delivered',
              date: order.updated_at || order.created_at,
              icon: 'pi pi-check-square',
              color: '#2E7D32'
            });
          }
        }
        break;
    }
    
    this.orderStatuses.set(statuses);
  }

  getStatusSeverity(status: string): "success" | "secondary" | "info" | "warn" | "danger" | "contrast" {
    switch (status) {
      case 'pending': return 'warn';
      case 'confirmed': return 'info';
      case 'shipped': return 'info';
      case 'delivered': return 'success';
      case 'cancelled': return 'danger';
      default: return 'secondary';
    }
  }

  getStatusLabel(status: string): string {
    return status.charAt(0).toUpperCase() + status.slice(1);
  }

  getUnitDisplay(unit: string): string {
    switch (unit) {
      case 'kg': return 'Kg';
      case 'gram': return 'g';
      case 'piece': return 'Piece';
      case 'bunch': return 'Bunch';
      case 'dozen': return 'Dozen';
      case 'pound': return 'lb';
      default: return unit;
    }
  }

  cancelOrder(): void {
    const currentOrder = this.order();
    if (!currentOrder || currentOrder.status !== 'pending') {
      return;
    }
    
    this.orderService.cancelOrder(currentOrder.id).subscribe({
      next: (updatedOrder) => {
        this.order.set(updatedOrder);
        this.generateOrderStatusTimeline(updatedOrder);
        
        this.messageService.add({
          severity: 'success',
          summary: 'Order Cancelled',
          detail: 'Your order has been cancelled successfully'
        });
      },
      error: (error) => {
        console.error('Error cancelling order:', error);
        
        this.messageService.add({
          severity: 'error',
          summary: 'Error',
          detail: 'Failed to cancel order'
        });
      }
    });
  }

  backToOrders(): void {
    this.router.navigate(['/orders']);
  }
}

=== frontend/src/app/pages/login/login.component.scss ===



=== frontend/src/app/pages/login/login.component.spec.ts ===

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [LoginComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


=== frontend/src/app/pages/login/login.component.ts ===

// src/app/pages/login/login.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { Router, ActivatedRoute, RouterLink } from '@angular/router';
import { ButtonModule } from 'primeng/button';
import { CardModule } from 'primeng/card';
import { InputTextModule } from 'primeng/inputtext';
import { PasswordModule } from 'primeng/password';
import { MessageModule } from 'primeng/message';
import { ToastModule } from 'primeng/toast';
import { MessageService } from 'primeng/api';
import { CheckboxModule } from 'primeng/checkbox';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { finalize } from 'rxjs';

import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    ButtonModule,
    CardModule,
    InputTextModule,
    PasswordModule,
    MessageModule,
    ToastModule,
    RouterLink,
    CheckboxModule,
    TranslateModule
  ],
  providers: [MessageService],
  template: `
    <div class="flex align-items-center justify-content-center min-h-screen p-4">
      <p-card styleClass="w-full max-w-md">
        <ng-template pTemplate="header">
          <div class="text-center py-4">
            <h2 class="text-2xl font-bold mb-2">{{ 'auth.login_title' | translate }}</h2>
            <p class="text-color-secondary">{{ 'auth.login_subtitle' | translate }}</p>
          </div>
        </ng-template>
        
        <form [formGroup]="loginForm" (ngSubmit)="onSubmit()" class="p-4">
          <div class="field mb-4">
            <label for="username" class="block font-medium mb-2">
              {{ 'common.email' | translate }} *
            </label>
            <input 
              id="username"
              type="email" 
              pInputText 
              formControlName="username"
              [placeholder]="'auth.email_placeholder' | translate"
              [class.ng-invalid]="f['username'].invalid && f['username'].touched"
              class="w-full"
            />
            <small 
              *ngIf="f['username'].invalid && f['username'].touched" 
              class="p-error block mt-1"
            >
              <span *ngIf="f['username'].errors?.['required']">
                {{ 'auth.email_required' | translate }}
              </span>
              <span *ngIf="f['username'].errors?.['email']">
                {{ 'auth.email_invalid' | translate }}
              </span>
            </small>
          </div>

          <div class="field mb-4">
            <label for="password" class="block font-medium mb-2">
              {{ 'common.password' | translate }} *
            </label>
            <p-password
              id="password"
              formControlName="password"
              [placeholder]="'auth.password_placeholder' | translate"
              [feedback]="false"
              [toggleMask]="true"
              styleClass="w-full"
              inputStyleClass="w-full"
              [class.ng-invalid]="f['password'].invalid && f['password'].touched"
            />
            <small 
              *ngIf="f['password'].invalid && f['password'].touched" 
              class="p-error block mt-1"
            >
              {{ 'auth.password_required' | translate }}
            </small>
          </div>

          <div class="flex align-items-center justify-content-between mb-4">
            <div class="flex align-items-center">
              <p-checkbox 
                formControlName="rememberMe" 
                binary="true" 
                inputId="rememberMe"
              />
              <label for="rememberMe" class="ml-2">
                {{ 'auth.remember_me' | translate }}
              </label>
            </div>
            <a 
              href="#" 
              class="text-primary font-medium text-sm hover:text-primary-600"
              (click)="onForgotPassword($event)"
            >
              {{ 'auth.forgot_password' | translate }}
            </a>
          </div>

          <p-button 
            type="submit" 
            [label]="'auth.login' | translate"
            styleClass="w-full"
            [loading]="loading"
            [disabled]="loginForm.invalid"
          />
        </form>

        <ng-template pTemplate="footer">
          <div class="text-center pt-4 border-top-1 surface-border">
            <span class="text-color-secondary">{{ 'auth.no_account' | translate }}</span>
            <a routerLink="/register" class="text-primary font-medium ml-2 hover:text-primary-600">
              {{ 'auth.register_now' | translate }}
            </a>
          </div>
        </ng-template>
      </p-card>
      
      <p-toast />
    </div>
  `,
  styleUrl: './login.component.scss'
})
export class LoginComponent implements OnInit {
  loginForm: FormGroup;
  loading = false;
  returnUrl: string = '/';

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router,
    private route: ActivatedRoute,
    private messageService: MessageService,
    private translateService: TranslateService
  ) {
    // Initialize form
    this.loginForm = this.fb.group({
      username: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required],
      rememberMe: [false]
    });
  }

  ngOnInit() {
    // Get return url from route parameters or default to '/'
    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';
    
    // Check for session expired flag in localStorage
    const sessionExpired = localStorage.getItem('session_expired');
    if (sessionExpired === 'true') {
      // Clear the flag immediately
      localStorage.removeItem('session_expired');
      
      // Show the message
      setTimeout(() => {
        this.messageService.add({
          severity: 'info',
          summary: this.translateService.instant('auth.session_expired_title'),
          detail: this.translateService.instant('auth.session_expired_message'),
          life: 7000
        });
      }, 300);
    }
  }

  // Convenience getter for easy access to form fields
  get f() { return this.loginForm.controls; }

  onSubmit() {
    // Stop here if form is invalid
    if (this.loginForm.invalid) {
      // Mark all fields as touched to show validation errors
      Object.keys(this.loginForm.controls).forEach(key => {
        this.loginForm.get(key)?.markAsTouched();
      });
      return;
    }

    this.loading = true;
    this.authService.login(this.loginForm.value)
      .pipe(
        finalize(() => {
          // Always set loading to false when done (success or error)
          setTimeout(() => this.loading = false, 1000);
        })
      )
      .subscribe({
        next: (user) => {
          console.log('Login successful, user:', user);
          this.messageService.add({
            severity: 'success',
            summary: this.translateService.instant('common.success'),
            detail: this.translateService.instant('auth.login_success')
          });
          // Navigate to return url
          setTimeout(() => {
            this.router.navigate([this.returnUrl]);
          }, 1500);
        },
        error: (error) => {
          console.error('Login error:', error);
          this.messageService.add({
            severity: 'error',
            summary: this.translateService.instant('common.error'),
            detail: error.error?.detail || this.translateService.instant('auth.login_failed')
          });
        }
      });
  }

  onForgotPassword(event: Event) {
    event.preventDefault();
    this.messageService.add({
      severity: 'info',
      summary: this.translateService.instant('auth.forgot_password'),
      detail: this.translateService.instant('auth.forgot_password_message')
    });
  }
}

=== frontend/src/app/services/admin.service.ts ===

// src/app/services/admin.service.ts
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { ApiService } from './api.service';

import { map } from 'rxjs/operators';

import { 
  DashboardStats, 
  SalesReport, 
  LowStockProduct,
  Order,
  UserManage
} from '../models/admin.model';

@Injectable({
  providedIn: 'root'
})
export class AdminService {
  constructor(private apiService: ApiService) {}

  getDashboardStats(): Observable<DashboardStats> {
    return this.apiService.get<DashboardStats>('/admin/dashboard');
  }

  getSalesReport(period: 'daily' | 'weekly' | 'monthly' | 'yearly', startDate?: string, endDate?: string): Observable<SalesReport> {
    let params: any = { period };
    
    if (startDate) {
      params.start_date = startDate;
    }
    
    if (endDate) {
      params.end_date = endDate;
    }
    
    return this.apiService.get<SalesReport>('/admin/sales-report', { params });
  }

  getLowStockProducts(threshold: number = 10): Observable<LowStockProduct[]> {
    return this.apiService.get<LowStockProduct[]>('/admin/low-stock', { 
      params: { threshold }
    });
  }

  // Orders management
  getAllOrders(status?: string, page: number = 1, pageSize: number = 10): Observable<{ orders: Order[], total: number }> {
    let params: any = { skip: (page - 1) * pageSize, limit: pageSize };
    
    if (status) {
      params.status = status;
    }
    
    return this.apiService.get<Order[]>('/orders', { params }).pipe(
      map(response => {
        // The API returns an array of orders, but we need to transform it
        // to an object with orders and total properties
        return {
          orders: response,
          total: response.length // For now we'll use the array length as the total
        };
      })
    );
  }
  

  getOrderById(orderId: number): Observable<Order> {
    return this.apiService.get<Order>(`/orders/${orderId}`);
  }

  updateOrderStatus(orderId: number, status: string): Observable<Order> {
    return this.apiService.patch<Order>(`/orders/${orderId}`, { status });
  }

  // Users management
  getAllUsers(page: number = 1, pageSize: number = 10): Observable<{ users: UserManage[], total: number }> {
    return this.apiService.get<{ users: UserManage[], total: number }>('/users', { 
      params: { skip: (page - 1) * pageSize, limit: pageSize }
    });
  }

  getUserById(userId: number): Observable<UserManage> {
    return this.apiService.get<UserManage>(`/users/${userId}`);
  }

  updateUser(userId: number, userData: Partial<UserManage>): Observable<UserManage> {
    return this.apiService.patch<UserManage>(`/users/${userId}`, userData);
  }

  deleteUser(userId: number): Observable<void> {
    return this.apiService.delete<void>(`/users/${userId}`);
  }
}

=== frontend/src/app/services/api.service.ts ===

// src/app/services/api.service.ts - Fix token name inconsistency
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private baseUrl = environment.apiUrl;

  constructor(private http: HttpClient) {}

  // Helper method to get auth headers
  private getHeaders(): HttpHeaders {
    const token = localStorage.getItem('token'); // Changed from 'auth_token' to 'token'
    let headers = new HttpHeaders({
      'Content-Type': 'application/json'
    });
    
    if (token) {
      headers = headers.set('Authorization', `Bearer ${token}`);
    }
    
    return headers;
  }

  get<T>(endpoint: string, options = {}): Observable<T> {
    const url = `${this.baseUrl}${endpoint}`;
    const requestOptions = {
      headers: this.getHeaders(),
      ...options
    };
    return this.http.get<T>(url, requestOptions);
  }

  post<T>(endpoint: string, data: any, options = {}): Observable<T> {
    const url = `${this.baseUrl}${endpoint}`;
    const requestOptions = {
      headers: this.getHeaders(),
      ...options
    };
    return this.http.post<T>(url, data, requestOptions);
  }

  put<T>(endpoint: string, data: any, options = {}): Observable<T> {
    const url = `${this.baseUrl}${endpoint}`;
    const requestOptions = {
      headers: this.getHeaders(),
      ...options
    };
    return this.http.put<T>(url, data, requestOptions);
  }

  patch<T>(endpoint: string, data: any, options = {}): Observable<T> {
    const url = `${this.baseUrl}${endpoint}`;
    const requestOptions = {
      headers: this.getHeaders(),
      ...options
    };
    return this.http.patch<T>(url, data, requestOptions);
  }

  delete<T>(endpoint: string, options = {}): Observable<T> {
    const url = `${this.baseUrl}${endpoint}`;
    const requestOptions = {
      headers: this.getHeaders(),
      ...options
    };
    return this.http.delete<T>(url, requestOptions);
  }
}

=== frontend/src/app/services/auth.service.ts ===

// src/app/services/auth.service.ts - Fix login flow
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, tap, switchMap } from 'rxjs';
import { ApiService } from './api.service';
import { LoginRequest, LoginResponse, RegisterRequest, User } from '../models/user.model';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private currentUserSubject = new BehaviorSubject<User | null>(null);
  public currentUser$ = this.currentUserSubject.asObservable();
  
  // Add login state observable
  private isLoggedInSubject = new BehaviorSubject<boolean>(this.isLoggedIn);
  public isLoggedIn$ = this.isLoggedInSubject.asObservable();
  
  constructor(private apiService: ApiService) {
    this.loadStoredUser();
  }
  
  // Fixed login flow to properly update current user
  login(credentials: LoginRequest): Observable<User> {
    // Use URLSearchParams for OAuth2 password flow
    const body = new URLSearchParams();
    body.set('username', credentials.username);
    body.set('password', credentials.password);
    
    const options = {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      }
    };
    
    return this.apiService.post<LoginResponse>('/auth/login', body.toString(), options).pipe(
      tap(response => {
        localStorage.setItem('token', response.access_token);
        this.isLoggedInSubject.next(true); // Notify login state change
      }),
      // Chain the user loading after successful token acquisition
      switchMap(() => this.loadCurrentUser())
    );
  }
  
  register(userData: RegisterRequest): Observable<User> {
    return this.apiService.post<User>('/auth/register', userData);
  }
  
  logout(): void {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    this.currentUserSubject.next(null);
    this.isLoggedInSubject.next(false); // Notify logout state change
  }
  
  loadCurrentUser(): Observable<User> {
    return this.apiService.get<User>('/users/me').pipe(
      tap(user => {
        localStorage.setItem('user', JSON.stringify(user));
        this.currentUserSubject.next(user);
        this.isLoggedInSubject.next(true); // Ensure login state is true
      })
    );
  }
  
  private loadStoredUser(): void {
    const storedUser = localStorage.getItem('user');
    const token = localStorage.getItem('token');
    
    if (storedUser && token) {
      try {
        const user = JSON.parse(storedUser);
        this.currentUserSubject.next(user);
        this.isLoggedInSubject.next(true); // Set login state to true
      } catch (e) {
        console.error('Error parsing stored user:', e);
        this.logout(); // Clear invalid data
      }
    }
  }
  
  get isLoggedIn(): boolean {
    return !!localStorage.getItem('token');
  }
  
  get currentUserValue(): User | null {
    return this.currentUserSubject.value;
  }
}

=== frontend/src/app/services/cart.service.ts ===

// src/app/services/cart.service.ts
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, of } from 'rxjs';
import { Product } from '../models/product.model';

export interface CartItem {
  id: string;
  product_id: number;
  product_name: string;
  product_price: number;
  product_unit: string;
  product_image?: string;
  is_organic?: boolean;
  quantity: number;
  stock_quantity?: number;  // To check stock level at checkout
}

@Injectable({
  providedIn: 'root'
})
export class CartService {
  private STORAGE_KEY = 'fresh_produce_cart';
  private cartItemsSubject = new BehaviorSubject<CartItem[]>([]);
  public cartItems$ = this.cartItemsSubject.asObservable();
  
  constructor() {
    // Load cart from localStorage on service initialization
    this.loadCartFromStorage();
  }
  
  private loadCartFromStorage(): void {
    const savedCart = localStorage.getItem(this.STORAGE_KEY);
    if (savedCart) {
      try {
        const cartItems: CartItem[] = JSON.parse(savedCart);
        this.cartItemsSubject.next(cartItems);
      } catch (e) {
        console.error('Error parsing cart from localStorage:', e);
        this.cartItemsSubject.next([]);
      }
    }
  }
  
  private saveCartToStorage(cartItems: CartItem[]): void {
    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(cartItems));
    this.cartItemsSubject.next(cartItems);
  }
  
  getCartItems(): Observable<CartItem[]> {
    // Simply return the current cart from localStorage
    return of(this.cartItemsSubject.value);
  }
  
  addToCart(product: Product, quantity: number): Observable<CartItem> {
    const currentCart = [...this.cartItemsSubject.value];
    
    // Check if product already exists in cart
    const existingItemIndex = currentCart.findIndex(item => item.product_id === product.id);
    
    let updatedItem: CartItem;
    
    if (existingItemIndex !== -1) {
      // Update existing item quantity
      updatedItem = {
        ...currentCart[existingItemIndex],
        quantity: currentCart[existingItemIndex].quantity + quantity
      };
      currentCart[existingItemIndex] = updatedItem;
    } else {
      // Add new item
      updatedItem = {
        id: Date.now().toString(), // Generate a unique ID based on timestamp
        product_id: product.id,
        product_name: product.name,
        product_price: product.price,
        product_unit: product.unit,
        product_image: product.image_url,
        is_organic: product.is_organic,
        stock_quantity: product.stock_quantity,
        quantity: quantity
      };
      currentCart.push(updatedItem);
    }
    
    this.saveCartToStorage(currentCart);
    
    // Return the added/updated item
    return of(updatedItem);
  }
  
  updateCartItem(itemId: string, quantity: number): Observable<CartItem> {
    const currentCart = [...this.cartItemsSubject.value];
    const itemIndex = currentCart.findIndex(item => item.id === itemId);
    
    if (itemIndex === -1) {
      return of(null as any); // Item not found
    }
    
    currentCart[itemIndex] = {
      ...currentCart[itemIndex],
      quantity
    };
    
    this.saveCartToStorage(currentCart);
    return of(currentCart[itemIndex]);
  }
  
  removeCartItem(itemId: string): Observable<void> {
    const currentCart = this.cartItemsSubject.value;
    const updatedCart = currentCart.filter(item => item.id !== itemId);
    
    this.saveCartToStorage(updatedCart);
    return of(void 0);
  }
  
  clearCart(): Observable<void> {
    this.saveCartToStorage([]);
    return of(void 0);
  }
  
  get cartCount(): number {
    return this.cartItemsSubject.value.reduce((count, item) => count + item.quantity, 0);
  }
  
  get cartTotal(): number {
    return this.cartItemsSubject.value.reduce((total, item) => 
      total + (item.product_price * item.quantity), 0);
  }
}

=== frontend/src/app/services/order.service.ts ===

// src/app/services/order.service.ts
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { tap, map } from 'rxjs/operators';
import { ApiService } from './api.service';
import { CartItem } from './cart.service';
import { OrderCreate, OrderCreateItem, Order, OrderItem } from '../models/order.model';

@Injectable({
  providedIn: 'root'
})
export class OrderService {
  constructor(private apiService: ApiService) {}

  createOrder(orderData: OrderCreate): Observable<Order> {
    return this.apiService.post<Order>('/orders', orderData);
  }

  getUserOrders(): Observable<Order[]> {
    return this.apiService.get<Order[]>('/orders');
  }

  getOrderDetails(orderId: number): Observable<Order> {
    return this.apiService.get<Order>(`/orders/${orderId}`).pipe(
      tap(order => {
        // Log the response to help with debugging
        console.log('Order details received from API:', order);
        console.log('Order items received:', order.items);
      }),
      map(order => {
        // Ensure the items property exists
        if (!order.items) {
          console.warn('Items property is missing from order, creating empty array');
          order.items = [];
        }
        
        // If items is not an array, convert it to one
        if (order.items && !Array.isArray(order.items)) {
          console.warn('Items property is not an array, converting');
          order.items = Object.values(order.items);
        }
        
        return order;
      })
    );
  }

  cancelOrder(orderId: number): Observable<Order> {
    return this.apiService.patch<Order>(`/orders/${orderId}`, {
      status: 'cancelled'
    });
  }

  // Helper method to convert cart items to order items
  cartItemsToOrderItems(cartItems: CartItem[]): OrderCreateItem[] {
    return cartItems.map(item => ({
      product_id: item.product_id,
      quantity: item.quantity
    }));
  }
}

=== frontend/src/app/services/product.service.ts ===

// src/app/services/product.service.ts
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { ApiService } from './api.service';
import { Product, Category, ProductFilter } from '../models/product.model';

@Injectable({
  providedIn: 'root'
})
export class ProductService {
  constructor(private apiService: ApiService) {}

  getProducts(filters?: ProductFilter): Observable<Product[]> {
    // Convert filters to query params
    const params: any = {};
    if (filters) {
      Object.keys(filters).forEach(key => {
        if (filters[key as keyof ProductFilter] !== undefined) {
          params[key] = filters[key as keyof ProductFilter];
        }
      });
    }

    return this.apiService.get<Product[]>('/products', { params });
  }

  getProduct(id: number): Observable<Product> {
    return this.apiService.get<Product>(`/products/${id}`);
  }

  getCategories(activeOnly = false): Observable<Category[]> {
    return this.apiService.get<Category[]>('/categories', { 
      params: { active_only: activeOnly } 
    });
  }

  getCategory(id: number): Observable<Category> {
    return this.apiService.get<Category>(`/categories/${id}`);
  }

  getProductsByCategory(categoryId: number, activeOnly = true): Observable<Product[]> {
    return this.apiService.get<Product[]>(`/products/category/${categoryId}`, {
      params: { active_only: activeOnly }
    });
  }
}

=== frontend/src/app/services/translation.service.ts ===

// src/app/services/translation.service.ts
import { Injectable, signal, computed } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject } from 'rxjs';

export interface Language {
  code: string;
  name: string;
  flag: string;
  rtl: boolean;
}

@Injectable({
  providedIn: 'root'
})
export class TranslationService {
  // Available languages
  public readonly availableLanguages: Language[] = [
    { code: 'fr', name: 'Français', flag: '🇫🇷', rtl: false },
    { code: 'en', name: 'English', flag: '🇬🇧', rtl: false },
    { code: 'ar', name: 'الجزائرية', flag: '🇩🇿', rtl: true }
  ];

  // Default language
  private readonly defaultLanguage = 'fr';
  
  // Current language signals
  private currentLanguageSubject = new BehaviorSubject<string>(this.defaultLanguage);
  public currentLanguage$ = this.currentLanguageSubject.asObservable();
  
  // Signal for current language
  public currentLanguage = signal<string>(this.defaultLanguage);
  
  // Computed signal for current language object
  public currentLanguageObj = computed(() => {
    return this.availableLanguages.find(lang => lang.code === this.currentLanguage()) || this.availableLanguages[0];
  });
  
  // Computed signal for RTL direction
  public isRTL = computed(() => {
    return this.currentLanguageObj().rtl;
  });

  constructor(private translate: TranslateService) {
    this.initializeTranslation();
  }

  private initializeTranslation(): void {
    // Set available languages
    this.translate.addLangs(this.availableLanguages.map(lang => lang.code));
    
    // Set default language
    this.translate.setDefaultLang(this.defaultLanguage);
    
    // Get saved language from localStorage or use default
    const savedLanguage = this.getSavedLanguage();
    const languageToUse = this.isLanguageSupported(savedLanguage) ? savedLanguage : this.defaultLanguage;
    
    // Set initial language
    this.setLanguage(languageToUse);
  }

  private getSavedLanguage(): string {
    try {
      return localStorage.getItem('selected-language') || this.defaultLanguage;
    } catch (error) {
      console.warn('Could not access localStorage:', error);
      return this.defaultLanguage;
    }
  }

  private saveLanguage(language: string): void {
    try {
      localStorage.setItem('selected-language', language);
    } catch (error) {
      console.warn('Could not save language to localStorage:', error);
    }
  }

  private isLanguageSupported(language: string): boolean {
    return this.availableLanguages.some(lang => lang.code === language);
  }

  public setLanguage(language: string): void {
    if (!this.isLanguageSupported(language)) {
      console.warn(`Language '${language}' is not supported. Using default language '${this.defaultLanguage}'.`);
      language = this.defaultLanguage;
    }

    // Set the language in ngx-translate
    this.translate.use(language).subscribe({
      next: () => {
        // Update signals and subject
        this.currentLanguage.set(language);
        this.currentLanguageSubject.next(language);
        
        // Save to localStorage
        this.saveLanguage(language);
        
        // Update document direction and language attributes
        this.updateDocumentAttributes(language);
        
        console.log(`Language changed to: ${language}`);
      },
      error: (error) => {
        console.error(`Error loading language '${language}':`, error);
        // Fallback to default language
        if (language !== this.defaultLanguage) {
          this.setLanguage(this.defaultLanguage);
        }
      }
    });
  }

  private updateDocumentAttributes(language: string): void {
    const html = document.documentElement;
    const languageObj = this.availableLanguages.find(lang => lang.code === language);
    
    if (languageObj) {
      // Set language attribute
      html.setAttribute('lang', language);
      
      // Set direction attribute
      html.setAttribute('dir', languageObj.rtl ? 'rtl' : 'ltr');
      
      // Update body class for RTL styling
      if (languageObj.rtl) {
        document.body.classList.add('rtl');
        document.body.classList.remove('ltr');
      } else {
        document.body.classList.add('ltr');
        document.body.classList.remove('rtl');
      }
    }
  }

  public getTranslation(key: string, params?: any): string {
    return this.translate.instant(key, params);
  }

  public getTranslationAsync(key: string, params?: any) {
    return this.translate.get(key, params);
  }

  // Helper method to get current language code
  public getCurrentLanguage(): string {
    return this.currentLanguage();
  }

  // Helper method to get current language object
  public getCurrentLanguageObject(): Language {
    return this.currentLanguageObj();
  }

  // Method to cycle through languages (useful for quick switching)
  public switchToNextLanguage(): void {
    const currentIndex = this.availableLanguages.findIndex(lang => lang.code === this.currentLanguage());
    const nextIndex = (currentIndex + 1) % this.availableLanguages.length;
    this.setLanguage(this.availableLanguages[nextIndex].code);
  }
}

=== frontend/src/app/services/viewport.service.ts ===

// src/app/services/viewport.service.ts
import { Injectable, OnDestroy } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class ViewportService implements OnDestroy {
  private cleanupFunctions: (() => void)[] = [];
  private isInitialized = false;

  constructor() {
    this.initialize();
  }

  ngOnDestroy() {
    this.cleanup();
  }

  private initialize() {
    if (this.isInitialized || !('visualViewport' in window)) {
      return;
    }

    const viewport = window.visualViewport!;
    let lastScrollTime = 0;
    let scrollTimeout: any;

    // Track when user is manually scrolling
    const handleUserScroll = () => {
      lastScrollTime = Date.now();
    };

    // Listen for user scroll events
    window.addEventListener('scroll', handleUserScroll, { passive: true });
    window.addEventListener('touchmove', handleUserScroll, { passive: true });

    const handleViewportResize = () => {
      const activeElement = document.activeElement as HTMLElement;

      // Only proceed if there's an active input element
      if (!activeElement || !['INPUT', 'TEXTAREA'].includes(activeElement.tagName)) {
        return;
      }

      // Check if user has scrolled recently (within last 1 second)
      const timeSinceLastScroll = Date.now() - lastScrollTime;
      if (timeSinceLastScroll < 1000) {
        return; // Don't auto-scroll if user was recently scrolling
      }

      // Clear any existing timeout
      if (scrollTimeout) {
        clearTimeout(scrollTimeout);
      }

      // Only scroll when keyboard opens (viewport height decreases significantly)
      const viewportHeight = viewport.height;
      const windowHeight = window.innerHeight;

      if (viewportHeight < windowHeight * 0.75) { // Keyboard is likely open
        scrollTimeout = setTimeout(() => {
          // Double-check user hasn't started scrolling
          if (Date.now() - lastScrollTime > 500) {
            activeElement.scrollIntoView({ 
              behavior: 'smooth', 
              block: 'center' 
            });
          }
        }, 200);
      }
    };

    viewport.addEventListener('resize', handleViewportResize);

    // Store cleanup functions
    this.cleanupFunctions.push(() => {
      window.removeEventListener('scroll', handleUserScroll);
      window.removeEventListener('touchmove', handleUserScroll);
      viewport.removeEventListener('resize', handleViewportResize);
      if (scrollTimeout) {
        clearTimeout(scrollTimeout);
      }
    });

    this.isInitialized = true;
  }

  private cleanup() {
    this.cleanupFunctions.forEach(cleanup => cleanup());
    this.cleanupFunctions = [];
    this.isInitialized = false;
  }
}

=== frontend/src/environments/environment.prod.ts ===

export const environment = {
  production: true,
  apiUrl: '/api/v1'  
};

=== frontend/src/environments/environment.ts ===

// src/environments/environment.ts
export const environment = {
  // production: false,
  // apiUrl: 'https://Elsuq-5028o9mls-yazids-projects-3370118f.vercel.app/api/v1'
  //  apiUrl: '/api/v1'
  apiUrl: 'http://localhost:8000/api/v1', // Using port 8001 as specified in your docker-compose.yml
};

//   // src/environments/environment.prod.ts
//   export const environment = {
//     production: true,
//     apiUrl: 'http://your-production-api-url'  // Replace with actual production URL
//   };


=== frontend/src/assets/i18n/ar.json ===

{
  "common": {
    "welcome": "مرحباً",
    "home": "الرئيسية",
    "products": "المنتجات",
    "cart": "السلة",
    "login": "تسجيل الدخول",
    "register": "إنشاء حساب",
    "logout": "تسجيل الخروج",
    "search": "البحث",
    "loading": "جاري التحميل...",
    "error": "خطأ",
    "success": "نجح",
    "save": "حفظ",
    "cancel": "إلغاء",
    "delete": "حذف",
    "edit": "تحرير",
    "add": "إضافة",
    "view": "عرض",
    "price": "السعر",
    "quantity": "الكمية",
    "total": "المجموع",
    "name": "الاسم",
    "description": "الوصف",
    "category": "الفئة",
    "email": "البريد الإلكتروني",
    "password": "كلمة المرور",
    "phone": "الهاتف",
    "address": "العنوان",
    "menu": "القائمة",
    "back": "العودة",
    "continue": "المتابعة",
    "confirm": "تأكيد",
    "close": "إغلاق",
    "yes": "نعم",
    "no": "لا",
    "and": "و"
  },
  "header": {
    "fresh_produce": "المنتجات الطازجة",
    "dark_mode": "الوضع المظلم",
    "light_mode": "الوضع المضيء",
    "profile": "الملف الشخصي",
    "orders": "الطلبات",
    "admin": "الإدارة"
  },
  "home": {
    "hero": {
      "title": "منتجات طازجة تُسلم إلى باب منزلك",
      "subtitle": "تسوق أطزج الفواكه والخضروات بسهولة",
      "shop_now": "تسوق الآن"
    },
    "categories": {
      "title": "تسوق حسب الفئة",
      "fresh_fruits": {
        "name": "فواكه طازجة",
        "description": "فواكه طازجة وموسمية"
      },
      "fresh_vegetables": {
        "name": "خضروات طازجة",
        "description": "خضروات طازجة وموسمية"
      },
      "organic_produce": {
        "name": "منتجات عضوية",
        "description": "فواكه وخضروات عضوية معتمدة"
      },
      "explore": "استكشف"
    },
    "features": {
      "fast_delivery": {
        "title": "توصيل سريع",
        "description": "احصل على منتجاتك مُسلمة إلى عتبة منزلك خلال 24 ساعة"
      },
      "quality_guaranteed": {
        "title": "جودة مضمونة",
        "description": "نحن نتزود فقط من أطزج المنتجات من المزارعين المحليين"
      },
      "organic_options": {
        "title": "خيارات عضوية",
        "description": "اختر من مجموعة واسعة من الفواكه والخضروات العضوية"
      }
    }
  },
  "products": {
    "title": "منتجاتنا",
    "filters": {
      "title": "المرشحات",
      "category_filter": "مرشح الفئة",
      "quick_selection": "اختيار سريع",
      "all": "الكل",
      "none": "لا شيء",
      "categories_selected": "الفئات المحددة",
      "reset_filters": "إعادة تعيين المرشحات",
      "clear_filters": "مسح المرشحات",
      "error": "فشل في تحميل المرشحات"
    },
    "search": {
      "placeholder": "البحث عن المنتجات...",
      "placeholder_mobile": "البحث..."
    },
    "sort": {
      "title": "ترتيب حسب",
      "name_asc": "الاسم أ-ي",
      "name_desc": "الاسم ي-أ",
      "price_asc": "السعر من الأقل للأعلى",
      "price_desc": "السعر من الأعلى للأقل",
      "created_at_desc": "الأحدث أولاً"
    },
    "view": {
      "grid": "عرض الشبكة",
      "list": "عرض القائمة"
    },
    "product": {
      "organic": "عضوي",
      "select_quantity": "اختر الكمية",
      "qty": "كمية",
      "out_of_stock": "غير متوفر",
      "add_to_cart": "إضافة للسلة",
      "related_products": "منتجات ذات صلة",
      "product_details": "تفاصيل المنتج",
      "reviews": "التقييمات"
    },
      "stock": {
      "out_of_stock": "غير متوفر",
      "low_stock": "باقي {count} فقط في المخزون",
      "low_stock_title": "مخزون قليل",
      "in_stock": "متوفر في المخزون",
      "available": "متاح",
      "unavailable_message": "هذا العنصر غير متوفر حالياً"
    },
    "empty": {
      "title": "لم يتم العثور على منتجات",
      "subtitle": "حاول تغيير المرشحات أو معايير البحث."
    },
    "cart": {
      "add_to_cart": "إضافة للسلة",
      "added_to_cart": "تمت الإضافة للسلة",
      "added_message": "تمت إضافة {quantity} {unit} من {name} إلى سلتك",
      "error": "فشل في إضافة العنصر للسلة"
    }
  },
  "cart": {
    "title": "سلتي",
    "empty": "سلتك فارغة",
    "empty_message": "لم تقم بإضافة أي منتجات إلى سلتك بعد",
    "shop_now": "تسوق الآن",
    "item_count": "عنصر/عناصر",
    "items_with_count": "عناصر",
    "subtotal": "المجموع الفرعي",
    "checkout": "إتمام الطلب",
    "continue_shopping": "متابعة التسوق",
    "remove_item": "إزالة العنصر",
    "update_quantity": "تحديث الكمية",
    "clear_cart": "مسح السلة",
    "item_removed": "تم إزالة العنصر",
    "cart_cleared": "تم مسح السلة",
    "quantity_updated": "تم تحديث الكمية",
    "login_required": "تسجيل الدخول مطلوب",
    "login_message": "يرجى تسجيل الدخول أو إنشاء حساب للمتابعة",
    "order_summary": "ملخص الطلب",
    "shipping": "الشحن",
    "free": "مجاني",
    "empty_checkout_message": "يرجى إضافة منتجات إلى سلتك قبل إتمام الطلب",
    "item_removed_message": "تم إزالة العنصر من سلتك",
    "cart_cleared_message": "تم حذف جميع العناصر من سلتك",
    "table": {
      "product": "المنتج",
      "actions": "الإجراءات",
      "class": "text-right"
      
    }
  },
  "auth": {
    "login_title": "تسجيل الدخول",
    "login_subtitle": "أدخل بياناتك للوصول إلى حسابك",
    "register_title": "إنشاء حساب",
    "register_subtitle": "انضم إلينا وابدأ التسوق اليوم",
    "full_name": "الاسم الكامل",
    "full_name_placeholder": "أدخل اسمك الكامل",
    "full_name_required": "الاسم الكامل مطلوب",
    "full_name_minlength": "الاسم الكامل يجب أن يكون حرفين على الأقل",
    "email_placeholder": "أدخل بريدك الإلكتروني",
    "email_required": "البريد الإلكتروني مطلوب",
    "email_invalid": "البريد الإلكتروني غير صحيح",
    "password_placeholder": "أدخل كلمة المرور",
    "password_required": "كلمة المرور مطلوبة",
    "password_minlength": "كلمة المرور يجب أن تكون 8 أحرف على الأقل",
    "password_prompt": "أدخل كلمة مرور",
    "password_weak": "ضعيفة",
    "password_medium": "متوسطة",
    "password_strong": "قوية",
    "phone_placeholder": "أدخل رقم هاتفك",
    "phone_invalid": "رقم الهاتف غير صحيح",
    "address_placeholder": "أدخل عنوانك",
    "remember_me": "تذكرني",
    "forgot_password": "نسيت كلمة المرور؟",
    "forgot_password_message": "ستتم إضافة ميزة استعادة كلمة المرور قريباً",
    "no_account": "ليس لديك حساب؟",
    "register_now": "سجل الآن",
    "already_have_account": "لديك حساب بالفعل؟",
    "login_now": "سجل دخولك الآن",
    "login": "تسجيل الدخول",
    "register": "إنشاء حساب",
    "session_expired_title": "انتهت الجلسة",
    "session_expired_message": "انتهت صلاحية جلستك. يرجى تسجيل الدخول مرة أخرى للمتابعة",
    "login_success": "تم تسجيل الدخول بنجاح",
    "login_failed": "فشل تسجيل الدخول",
    "register_success": "تم إنشاء الحساب بنجاح. يمكنك الآن تسجيل الدخول",
    "register_failed": "فشل في إنشاء الحساب",
    "terms_agreement": "بإنشاء حساب، أنت توافق على",
    "terms_of_service": "شروط الخدمة",
    "privacy_policy": "سياسة الخصوصية"
  },
  "checkout": {
    "title": "إتمام الطلب",
    "subtitle": "راجع طلبك وأكمل عملية الشراء",
    "progress": {
      "title": "تقدم النموذج",
      "subtitle": "املأ جميع الحقول المطلوبة لإتمام طلبك"
    },
    "shipping_info": "معلومات الشحن",
    "order_summary": "ملخص الطلب",
    "full_name_placeholder": "أدخل اسمك الكامل",
    "full_name_required": "الاسم الكامل مطلوب",
    "phone_placeholder": "أدخل رقم هاتفك",
    "phone_required": "رقم الهاتف مطلوب",
    "phone_invalid": "رقم الهاتف غير صحيح",
    "shipping_address": "عنوان الشحن",
    "address_placeholder": "أدخل عنوانك الكامل للشحن",
    "address_required": "عنوان الشحن مطلوب",
    "address_minlength": "عنوان الشحن قصير جداً",
    "subtotal": "المجموع الفرعي",
    "delivery_fee": "رسوم التوصيل",
    "free": "مجاني",
    "shipping": "الشحن",
    "total": "المجموع الكلي",
    "place_order": "تأكيد الطلب",
    "secure_checkout": "دفع آمن ومحمي",
    "order_placed": "تم تأكيد طلبك بنجاح!",
    "order_placed_message": "تم تقديم طلبك رقم #{{orderNumber}} بنجاح!",
    "processing": "جاري معالجة طلبك...",
    "empty_cart": "سلتك فارغة",
    "empty_cart_message": "يرجى إضافة منتجات إلى سلتك قبل إتمام الطلب",
    "auth_required": "تسجيل الدخول مطلوب",
    "auth_required_message": "يجب تسجيل الدخول لإتمام عملية الشراء",
    "order_error": "خطأ في الطلب",
    "order_error_default": "فشل في تقديم الطلب. يرجى المحاولة مرة أخرى.",
    "view_shipping_details": "عرض تفاصيل الشحن",
    "hide_shipping_details": "إخفاء تفاصيل الشحن",
    "default_name": "أحمد محمد",
    "default_phone": "+966 50 123 4567",
    "default_address_line1": "شارع الملك فهد، حي العليا",
    "default_address_line2": "الرياض 12234",
    "default_address_line3": "المملكة العربية السعودية"
  },
  "orders": {
    "title": "طلباتي",
    "loading": "جاري تحميل طلباتك...",
    "empty": {
      "title": "لم يتم العثور على طلبات",
      "subtitle": "لم تقم بتقديم أي طلبات بعد.",
      "browse_products": "تصفح المنتجات"
    },
    "table": {
      "order_number": "طلب #",
      "date": "التاريخ",
      "status": "الحالة",
      "total": "المجموع",
      "actions": "الإجراءات",
      "view": "عرض",
      "pagination": "عرض {first} إلى {last} من {totalRecords} طلبات"
    },
    "status": {
      "pending": "قيد الانتظار",
      "confirmed": "مؤكد",
      "shipped": "مُرسل",
      "delivered": "مُسلم",
      "cancelled": "ملغي"
    },
    "detail": {
      "title": "تفاصيل الطلب",
      "order_info": "معلومات الطلب",
      "order_timeline": "مراحل الطلب",
      "order_items": "عناصر الطلب",
      "shipping_address": "عنوان الشحن",
      "contact_phone": "هاتف التواصل",
      "order_total": "إجمالي الطلب",
      "order_date": "تاريخ الطلب",
      "cancel_order": "إلغاء الطلب",
      "back_to_orders": "العودة للطلبات",
      "order_cancelled": "تم إلغاء طلبك بنجاح",
      "cancel_error": "فشل في إلغاء الطلب",
      "timeline": {
        "order_placed": "تم تقديم الطلب",
        "order_confirmed": "تم تأكيد الطلب",
        "order_shipped": "تم شحن الطلب",
        "order_delivered": "تم تسليم الطلب",
        "order_cancelled": "تم إلغاء الطلب"
      }
    },
    "errors": {
      "failed_to_load": "فشل في تحميل طلباتك",
      "order_not_found": "لم يتم العثور على الطلب"
    }
  },
  "admin": {
    "dashboard": {
      "title": "لوحة التحكم",
      "welcome": "مرحباً بك في لوحة تحكم الإدارة",
      "overview": "نظرة عامة"
    },
    "stats": {
      "total_users": "إجمالي المستخدمين",
      "total_products": "إجمالي المنتجات",
      "total_categories": "إجمالي الفئات",
      "total_orders": "إجمالي الطلبات",
      "total_revenue": "إجمالي الإيرادات",
      "pending_orders": "الطلبات المعلقة",
      "low_stock_products": "منتجات قليلة المخزون",
      "top_selling_products": "المنتجات الأكثر مبيعاً",
      "recent_orders": "الطلبات الحديثة",
      "sales_by_category": "المبيعات حسب الفئة"
    },
    "orders": {
      "title": "إدارة الطلبات",
      "all_orders": "جميع الطلبات",
      "filter_by_status": "تصفية حسب الحالة",
      "update_status": "تحديث الحالة",
      "order_details": "تفاصيل الطلب",
      "customer_info": "معلومات العميل"
    },
    "users": {
      "title": "إدارة المستخدمين",
      "all_users": "جميع المستخدمين",
      "user_details": "تفاصيل المستخدم",
      "edit_user": "تحرير المستخدم",
      "delete_user": "حذف المستخدم",
      "create_user": "إنشاء مستخدم جديد",
      "user_role": "دور المستخدم",
      "user_status": "حالة المستخدم",
      "active": "نشط",
      "inactive": "غير نشط",
      "roles": {
        "customer": "عميل",
        "staff": "موظف",
        "admin": "مدير"
      }
    },
    "products": {
      "title": "إدارة المنتجات",
      "all_products": "جميع المنتجات",
      "add_product": "إضافة منتج جديد",
      "edit_product": "تحرير المنتج",
      "delete_product": "حذف المنتج",
      "product_info": "معلومات المنتج",
      "stock_management": "إدارة المخزون"
    },
    "categories": {
      "title": "إدارة الفئات",
      "all_categories": "جميع الفئات",
      "add_category": "إضافة فئة جديدة",
      "edit_category": "تحرير الفئة",
      "delete_category": "حذف الفئة"
    },
    "navigation": {
      "dashboard": "الرئيسية",
      "orders": "الطلبات",
      "users": "المستخدمين",
      "products": "المنتجات",
      "categories": "الفئات",
      "reports": "التقارير",
      "settings": "الإعدادات"
    }
  },
  "footer": {
    "copyright": "© 2025 متجر المنتجات الطازجة. جميع الحقوق محفوظة.",
    "about": "حول الموقع",
    "contact": "اتصل بنا",
    "privacy": "سياسة الخصوصية",
    "terms": "شروط الاستخدام"
  },
  "language": {
    "select": "اختر اللغة",
    "french": "Français",
    "english": "English",
    "arabic": "العربية"
  },
  "errors": {
    "network_error": "خطأ في الشبكة",
    "server_error": "خطأ في الخادم",
    "not_found": "غير موجود",
    "unauthorized": "غير مصرح",
    "forbidden": "ممنوع",
    "validation_error": "خطأ في التحقق",
    "unknown_error": "خطأ غير معروف"
  },
  "actions": {
    "refresh": "تحديث",
    "retry": "إعادة المحاولة",
    "go_back": "العودة",
    "go_home": "الرئيسية",
    "contact_support": "اتصل بالدعم"
  }
}

=== frontend/src/assets/i18n/en.json ===

{
  "common": {
    "welcome": "Welcome",
    "home": "Home",
    "products": "Products",
    "cart": "Cart",
    "login": "Login",
    "register": "Register",
    "logout": "Logout",
    "search": "Search",
    "loading": "Loading...",
    "error": "Error",
    "success": "Success",
    "save": "Save",
    "cancel": "Cancel",
    "delete": "Delete",
    "edit": "Edit",
    "add": "Add",
    "view": "View",
    "price": "Price",
    "quantity": "Quantity",
    "total": "Total",
    "name": "Name",
    "description": "Description",
    "category": "Category",
    "email": "Email",
    "password": "Password",
    "phone": "Phone",
    "address": "Address",
    "menu": "Menu",
    "back": "Back",
    "continue": "Continue",
    "confirm": "Confirm",
    "close": "Close",
    "yes": "Yes",
    "no": "No",
    "and": "and"
  },
  "header": {
    "fresh_produce": "Fresh Produce",
    "dark_mode": "Dark mode",
    "light_mode": "Light mode",
    "profile": "Profile",
    "orders": "Orders",
    "admin": "Admin"
  },
  "home": {
    "hero": {
      "title": "Fresh Produce Delivered to Your Door",
      "subtitle": "Shop the freshest fruits and vegetables with ease",
      "shop_now": "Shop Now"
    },
    "categories": {
      "title": "Shop by Category",
      "fresh_fruits": {
        "name": "Fresh Fruits",
        "description": "Fresh and seasonal fruits"
      },
      "fresh_vegetables": {
        "name": "Fresh Vegetables", 
        "description": "Fresh and seasonal vegetables"
      },
      "organic_produce": {
        "name": "Organic Produce",
        "description": "Certified organic fruits and vegetables"
      },
      "explore": "Explore"
    },
    "features": {
      "fast_delivery": {
        "title": "Fast Delivery",
        "description": "Get your produce delivered to your doorstep within 24 hours"
      },
      "quality_guaranteed": {
        "title": "Quality Guaranteed",
        "description": "We source only the freshest produce from local farmers"
      },
      "organic_options": {
        "title": "Organic Options",
        "description": "Choose from a wide range of organic fruits and vegetables"
      }
    }
  },
  "products": {
    "title": "Our Products",
    "filters": {
      "title": "Filters",
      "category_filter": "Category Filter",
      "quick_selection": "Quick Selection",
      "all": "All",
      "none": "None",
      "categories_selected": "Categories Selected",
      "reset_filters": "Reset Filters",
      "clear_filters": "Clear Filters",
      "error": "Failed to load filters"
    },
    "search": {
      "placeholder": "Search products...",
      "placeholder_mobile": "Search..."
    },
    "sort": {
      "title": "Sort By",
      "name_asc": "Name A-Z",
      "name_desc": "Name Z-A", 
      "price_asc": "Price Low to High",
      "price_desc": "Price High to Low",
      "created_at_desc": "Newest First"
    },
    "view": {
      "grid": "Grid View",
      "list": "List View"
    },
    "product": {
      "organic": "Organic",
      "select_quantity": "Select quantity",
      "qty": "Qty",
      "out_of_stock": "Out of stock",
      "add_to_cart": "Add to cart",
      "related_products": "Related Products",
      "product_details": "Product Details",
      "reviews": "Reviews"
    },
    "stock": {
      "out_of_stock": "Out of stock",
      "low_stock": "Only {count} left in stock",
      "low_stock_title": "Low Stock",
      "in_stock": "In stock",
      "available": " available",
      "unavailable_message": "This item is currently unavailable"
    },
    "empty": {
      "title": "No products found",
      "subtitle": "Try changing your filters or search criteria."
    },
    "cart": {
      "add_to_cart": "Add to cart",
      "added_to_cart": "Added to Cart",
      "added_message": "{quantity} {unit} of {name} added to your cart",
      "error": "Failed to add item to cart"
    },
    "errors": {
      "failed_to_load": "Failed to load product"
    }
  },
  "cart": {
    "title": "My Cart",
    "empty": "Your cart is empty",
    "empty_message": "You haven't added any products to your cart yet",
    "shop_now": "Shop Now",
    "item_count": "item(s)",
    "items_with_count": "Items",
    "subtotal": "Subtotal",
    "checkout": "Checkout",
    "continue_shopping": "Continue Shopping",
    "remove_item": "Remove item",
    "update_quantity": "Update quantity",
    "clear_cart": "Clear cart",
    "item_removed": "Item removed",
    "cart_cleared": "Cart cleared",
    "quantity_updated": "Quantity updated",
    "login_required": "Login Required",
    "login_message": "Please login or register to continue with checkout",
    "order_summary": "Order Summary",
    "shipping": "Shipping",
    "free": "Free",
    "empty_checkout_message": "Please add some products to your cart before checkout",
    "item_removed_message": "Item has been removed from your cart",
    "cart_cleared_message": "All items have been removed from your cart",
    "table": {
      "product": "Product",
      "actions": "Actions"
    }
  },
  "auth": {
    "login_title": "Login",
    "login_subtitle": "Enter your credentials to access your account",
    "register_title": "Create Account",
    "register_subtitle": "Join us and start shopping today",
    "full_name": "Full name",
    "full_name_placeholder": "Enter your full name",
    "full_name_required": "Full name is required",
    "full_name_minlength": "Full name must be at least 2 characters",
    "email_placeholder": "Enter your email address",
    "email_required": "Email is required",
    "email_invalid": "Please enter a valid email address",
    "password_placeholder": "Enter your password",
    "password_required": "Password is required",
    "password_minlength": "Password must be at least 8 characters",
    "password_prompt": "Enter a password",
    "password_weak": "Weak",
    "password_medium": "Medium",
    "password_strong": "Strong",
    "phone_placeholder": "Enter your phone number",
    "phone_invalid": "Please enter a valid phone number",
    "address_placeholder": "Enter your address",
    "remember_me": "Remember me",
    "forgot_password": "Forgot password?",
    "forgot_password_message": "Password recovery feature will be added soon",
    "no_account": "No account?",
    "register_now": "Register now",
    "already_have_account": "Already have an account?",
    "login_now": "Login now",
    "login": "Login",
    "register": "Register",
    "session_expired_title": "Session Expired",
    "session_expired_message": "Your session has expired. Please login again to continue",
    "login_success": "Login successful",
    "login_failed": "Login failed",
    "register_success": "Registration successful. You can now login",
    "register_failed": "Registration failed",
    "terms_agreement": "By creating an account, you agree to our",
    "terms_of_service": "Terms of Service",
    "privacy_policy": "Privacy Policy"
  },
  "checkout": {
    "title": "Checkout",
    "subtitle": "Review your order and complete your purchase",
    "progress": {
      "title": "Form Progress",
      "subtitle": "Complete all required fields to place your order"
    },
    "shipping_info": "Shipping Information",
    "order_summary": "Order Summary",
    "full_name_placeholder": "Enter your full name",
    "full_name_required": "Full name is required",
    "phone_placeholder": "Enter your phone number",
    "phone_required": "Phone number is required",
    "phone_invalid": "Please enter a valid phone number",
    "shipping_address": "Shipping Address",
    "address_placeholder": "Enter your complete shipping address",
    "address_required": "Shipping address is required",
    "address_minlength": "Shipping address is too short",
    "subtotal": "Subtotal",
    "delivery_fee": "Delivery Fee",
    "free": "Free",
    "shipping": "Shipping",
    "total": "Total",
    "place_order": "Complete Order",
    "secure_checkout": "Secure & Protected Payment",
    "order_placed": "Order Placed Successfully!",
    "order_placed_message": "Your order #{{orderNumber}} has been placed successfully!",
    "processing": "Processing your order...",
    "empty_cart": "Your cart is empty",
    "empty_cart_message": "Please add some products to your cart before checkout",
    "auth_required": "Authentication Required",
    "auth_required_message": "You must be logged in to checkout",
    "order_error": "Order Error",
    "order_error_default": "Failed to place order. Please try again.",
    "view_shipping_details": "View Shipping Information",
    "hide_shipping_details": "Hide Shipping Details",
    "default_name": "John Doe",
    "default_phone": "+1 (555) 123-4567",
    "default_address_line1": "123 Main Street, Apt 4B",
    "default_address_line2": "New York, NY 10001",
    "default_address_line3": "United States"

  },
  "orders": {
    "title": "My Orders",
    "loading": "Loading your orders...",
    "empty": {
      "title": "No orders found",
      "subtitle": "You haven't placed any orders yet.",
      "browse_products": "Browse Products"
    },
    "table": {
      "order_number": "Order #",
      "date": "Date",
      "status": "Status",
      "total": "Total",
      "actions": "Actions",
      "view": "View",
      "pagination": "Showing {first} to {last} of {totalRecords} orders"
    },
    "status": {
      "pending": "Pending",
      "confirmed": "Confirmed",
      "shipped": "Shipped",
      "delivered": "Delivered",
      "cancelled": "Cancelled"
    },
    "detail": {
      "title": "Order Details",
      "order_info": "Order Information",
      "order_timeline": "Order Timeline",
      "order_items": "Order Items",
      "shipping_address": "Shipping Address",
      "contact_phone": "Contact Phone",
      "order_total": "Order Total",
      "order_date": "Order Date",
      "cancel_order": "Cancel Order",
      "back_to_orders": "Back to Orders",
      "order_cancelled": "Your order has been cancelled successfully",
      "cancel_error": "Failed to cancel order",
      "timeline": {
        "order_placed": "Order Placed",
        "order_confirmed": "Order Confirmed",
        "order_shipped": "Order Shipped",
        "order_delivered": "Order Delivered",
        "order_cancelled": "Order Cancelled"
      }
    },
    "errors": {
      "failed_to_load": "Failed to load your orders",
      "order_not_found": "Order not found"
    }
  },
  "admin": {
    "dashboard": {
      "title": "Admin Dashboard",
      "welcome": "Welcome to the Admin Dashboard",
      "overview": "Overview"
    },
    "stats": {
      "total_users": "Total Users",
      "total_products": "Total Products",
      "total_categories": "Total Categories",
      "total_orders": "Total Orders",
      "total_revenue": "Total Revenue",
      "pending_orders": "Pending Orders",
      "low_stock_products": "Low Stock Products",
      "top_selling_products": "Top Selling Products",
      "recent_orders": "Recent Orders",
      "sales_by_category": "Sales by Category"
    },
    "orders": {
      "title": "Order Management",
      "all_orders": "All Orders",
      "filter_by_status": "Filter by Status",
      "update_status": "Update Status",
      "order_details": "Order Details",
      "customer_info": "Customer Information"
    },
    "users": {
      "title": "User Management",
      "all_users": "All Users",
      "user_details": "User Details",
      "edit_user": "Edit User",
      "delete_user": "Delete User",
      "create_user": "Create New User",
      "user_role": "User Role",
      "user_status": "User Status",
      "active": "Active",
      "inactive": "Inactive",
      "roles": {
        "customer": "Customer",
        "staff": "Staff",
        "admin": "Admin"
      }
    },
    "products": {
      "title": "Product Management",
      "all_products": "All Products",
      "add_product": "Add New Product",
      "edit_product": "Edit Product",
      "delete_product": "Delete Product",
      "product_info": "Product Information",
      "stock_management": "Stock Management"
    },
    "categories": {
      "title": "Category Management",
      "all_categories": "All Categories",
      "add_category": "Add New Category",
      "edit_category": "Edit Category",
      "delete_category": "Delete Category"
    },
    "navigation": {
      "dashboard": "Dashboard",
      "orders": "Orders",
      "users": "Users",
      "products": "Products",
      "categories": "Categories",
      "reports": "Reports",
      "settings": "Settings"
    }
  },
  "footer": {
    "copyright": "© 2025 Fresh Produce E-commerce. All rights reserved.",
    "about": "About Us",
    "contact": "Contact",
    "privacy": "Privacy Policy",
    "terms": "Terms of Use"
  },
  "language": {
    "select": "Select language",
    "french": "Français",
    "english": "English",
    "arabic": "العربية"
  },
  "errors": {
    "network_error": "Network error",
    "server_error": "Server error",
    "not_found": "Not found",
    "unauthorized": "Unauthorized",
    "forbidden": "Forbidden",
    "validation_error": "Validation error",
    "unknown_error": "Unknown error"
  },
  "actions": {
    "refresh": "Refresh",
    "retry": "Retry",
    "go_back": "Go Back",
    "go_home": "Go Home",
    "contact_support": "Contact Support"
  }
}

=== frontend/src/assets/i18n/fr.json ===

{
  "common": {
    "welcome": "Bienvenue",
    "home": "Accueil",
    "products": "Produits",
    "cart": "Panier",
    "login": "Connexion",
    "register": "S'inscrire",
    "logout": "Déconnexion",
    "search": "Rechercher",
    "loading": "Chargement...",
    "error": "Erreur",
    "success": "Succès",
    "save": "Enregistrer",
    "cancel": "Annuler",
    "delete": "Supprimer",
    "edit": "Modifier",
    "add": "Ajouter",
    "view": "Voir",
    "price": "Prix",
    "quantity": "Quantité",
    "total": "Total",
    "name": "Nom",
    "description": "Description",
    "category": "Catégorie",
    "email": "Email",
    "password": "Mot de passe",
    "phone": "Téléphone",
    "address": "Adresse",
    "menu": "Menu",
    "back": "Retour",
    "continue": "Continuer",
    "confirm": "Confirmer",
    "close": "Fermer",
    "yes": "Oui",
    "no": "Non",
    "and": "et"
  },
  "header": {
    "fresh_produce": "Produits Frais",
    "dark_mode": "Mode sombre",
    "light_mode": "Mode clair",
    "profile": "Profil",
    "orders": "Commandes",
    "admin": "Administration"
  },
  "home": {
    "hero": {
      "title": "Produits Frais Livrés à Votre Porte",
      "subtitle": "Achetez les fruits et légumes les plus frais en toute simplicité",
      "shop_now": "Acheter Maintenant"
    },
    "categories": {
      "title": "Acheter par Catégorie",
      "fresh_fruits": {
        "name": "Fruits Frais",
        "description": "Fruits frais et de saison"
      },
      "fresh_vegetables": {
        "name": "Légumes Frais",
        "description": "Légumes frais et de saison"
      },
      "organic_produce": {
        "name": "Produits Bio",
        "description": "Fruits et légumes bio certifiés"
      },
      "explore": "Explorer"
    },
    "features": {
      "fast_delivery": {
        "title": "Livraison Rapide",
        "description": "Recevez vos produits livrés à votre porte sous 24 heures"
      },
      "quality_guaranteed": {
        "title": "Qualité Garantie",
        "description": "Nous nous approvisionnons uniquement auprès d'agriculteurs locaux"
      },
      "organic_options": {
        "title": "Options Bio",
        "description": "Choisissez parmi une large gamme de fruits et légumes bio"
      }
    }
  },
  "products": {
    "title": "Nos Produits",
    "filters": {
      "title": "Filtres",
      "category_filter": "Filtre par Catégorie",
      "quick_selection": "Sélection Rapide",
      "all": "Tout",
      "none": "Aucun",
      "categories_selected": "Catégories Sélectionnées",
      "reset_filters": "Réinitialiser les Filtres",
      "clear_filters": "Effacer les Filtres",
      "error": "Échec du chargement des filtres"
    },
    "search": {
      "placeholder": "Rechercher des produits...",
      "placeholder_mobile": "Rechercher..."
    },
    "sort": {
      "title": "Trier Par",
      "name_asc": "Nom A-Z",
      "name_desc": "Nom Z-A",
      "price_asc": "Prix Croissant",
      "price_desc": "Prix Décroissant",
      "created_at_desc": "Plus Récents"
    },
    "view": {
      "grid": "Vue Grille",
      "list": "Vue Liste"
    },
    "product": {
      "organic": "Bio",
      "select_quantity": "Sélectionner la quantité",
      "qty": "Qté",
      "out_of_stock": "Rupture de stock",
      "add_to_cart": "Ajouter au panier",
      "related_products": "Produits Similaires",
      "product_details": "Détails du Produit",
      "reviews": "Avis"
    },
    "stock": {
      "out_of_stock": "Rupture de stock",
      "low_stock": "Plus que {count} en stock",
      "low_stock_title": "Stock Faible",
      "in_stock": "En stock",
      "available": "disponible(s)",
      "unavailable_message": "Cet article n'est actuellement pas disponible"
    },
    "empty": {
      "title": "Aucun produit trouvé",
      "subtitle": "Essayez de modifier vos filtres ou critères de recherche."
    },
    "cart": {
      "add_to_cart": "Ajouter au panier",
      "added_to_cart": "Ajouté au Panier",
      "added_message": "{quantity} {unit} de {name} ajouté à votre panier",
      "error": "Échec de l'ajout au panier"
    }
  },
  "cart": {
    "title": "Mon Panier",
    "empty": "Votre panier est vide",
    "empty_message": "Vous n'avez pas encore ajouté de produits à votre panier",
    "shop_now": "Acheter Maintenant",
    "item_count": "article(s)",
    "items_with_count": "Articles ",
    "subtotal": "Sous-total",
    "checkout": "Passer la commande",
    "continue_shopping": "Continuer les Achats",
    "remove_item": "Retirer l'article",
    "update_quantity": "Mettre à jour la quantité",
    "clear_cart": "Vider le panier",
    "item_removed": "Article retiré",
    "cart_cleared": "Panier vidé",
    "quantity_updated": "Quantité mise à jour",
    "login_required": "Connexion Requise",
    "login_message": "Veuillez vous connecter ou vous inscrire pour continuer",
    "order_summary": "Résumé de Commande",
    "shipping": "Livraison",
    "free": "Gratuit",
    "empty_checkout_message": "Veuillez ajouter des produits à votre panier avant de passer commande",
    "item_removed_message": "L'article a été retiré de votre panier",
    "cart_cleared_message": "Tous les articles ont été supprimés de votre panier",
    "table": {
      "product": "Produit",
      "actions": "Actions"
    }
  },
  "auth": {
    "login_title": "Connexion",
    "login_subtitle": "Entrez vos identifiants pour accéder à votre compte",
    "register_title": "Créer un compte",
    "register_subtitle": "Rejoignez-nous et commencez vos achats aujourd'hui",
    "full_name": "Nom complet",
    "full_name_placeholder": "Entrez votre nom complet",
    "full_name_required": "Le nom complet est requis",
    "full_name_minlength": "Le nom complet doit contenir au moins 2 caractères",
    "email_placeholder": "Entrez votre adresse email",
    "email_required": "L'email est requis",
    "email_invalid": "Veuillez entrer une adresse email valide",
    "password_placeholder": "Entrez votre mot de passe",
    "password_required": "Le mot de passe est requis",
    "password_minlength": "Le mot de passe doit contenir au moins 8 caractères",
    "password_prompt": "Entrez un mot de passe",
    "password_weak": "Faible",
    "password_medium": "Moyen",
    "password_strong": "Fort",
    "phone_placeholder": "Entrez votre numéro de téléphone",
    "phone_invalid": "Veuillez entrer un numéro de téléphone valide",
    "address_placeholder": "Entrez votre adresse",
    "remember_me": "Se souvenir de moi",
    "forgot_password": "Mot de passe oublié ?",
    "forgot_password_message": "La fonctionnalité de récupération de mot de passe sera ajoutée bientôt",
    "no_account": "Pas de compte ?",
    "register_now": "S'inscrire maintenant",
    "already_have_account": "Déjà un compte ?",
    "login_now": "Se connecter maintenant",
    "login": "Connexion",
    "register": "S'inscrire",
    "session_expired_title": "Session Expirée",
    "session_expired_message": "Votre session a expiré. Veuillez vous reconnecter pour continuer",
    "login_success": "Connexion réussie",
    "login_failed": "Échec de la connexion",
    "register_success": "Inscription réussie. Vous pouvez maintenant vous connecter",
    "register_failed": "Échec de l'inscription",
    "terms_agreement": "En créant un compte, vous acceptez nos",
    "terms_of_service": "Conditions d'Utilisation",
    "privacy_policy": "Politique de Confidentialité"
  },
  "checkout": {
    "title": "Commande",
    "subtitle": "Vérifiez votre commande et finalisez votre achat",
    "progress": {
      "title": "Progression du Formulaire",
      "subtitle": "Remplissez tous les champs requis pour passer votre commande"
    },
    "shipping_info": "Informations de Livraison",
    "order_summary": "Résumé de Commande",
    "full_name_placeholder": "Entrez votre nom complet",
    "full_name_required": "Le nom complet est requis",
    "phone_placeholder": "Entrez votre numéro de téléphone",
    "phone_required": "Le numéro de téléphone est requis",
    "phone_invalid": "Veuillez entrer un numéro de téléphone valide",
    "shipping_address": "Adresse de Livraison",
    "address_placeholder": "Entrez votre adresse complète de livraison",
    "address_required": "L'adresse de livraison est requise",
    "address_minlength": "L'adresse de livraison est trop courte",
    "subtotal": "Sous-total",
    "delivery_fee": "Frais de Livraison",
    "free": "Gratuit",
    "shipping": "Livraison",
    "total": "Total",
    "place_order": "Finaliser la Commande",
    "secure_checkout": "Paiement Sécurisé et Protégé",
    "order_placed": "Commande Passée avec Succès!",
    "order_placed_message": "Votre commande #{{orderNumber}} a été passée avec succès!",
    "processing": "Traitement de votre commande...",
    "empty_cart": "Votre panier est vide",
    "empty_cart_message": "Veuillez ajouter des produits à votre panier avant de passer commande",
    "auth_required": "Authentification Requise",
    "auth_required_message": "Vous devez être connecté pour passer commande",
    "order_error": "Erreur de Commande",
    "order_error_default": "Échec de la commande. Veuillez réessayer.",
    "view_shipping_details": "Voir les Détails de Livraison",
    "hide_shipping_details": "Masquer les Détails de Livraison",
    "default_name": "Jean Dupont",
    "default_phone": "+33 1 23 45 67 89",
    "default_address_line1": "123 Rue de la Paix, Apt 4B",
    "default_address_line2": "75001 Paris",
    "default_address_line3": "France"
  },
  "orders": {
    "title": "Mes Commandes",
    "loading": "Chargement de vos commandes...",
    "empty": {
      "title": "Aucune commande trouvée",
      "subtitle": "Vous n'avez pas encore passé de commandes.",
      "browse_products": "Parcourir les Produits"
    },
    "table": {
      "order_number": "Commande #",
      "date": "Date",
      "status": "Statut",
      "total": "Total",
      "actions": "Actions",
      "view": "Voir",
      "pagination": "Affichage de {first} à {last} sur {totalRecords} commandes"
    },
    "status": {
      "pending": "En attente",
      "confirmed": "Confirmée",
      "shipped": "Expédiée",
      "delivered": "Livrée",
      "cancelled": "Annulée"
    },
    "detail": {
      "title": "Détails de la Commande",
      "order_info": "Informations de Commande",
      "order_timeline": "Chronologie de la Commande",
      "order_items": "Articles de la Commande",
      "shipping_address": "Adresse de Livraison",
      "contact_phone": "Téléphone de Contact",
      "order_total": "Total de la Commande",
      "order_date": "Date de Commande",
      "cancel_order": "Annuler la Commande",
      "back_to_orders": "Retour aux Commandes",
      "order_cancelled": "Votre commande a été annulée avec succès",
      "cancel_error": "Échec de l'annulation de la commande",
      "timeline": {
        "order_placed": "Commande Passée",
        "order_confirmed": "Commande Confirmée",
        "order_shipped": "Commande Expédiée",
        "order_delivered": "Commande Livrée",
        "order_cancelled": "Commande Annulée"
      }
    },
    "errors": {
      "failed_to_load": "Échec du chargement de vos commandes",
      "order_not_found": "Commande introuvable"
    }
  },
  "admin": {
    "dashboard": {
      "title": "Tableau de Bord Admin",
      "welcome": "Bienvenue dans le Tableau de Bord Admin",
      "overview": "Aperçu"
    },
    "stats": {
      "total_users": "Total Utilisateurs",
      "total_products": "Total Produits",
      "total_categories": "Total Catégories",
      "total_orders": "Total Commandes",
      "total_revenue": "Chiffre d'Affaires Total",
      "pending_orders": "Commandes en Attente",
      "low_stock_products": "Produits en Rupture",
      "top_selling_products": "Produits les Plus Vendus",
      "recent_orders": "Commandes Récentes",
      "sales_by_category": "Ventes par Catégorie"
    },
    "orders": {
      "title": "Gestion des Commandes",
      "all_orders": "Toutes les Commandes",
      "filter_by_status": "Filtrer par Statut",
      "update_status": "Mettre à Jour le Statut",
      "order_details": "Détails de la Commande",
      "customer_info": "Informations Client"
    },
    "users": {
      "title": "Gestion des Utilisateurs",
      "all_users": "Tous les Utilisateurs",
      "user_details": "Détails Utilisateur",
      "edit_user": "Modifier Utilisateur",
      "delete_user": "Supprimer Utilisateur",
      "create_user": "Créer Nouvel Utilisateur",
      "user_role": "Rôle Utilisateur",
      "user_status": "Statut Utilisateur",
      "active": "Actif",
      "inactive": "Inactif",
      "roles": {
        "customer": "Client",
        "staff": "Personnel",
        "admin": "Administrateur"
      }
    },
    "products": {
      "title": "Gestion des Produits",
      "all_products": "Tous les Produits",
      "add_product": "Ajouter Nouveau Produit",
      "edit_product": "Modifier Produit",
      "delete_product": "Supprimer Produit",
      "product_info": "Informations Produit",
      "stock_management": "Gestion du Stock"
    },
    "categories": {
      "title": "Gestion des Catégories",
      "all_categories": "Toutes les Catégories",
      "add_category": "Ajouter Nouvelle Catégorie",
      "edit_category": "Modifier Catégorie",
      "delete_category": "Supprimer Catégorie"
    },
    "navigation": {
      "dashboard": "Tableau de Bord",
      "orders": "Commandes",
      "users": "Utilisateurs",
      "products": "Produits",
      "categories": "Catégories",
      "reports": "Rapports",
      "settings": "Paramètres"
    }
  },
  "footer": {
    "copyright": "© 2025 E-commerce Produits Frais. Tous droits réservés.",
    "about": "À Propos",
    "contact": "Contact",
    "privacy": "Politique de Confidentialité",
    "terms": "Conditions d'Utilisation"
  },
  "language": {
    "select": "Choisir la langue",
    "french": "Français",
    "english": "English",
    "arabic": "العربية"
  },
  "errors": {
    "network_error": "Erreur réseau",
    "server_error": "Erreur serveur",
    "not_found": "Introuvable",
    "unauthorized": "Non autorisé",
    "forbidden": "Interdit",
    "validation_error": "Erreur de validation",
    "unknown_error": "Erreur inconnue"
  },
  "actions": {
    "refresh": "Actualiser",
    "retry": "Réessayer",
    "go_back": "Retour",
    "go_home": "Accueil",
    "contact_support": "Contacter le Support"
  }
}

=== backend/.env ===


# DATABASE_URL=postgresql://postgres:it is me@localhost:5432/Elsuq
DATABASE_URL=sqlite:///./Elsuq.db
SECRET_KEY=your-super-secret-key-change-this-in-production
ADMIN_EMAIL=admin@freshproduce.com
ADMIN_PASSWORD=admin123
ADMIN_NAME=Admin User
BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:8000","http://localhost:8080", "http://localhost:4200"]

=== backend/.gitignore ===

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
venv/
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg

# SQLite
*.db
*.sqlite3

# Logs
logs/
*.log

# Environment variables
.env
.env.*

# IDE
.idea/
.vscode/
*.swp
*.swo

# OS specific
.DS_Store
Thumbs.db
.vercel


=== backend/Dockerfile ===

FROM python:3.11-slim

WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Expose port
EXPOSE 8000

# Run the application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

=== backend/docker-compose.yml ===

services:
  api:
    build: .
    ports:
      - "8001:8000"  # Changed to 8001 in case 8000 is in use
    volumes:
      - ./app:/app/app
      - ./main.py:/app/main.py
      - ./data:/app/data  # Mount a data directory for the database
    environment:
      - DATABASE_URL=sqlite:///./data/app.db
      - SECRET_KEY=your-super-secret-key-change-this-in-production
      - ADMIN_EMAIL=admin@freshproduce.com
      - ADMIN_PASSWORD=admin123
      - ADMIN_NAME=Admin User
      - BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:8001","http://localhost:8080"]
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload


=== backend/main.py ===

from fastapi import FastAPI, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
from sqlmodel import Session
import time

from app.database import create_db_and_tables, engine
from app.api.api_v1.api import api_router
from app.core.config import settings
from app.core.admin import create_admin_user
from app.seed_data import seed_data

app = FastAPI(
    title=settings.PROJECT_NAME,
    description="API for an e-commerce platform selling fruits and vegetables",
    version="1.0.0",
    openapi_url=f"{settings.API_V1_STR}/openapi.json",
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    # allow_origins=settings.BACKEND_CORS_ORIGINS,
        allow_origins=[
        # "http://localhost:4200",  # Angular dev server
        '*'
        # "https://your-production-frontend.com",  # Your production frontend
    ],

    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Add middleware for request timing
@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response

# Include API router
app.include_router(api_router, prefix=settings.API_V1_STR)

@app.on_event("startup")
def on_startup():
    """Create tables and initial data on startup"""
    create_db_and_tables()
    
    # Create admin user
    with Session(engine) as session:
        create_admin_user(session)
    
    # Seed data
    seed_data()

@app.get("/")
def root():
    """Root endpoint - health check"""
    return {"message": f"Welcome to {settings.PROJECT_NAME} API", "status": "online"}

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)

=== backend/readme.md ===

# Fresh Produce E-commerce API

A modern FastAPI backend for an e-commerce platform that sells fruits and vegetables.

## Features

- 🔐 **Authentication & Authorization**: JWT token-based authentication with role-based access control (Customer, Staff, Admin)
- 📦 **Product Management**: Categories for organizing produce with support for organic labeling
- 🛒 **Shopping Cart**: Full shopping cart functionality with stock management
- 📋 **Order Processing**: Complete order lifecycle management
- 📊 **Admin Dashboard**: Sales analytics, low stock alerts, and comprehensive reporting
- 🌱 **Sample Data**: Pre-populated with categories and products

## Tech Stack

- **FastAPI**: High-performance API framework
- **SQLModel**: ORM for database interactions
- **Pydantic**: Data validation and settings management
- **JWT**: Authentication with security best practices
- **Docker**: Containerization for easy deployment

## Project Structure

```
├── app
│   ├── api
│   │   ├── api_v1
│   │   │   ├── endpoints
│   │   │   │   ├── admin.py
│   │   │   │   ├── auth.py
│   │   │   │   ├── cart.py
│   │   │   │   ├── categories.py
│   │   │   │   ├── orders.py
│   │   │   │   ├── products.py
│   │   │   │   └── users.py
│   │   │   └── api.py
│   │   └── utils
│   │       └── common.py
│   ├── core
│   │   ├── admin.py
│   │   ├── config.py
│   │   └── security.py
│   ├── models
│   │   ├── cart.py
│   │   ├── category.py
│   │   ├── order.py
│   │   ├── product.py
│   │   └── user.py
│   ├── database.py
│   └── seed_data.py
├── main.py
├── requirements.txt
├── Dockerfile
└── docker-compose.yml
```

## Setup and Installation

### Using Docker (Recommended)

1. Clone the repository
2. Run with Docker Compose:
   ```bash
   docker-compose up -d
   ```
3. API will be available at http://localhost:8000
4. API documentation at http://localhost:8000/docs

### Manual Setup

1. Clone the repository
2. Create a virtual environment:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```
3. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```
4. Create a `.env` file with the following variables:
   ```
   DATABASE_URL=sqlite:///./app.db
   SECRET_KEY=your-super-secret-key-change-this-in-production
   ADMIN_EMAIL=admin@freshproduce.com
   ADMIN_PASSWORD=admin123
   ADMIN_NAME=Admin User
   BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:8000"]
   ```
5. Run the application:
   ```bash
   uvicorn main:app --reload
   ```
6. API will be available at http://localhost:8000
7. API documentation at http://localhost:8000/docs

## API Documentation

Once the application is running, you can access the interactive API documentation:

- **Swagger UI**: http://localhost:8000/docs
- **ReDoc**: http://localhost:8000/redoc

### Default Admin User

The application creates a default admin user on startup:
- **Email**: admin@freshproduce.com
- **Password**: admin123

## Main Endpoints

### Authentication
- `POST /api/v1/auth/login` - Get access token
- `POST /api/v1/auth/register` - Register new user

### Users
- `GET /api/v1/users/me` - Get current user
- `PATCH /api/v1/users/me` - Update current user
- `GET /api/v1/users` - List all users (admin only)

### Categories
- `GET /api/v1/categories` - List all categories
- `POST /api/v1/categories` - Create new category (staff only)
- `GET /api/v1/categories/{id}` - Get category details

### Products
- `GET /api/v1/products` - List all products with filtering options
- `POST /api/v1/products` - Create new product (staff only)
- `GET /api/v1/products/{id}` - Get product details

### Cart
- `GET /api/v1/cart/items` - Get cart items
- `POST /api/v1/cart/items` - Add item to cart
- `PATCH /api/v1/cart/items/{id}` - Update cart item quantity
- `DELETE /api/v1/cart/items/{id}` - Remove item from cart

### Orders
- `POST /api/v1/orders` - Create new order
- `GET /api/v1/orders` - List user orders
- `GET /api/v1/orders/{id}` - Get order details
- `PATCH /api/v1/orders/{id}` - Update order status (staff only)

### Admin
- `GET /api/v1/admin/dashboard` - Get dashboard statistics
- `GET /api/v1/admin/sales-report` - Get sales reports
- `GET /api/v1/admin/low-stock` - Get low stock products

## License

MIT

=== backend/requirements.txt ===

fastapi
uvicorn
sqlmodel
pydantic_settings
psycopg2-binary
pydantic
python-jose
passlib
python-multipart
python-dotenv
email-validator
bcrypt

=== backend/.vercel/README.txt ===

> Why do I have a folder named ".vercel" in my project?
The ".vercel" folder is created when you link a directory to a Vercel project.

> What does the "project.json" file contain?
The "project.json" file contains:
- The ID of the Vercel project that you linked ("projectId")
- The ID of the user or team your Vercel project is owned by ("orgId")

> Should I commit the ".vercel" folder?
No, you should not share the ".vercel" folder with anyone.
Upon creation, it will be automatically added to your ".gitignore" file.


=== backend/.vercel/project.json ===

{"projectId":"prj_M5VaXykzPaBU2HmthF9mgjWv8wdI","orgId":"team_viyAbphHD45mENPYJa8lRjX9"}

=== backend/app/__init__.py ===



=== backend/app/database.py ===

from sqlmodel import Session, SQLModel, create_engine
from app.core.config import settings

# Create SQLite engine
engine = create_engine(
    settings.DATABASE_URL, 
    echo=False,  # Set to True for debugging
    connect_args={"check_same_thread": False} if settings.DATABASE_URL.startswith("sqlite") else {}
)

def create_db_and_tables():
    """Create database tables if they don't exist"""
    SQLModel.metadata.create_all(engine)

def get_session():
    """Create a new database session"""
    with Session(engine) as session:
        yield session

=== backend/app/seed_data.py ===

import logging
from sqlmodel import Session, select
from app.database import engine
from app.models.category import Category
from app.models.product import Product, ProductUnit

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Sample data
CATEGORIES = [
    {
        "name": "Fresh Fruits",
        "description": "Fresh and seasonal fruits",
        "image_url": "https://images.unsplash.com/photo-1619566636858-adf3ef46400b?auto=format&fit=crop&w=1470&q=80"
    },
    {
        "name": "Fresh Vegetables",
        "description": "Fresh and seasonal vegetables",
        "image_url": "https://images.unsplash.com/photo-1518843875459-f738682238a6?auto=format&fit=crop&w=1442&q=80"
    },
    {
        "name": "Organic Produce",
        "description": "Certified organic fruits and vegetables",
        "image_url": "https://images.unsplash.com/photo-1576675466969-38eeae4b41f6?auto=format&fit=crop&w=1442&q=80"
    }
]

PRODUCTS = [
    # Fruits
    {
        "name": "Apples",
        "description": "Fresh, crisp red apples. Great for snacking, baking, or cooking.",
        "price": 2.99,
        "unit": ProductUnit.KG,
        "stock_quantity": 100,
        "image_url": "https://images.unsplash.com/photo-1570913149827-d2ac84ab3f9a?auto=format&fit=crop&w=1470&q=80",
        "is_organic": False,
        "category_name": "Fresh Fruits"
    },
    {
        "name": "Organic Apples",
        "description": "Organically grown apples. No pesticides or chemicals.",
        "price": 3.99,
        "unit": ProductUnit.KG,
        "stock_quantity": 50,
        "image_url": "https://images.unsplash.com/photo-1570913149827-d2ac84ab3f9a?auto=format&fit=crop&w=1470&q=80",
        "is_organic": True,
        "category_name": "Organic Produce"
    },
    {
        "name": "Bananas",
        "description": "Sweet and nutritious bananas. Perfect for smoothies or a quick snack.",
        "price": 1.49,
        "unit": ProductUnit.KG,
        "stock_quantity": 150,
        "image_url": "https://images.unsplash.com/photo-1587132137056-bfbf0166836e?auto=format&fit=crop&w=1480&q=80",
        "is_organic": False,
        "category_name": "Fresh Fruits"
    },
    {
        "name": "Organic Bananas",
        "description": "Organically grown bananas without any chemicals.",
        "price": 2.49,
        "unit": ProductUnit.KG,
        "stock_quantity": 75,
        "image_url": "https://images.unsplash.com/photo-1587132137056-bfbf0166836e?auto=format&fit=crop&w=1480&q=80",
        "is_organic": True,
        "category_name": "Organic Produce"
    },
    {
        "name": "Oranges",
        "description": "Juicy oranges rich in vitamin C.",
        "price": 3.29,
        "unit": ProductUnit.KG,
        "stock_quantity": 80,
        "image_url": "https://images.unsplash.com/photo-1582979512210-99b6a53386f9?auto=format&fit=crop&w=1374&q=80",
        "is_organic": False,
        "category_name": "Fresh Fruits"
    },
    {
        "name": "Strawberries",
        "description": "Sweet, juicy strawberries. Great for desserts or eating fresh.",
        "price": 4.99,
        "unit": ProductUnit.POUND,
        "stock_quantity": 60,
        "image_url": "https://images.unsplash.com/photo-1587393855524-087f83d95bc9?auto=format&fit=crop&w=1460&q=80",
        "is_organic": False,
        "category_name": "Fresh Fruits"
    },
    
    # Vegetables
    {
        "name": "Carrots",
        "description": "Fresh carrots rich in beta-carotene.",
        "price": 1.99,
        "unit": ProductUnit.KG,
        "stock_quantity": 120,
        "image_url": "https://images.unsplash.com/photo-1590868309235-ea34bed7bd7f?ixlib=rb-4.0.3&auto=format&fit=crop&w=1470&q=80",
        "is_organic": False,
        "category_name": "Fresh Vegetables"
    },
    {
        "name": "Organic Carrots",
        "description": "Organically grown carrots without pesticides.",
        "price": 2.99,
        "unit": ProductUnit.KG,
        "stock_quantity": 60,
        "image_url": "https://images.unsplash.com/photo-1590868309235-ea34bed7bd7f?ixlib=rb-4.0.3&auto=format&fit=crop&w=1470&q=80",
        "is_organic": True,
        "category_name": "Organic Produce"
    },
    {
        "name": "Tomatoes",
        "description": "Fresh, ripe tomatoes. Perfect for salads and cooking.",
        "price": 2.49,
        "unit": ProductUnit.KG,
        "stock_quantity": 100,
        "image_url": "https://images.unsplash.com/photo-1582284540020-8acbe03f4924?auto=format&fit=crop&w=1470&q=80",
        "is_organic": False,
        "category_name": "Fresh Vegetables"
    },
    {
        "name": "Spinach",
        "description": "Fresh spinach leaves rich in iron and vitamins.",
        "price": 3.49,
        "unit": ProductUnit.BUNCH,
        "stock_quantity": 50,
        "image_url": "https://images.unsplash.com/photo-1576045057995-568f588f82fb?auto=format&fit=crop&w=1442&q=80",
        "is_organic": False,
        "category_name": "Fresh Vegetables"
    },
    {
        "name": "Broccoli",
        "description": "Fresh broccoli, packed with nutrients and antioxidants.",
        "price": 2.79,
        "unit": ProductUnit.KG,
        "stock_quantity": 65,
        "image_url": "https://images.unsplash.com/photo-1584270354949-c26b0d5b4a0c?auto=format&fit=crop&w=1470&q=80",
        "is_organic": False,
        "category_name": "Fresh Vegetables"
    },
    {
        "name": "Organic Kale",
        "description": "Organic kale, a superfood packed with vitamins and minerals.",
        "price": 3.99,
        "unit": ProductUnit.BUNCH,
        "stock_quantity": 40,
        "image_url": "https://images.unsplash.com/photo-1524179091875-bf99a9a6af57?ixlib=rb-4.0.3&auto=format&fit=crop&w=1470&q=80",
        "is_organic": True,
        "category_name": "Organic Produce"
    }
]

def seed_data():
    """Seed the database with initial data"""
    logger.info("Starting database seeding...")
    
    with Session(engine) as session:
        # Seed categories
        for category_data in CATEGORIES:
            # Check if category already exists
            category = session.exec(
                select(Category).where(Category.name == category_data["name"])
            ).first()
            
            if not category:
                category = Category(**category_data)
                session.add(category)
                logger.info(f"Added category: {category_data['name']}")
        
        # Commit categories first to ensure they exist before adding products
        session.commit()
        
        # Seed products
        for product_data in PRODUCTS:
            # Get category ID
            category_name = product_data.pop("category_name")
            category = session.exec(
                select(Category).where(Category.name == category_name)
            ).first()
            
            if not category:
                logger.warning(f"Category '{category_name}' not found, skipping product: {product_data['name']}")
                continue
            
            # Check if product already exists
            product = session.exec(
                select(Product).where(Product.name == product_data["name"])
            ).first()
            
            if not product:
                product = Product(**product_data, category_id=category.id)
                session.add(product)
                logger.info(f"Added product: {product_data['name']}")
        
        session.commit()
    
    logger.info("Database seeding completed!")

if __name__ == "__main__":
    seed_data()

=== backend/app/core/__init__.py ===



=== backend/app/core/admin.py ===

from sqlmodel import Session, select
from datetime import datetime, timezone
from passlib.context import CryptContext

from app.core.config import settings
from app.models.user import User, UserRole

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password: str) -> str:
    """Get password hash"""
    return pwd_context.hash(password)

def create_admin_user(session: Session) -> None:
    """Create admin user if none exists"""
    # Check if admin already exists
    admin = session.exec(select(User).where(User.email == settings.ADMIN_EMAIL)).first()
    
    if not admin:
        print(f"Creating admin user: {settings.ADMIN_EMAIL}")
        admin = User(
            email=settings.ADMIN_EMAIL,
            full_name=settings.ADMIN_NAME,
            hashed_password=get_password_hash(settings.ADMIN_PASSWORD),
            role=UserRole.ADMIN,
            is_active=True,
            created_at=datetime.now(timezone.utc)
        )
        session.add(admin)
        session.commit()
        print("Admin user created successfully")
    else:
        print("Admin user already exists")

=== backend/app/core/config.py ===

from typing import List, Optional, Union
from pydantic import AnyHttpUrl, field_validator
from pydantic_settings import BaseSettings
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class Settings(BaseSettings):
    API_V1_STR: str = "/api/v1"
    PROJECT_NAME: str = "Fresh Produce E-commerce API"
    
    # BACKEND_CORS_ORIGINS is a comma-separated list of origins
    # e.g: "http://localhost,http://localhost:4200,http://localhost:3000"
    BACKEND_CORS_ORIGINS: List[AnyHttpUrl] = ['*']

    @field_validator("BACKEND_CORS_ORIGINS", mode="before")
    def assemble_cors_origins(cls, v: Union[str, List[str]]) -> Union[List[str], str]:
        if isinstance(v, str) and not v.startswith("["):
            return [i.strip() for i in v.split(",")]
        elif isinstance(v, (list, str)):
            return v
        raise ValueError(v)

    # Database settings
    DATABASE_URL: str = os.getenv("DATABASE_URL", "sqlite:///./app.db")
    
    # Security settings
    SECRET_KEY: str = os.getenv("SECRET_KEY", "your-secret-key-here-make-it-very-secure-and-very-long")
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 1440
    
    # Admin user settings
    ADMIN_EMAIL: str = os.getenv("ADMIN_EMAIL", "admin@freshproduce.com")
    ADMIN_PASSWORD: str = os.getenv("ADMIN_PASSWORD", "admin123")
    ADMIN_NAME: str = os.getenv("ADMIN_NAME", "Admin User")

settings = Settings()

=== backend/app/core/security.py ===

from datetime import datetime, timedelta, timezone
from typing import Any, Optional, Union
from jose import jwt
from passlib.context import CryptContext
from sqlmodel import Session, select
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

from app.database import get_session
from app.core.config import settings
from app.models.user import User, UserRole

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# OAuth2 token URL
oauth2_scheme = OAuth2PasswordBearer(tokenUrl=f"{settings.API_V1_STR}/auth/login")

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Verify password against hash"""
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    """Get password hash"""
    return pwd_context.hash(password)

def create_access_token(subject: Union[str, Any], expires_delta: Optional[timedelta] = None) -> str:
    """Create JWT access token"""
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    
    to_encode = {"exp": expire, "sub": str(subject)}
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
    return encoded_jwt

def get_current_user(token: str = Depends(oauth2_scheme), session: Session = Depends(get_session)) -> User:
    """Get current user from token"""
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        email: str = payload.get("sub")
        if email is None:
            raise credentials_exception
    except jwt.JWTError:
        raise credentials_exception
    
    user = session.exec(select(User).where(User.email == email)).first()
    if user is None:
        raise credentials_exception
    
    if not user.is_active:
        raise HTTPException(status_code=400, detail="Inactive user")
    
    return user

def get_current_active_user(current_user: User = Depends(get_current_user)) -> User:
    """Get current active user"""
    if not current_user.is_active:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user

def get_current_admin_user(current_user: User = Depends(get_current_user)) -> User:
    """Get current admin user"""
    if current_user.role != UserRole.ADMIN:
        raise HTTPException(
            status_code=403,
            detail="The user doesn't have enough privileges"
        )
    return current_user

def get_current_staff_user(current_user: User = Depends(get_current_user)) -> User:
    """Get current staff or admin user"""
    if current_user.role not in [UserRole.ADMIN, UserRole.STAFF]:
        raise HTTPException(
            status_code=403,
            detail="The user doesn't have enough privileges"
        )
    return current_user

=== backend/app/models/__init__.py ===



=== backend/app/models/category.py ===

from sqlmodel import SQLModel, Field, Relationship
from typing import Optional, List, TYPE_CHECKING
from datetime import datetime, timezone

if TYPE_CHECKING:
    from app.models.product import Product

class CategoryBase(SQLModel):
    """Base category model with common fields"""
    name: str = Field(min_length=1, max_length=100, index=True)
    description: Optional[str] = Field(default=None)
    image_url: Optional[str] = Field(default=None, max_length=255)
    is_active: bool = Field(default=True)

class Category(CategoryBase, table=True):
    """Database model for categories"""
    __tablename__ = "categories"
    id: Optional[int] = Field(default=None, primary_key=True)
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    updated_at: Optional[datetime] = Field(default=None)
    
    # Relationships
    products: List["Product"] = Relationship(back_populates="category", sa_relationship_kwargs={"cascade": "all, delete-orphan"})

class CategoryCreate(CategoryBase):
    """Model for creating a new category"""
    pass

class CategoryUpdate(SQLModel):
    """Model for updating categories"""
    name: Optional[str] = Field(default=None, min_length=1, max_length=100)
    description: Optional[str] = Field(default=None)
    image_url: Optional[str] = Field(default=None, max_length=255)
    is_active: Optional[bool] = Field(default=None)

class CategoryRead(CategoryBase):
    """Model for reading categories"""
    id: int
    created_at: datetime
    updated_at: Optional[datetime] = None

=== backend/app/models/order.py ===

from sqlmodel import SQLModel, Field, Relationship
from typing import Optional, List, Dict, Any, TYPE_CHECKING
from datetime import datetime, timezone
from enum import Enum
from pydantic import field_validator

if TYPE_CHECKING:
    from app.models.user import User
    from app.models.product import Product

class OrderStatus(str, Enum):
    """Order status enumeration"""
    PENDING = "pending"
    CONFIRMED = "confirmed"
    SHIPPED = "shipped"
    DELIVERED = "delivered"
    CANCELLED = "cancelled"

class OrderItemBase(SQLModel):
    """Base model for order items"""
    order_id: int = Field(foreign_key="orders.id")
    product_id: int = Field(foreign_key="products.id")
    quantity: int = Field(gt=0)
    unit_price: float = Field(gt=0)

class OrderItem(OrderItemBase, table=True):
    """Database model for order items"""
    __tablename__ = "order_items"
    id: Optional[int] = Field(default=None, primary_key=True)
    product_name: str
    product_unit: str
    
    # Relationships
    order: "Order" = Relationship(back_populates="items")
    product: "Product" = Relationship(back_populates="order_items")

class OrderBase(SQLModel):
    """Base order model with common fields"""
    user_id: int = Field(foreign_key="users.id")
    status: OrderStatus = Field(default=OrderStatus.PENDING)
    shipping_address: str
    contact_phone: str
    total_amount: float = Field(gt=0)

class Order(OrderBase, table=True):
    """Database model for orders"""
    __tablename__ = "orders"
    id: Optional[int] = Field(default=None, primary_key=True)
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    updated_at: Optional[datetime] = Field(default=None)
    
    # Relationships
    user: "User" = Relationship(back_populates="orders")
    items: List[OrderItem] = Relationship(back_populates="order", sa_relationship_kwargs={"cascade": "all, delete-orphan"})

class OrderCreateItem(SQLModel):
    """Model for item in order creation"""
    product_id: int
    quantity: int = Field(gt=0)

class OrderCreate(SQLModel):
    """Model for creating a new order"""
    user_id: int
    shipping_address: str
    contact_phone: str
    items: List[OrderCreateItem]
    
    @field_validator("items")
    def validate_items(cls, v):
        """Validate that order contains items"""
        if not v or len(v) == 0:
            raise ValueError("Order must contain at least one item")
        return v

class OrderUpdate(SQLModel):
    """Model for updating orders"""
    status: Optional[OrderStatus] = None
    shipping_address: Optional[str] = None
    contact_phone: Optional[str] = None

class OrderRead(OrderBase):
    """Model for reading orders"""
    id: int
    created_at: datetime
    updated_at: Optional[datetime] = None

# Create a new Pydantic model that explicitly includes items
class OrderItemRead(SQLModel):
    """Model for reading order items in API responses"""
    id: int
    order_id: int
    product_id: int
    quantity: int
    unit_price: float
    product_name: str
    product_unit: str

class OrderWithItems(OrderRead):
    """Extended order model that includes items"""
    items: List[OrderItemRead] = []

=== backend/app/models/product.py ===

from sqlmodel import SQLModel, Field, Relationship
from typing import Optional, List, TYPE_CHECKING
from datetime import datetime, timezone
from enum import Enum

if TYPE_CHECKING:
    from app.models.category import Category
    from app.models.order import OrderItem

class ProductUnit(str, Enum):
    """Unit of measurement for products"""
    KG = "kg"
    GRAM = "gram"
    PIECE = "piece"
    BUNCH = "bunch"
    DOZEN = "dozen"
    POUND = "pound"

class ProductBase(SQLModel):
    """Base product model with common fields"""
    name: str = Field(min_length=1, max_length=100, index=True)
    description: Optional[str] = Field(default=None)
    price: float = Field(gt=0)
    unit: ProductUnit
    stock_quantity: int = Field(ge=0)
    image_url: Optional[str] = Field(default=None, max_length=255)
    is_organic: bool = Field(default=False)
    is_active: bool = Field(default=True)
    category_id: int = Field(foreign_key="categories.id")

class Product(ProductBase, table=True):
    """Database model for products"""
    __tablename__ = "products"
    id: Optional[int] = Field(default=None, primary_key=True)
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    updated_at: Optional[datetime] = Field(default=None)
    
    # Relationships
    category: "Category" = Relationship(back_populates="products")
    order_items: List["OrderItem"] = Relationship(back_populates="product")

class ProductCreate(ProductBase):
    """Model for creating a new product"""
    pass

class ProductUpdate(SQLModel):
    """Model for updating products"""
    name: Optional[str] = Field(default=None, min_length=1, max_length=100)
    description: Optional[str] = Field(default=None)
    price: Optional[float] = Field(default=None, gt=0)
    unit: Optional[ProductUnit] = None
    stock_quantity: Optional[int] = Field(default=None, ge=0)
    image_url: Optional[str] = Field(default=None, max_length=255)
    is_organic: Optional[bool] = Field(default=None)
    is_active: Optional[bool] = Field(default=None)
    category_id: Optional[int] = Field(default=None)

class ProductRead(ProductBase):
    """Model for reading products"""
    id: int
    created_at: datetime
    updated_at: Optional[datetime] = None

=== backend/app/models/user.py ===

from sqlmodel import SQLModel, Field, Relationship
from typing import Optional, List, TYPE_CHECKING
from datetime import datetime, timezone
from enum import Enum
from pydantic import EmailStr

if TYPE_CHECKING:
    from app.models.order import Order
    # Remove this import
    # from app.models.cart import CartItem

class UserRole(str, Enum):
    """User role enumeration"""
    CUSTOMER = "customer"
    STAFF = "staff"
    ADMIN = "admin"

class UserBase(SQLModel):
    """Base user model with common fields"""
    email: EmailStr = Field(index=True)
    full_name: str = Field(min_length=1, max_length=100)
    phone: Optional[str] = Field(default=None, max_length=20)
    address: Optional[str] = Field(default=None, max_length=200)
    role: UserRole = Field(default=UserRole.CUSTOMER)
    is_active: bool = Field(default=True)

class User(UserBase, table=True):
    """Database model for users"""
    __tablename__ = "users"
    id: Optional[int] = Field(default=None, primary_key=True)
    hashed_password: str
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    updated_at: Optional[datetime] = Field(default=None)
    
    # Relationships
    orders: List["Order"] = Relationship(back_populates="user", sa_relationship_kwargs={"cascade": "all, delete-orphan"})
    # Remove this relationship
    # cart_items: List["CartItem"] = Relationship(back_populates="user", sa_relationship_kwargs={"cascade": "all, delete-orphan"})

class UserCreate(UserBase):
    """Model for creating a new user"""
    password: str = Field(min_length=8, max_length=100)

class UserUpdate(SQLModel):
    """Model for updating users"""
    full_name: Optional[str] = Field(default=None, min_length=1, max_length=100)
    phone: Optional[str] = Field(default=None, max_length=20)
    address: Optional[str] = Field(default=None, max_length=200)
    password: Optional[str] = Field(default=None, min_length=8, max_length=100)
    is_active: Optional[bool] = Field(default=None)
    role: Optional[UserRole] = Field(default=None)

class UserRead(UserBase):
    """Model for reading users"""
    id: int
    created_at: datetime
    updated_at: Optional[datetime] = None

=== backend/app/api/__init__.py ===



=== backend/app/api/api_v1/__init__.py ===



=== backend/app/api/api_v1/api.py ===

from fastapi import APIRouter

from app.api.api_v1.endpoints import auth, users, categories, products, orders, admin

api_router = APIRouter()

api_router.include_router(auth.router, prefix="/auth", tags=["Authentication"])
api_router.include_router(users.router, prefix="/users", tags=["Users"])
api_router.include_router(categories.router, prefix="/categories", tags=["Categories"])
api_router.include_router(products.router, prefix="/products", tags=["Products"])
api_router.include_router(orders.router, prefix="/orders", tags=["Orders"])
api_router.include_router(admin.router, prefix="/admin", tags=["Admin"])

=== backend/app/api/api_v1/endpoints/__init__.py ===

# Import utility functions to make them available
from app.api.utils.common import format_price, calculate_order_total, format_date

=== backend/app/api/api_v1/endpoints/admin.py ===

from typing import Any, Dict, List, Optional
from datetime import datetime, timezone, timedelta

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlmodel import Session, select, func
from pydantic import BaseModel

from app.database import get_session
from app.models.user import User, UserRole
from app.models.product import Product
from app.models.category import Category
from app.models.order import Order, OrderStatus, OrderItem
from app.core.security import get_current_admin_user, get_current_staff_user

router = APIRouter()

# Response models
class DashboardStats(BaseModel):
    total_users: int
    total_products: int
    total_categories: int
    total_orders: int
    total_revenue: float
    pending_orders: int
    low_stock_products: int
    top_selling_products: List[Dict[str, Any]]
    recent_orders: List[Dict[str, Any]]
    sales_by_category: List[Dict[str, Any]]

class SalesReport(BaseModel):
    period: str
    data: List[Dict[str, Any]]
    total_sales: float

@router.get("/dashboard", response_model=DashboardStats)
def get_dashboard_stats(
    current_user: User = Depends(get_current_staff_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Get dashboard statistics (staff only).
    """
    # Calculate statistics
    total_users = session.exec(select(func.count()).select_from(User)).first()
    total_products = session.exec(select(func.count()).select_from(Product)).first()
    total_categories = session.exec(select(func.count()).select_from(Category)).first()
    total_orders = session.exec(select(func.count()).select_from(Order)).first()
    
    # Calculate total revenue
    total_revenue = session.exec(
        select(func.sum(Order.total_amount)).where(Order.status != OrderStatus.CANCELLED)
    ).first() or 0.0
    
    # Count pending orders
    pending_orders = session.exec(
        select(func.count()).select_from(Order).where(Order.status == OrderStatus.PENDING)
    ).first()
    
    # Count low stock products (less than 10 items)
    low_stock_products = session.exec(
        select(func.count()).select_from(Product).where(
            Product.stock_quantity < 10,
            Product.is_active == True
        )
    ).first()
    
    # The rest of your function...
    
    # Get top selling products
    top_products_query = select(
        OrderItem.product_id,
        OrderItem.product_name,
        func.sum(OrderItem.quantity).label("total_quantity"),
        func.sum(OrderItem.quantity * OrderItem.unit_price).label("total_sales")
    ).join(Order).where(
        Order.status != OrderStatus.CANCELLED
    ).group_by(
        OrderItem.product_id, 
        OrderItem.product_name  # Added product_name here
    ).order_by(
        func.sum(OrderItem.quantity).desc()
    ).limit(5)

    
    top_selling_products = []
    top_products_result = session.exec(top_products_query).all()
    
    for product_id, product_name, total_quantity, total_sales in top_products_result:
        product = session.get(Product, product_id)
        category_name = "Unknown"
        
        if product and product.category_id:
            category = session.get(Category, product.category_id)
            if category:
                category_name = category.name
        
        top_selling_products.append({
            "product_id": product_id,
            "name": product_name,
            "total_quantity": total_quantity,
            "total_sales": total_sales,
            "category": category_name
        })
    
    # Get recent orders
    recent_orders_query = select(Order).order_by(Order.created_at.desc()).limit(5)
    recent_orders = []
    
    for order in session.exec(recent_orders_query):
        user = session.get(User, order.user_id)
        username = user.full_name if user else "Unknown"
        
        recent_orders.append({
            "order_id": order.id,
            "status": order.status,
            "total_amount": order.total_amount,
            "created_at": order.created_at.isoformat(),
            "customer_name": username
        })
    
    # Get sales by category
    sales_by_category_query = select(
        Product.category_id,
        func.sum(OrderItem.quantity * OrderItem.unit_price).label("total_sales")
    ).join(OrderItem, Product.id == OrderItem.product_id).join(
        Order, OrderItem.order_id == Order.id
    ).where(
        Order.status != OrderStatus.CANCELLED
    ).group_by(
        Product.category_id
    )
    
    sales_by_category = []
    sales_by_category_result = session.exec(sales_by_category_query).all()
    
    for category_id, total_sales in sales_by_category_result:
        category = session.get(Category, category_id)
        category_name = category.name if category else "Unknown"
        
        sales_by_category.append({
            "category_id": category_id,
            "name": category_name,
            "total_sales": total_sales
        })
    
    return DashboardStats(
        total_users=total_users,
        total_products=total_products,
        total_categories=total_categories,
        total_orders=total_orders,
        total_revenue=total_revenue,
        pending_orders=pending_orders,
        low_stock_products=low_stock_products,
        top_selling_products=top_selling_products,
        recent_orders=recent_orders,
        sales_by_category=sales_by_category
    )

@router.get("/sales-report", response_model=SalesReport)
def get_sales_report(
    period: str = Query(..., enum=["daily", "weekly", "monthly", "yearly"]),
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    current_user: User = Depends(get_current_staff_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Get sales report for a specific period (staff only).
    """
    # Set default date range if not provided
    if not end_date:
        end_date = datetime.now(timezone.utc)
    
    if not start_date:
        if period == "daily":
            # Last 30 days
            start_date = end_date - timedelta(days=30)
        elif period == "weekly":
            # Last 12 weeks
            start_date = end_date - timedelta(weeks=12)
        elif period == "monthly":
            # Last 12 months
            start_date = end_date - timedelta(days=365)
        elif period == "yearly":
            # Last 5 years
            start_date = end_date - timedelta(days=365 * 5)
    
    # Query orders within date range
    orders_query = select(Order).where(
        Order.created_at >= start_date,
        Order.created_at <= end_date,
        Order.status != OrderStatus.CANCELLED
    )
    
    orders = session.exec(orders_query).all()
    
    # Organize data by period
    data = []
    total_sales = 0
    
    if period == "daily":
        # Group by day
        sales_by_day = {}
        for order in orders:
            day = order.created_at.date()
            sales_by_day[day] = sales_by_day.get(day, 0) + order.total_amount
            total_sales += order.total_amount
        
        # Format data
        for day, amount in sorted(sales_by_day.items()):
            data.append({
                "date": day.isoformat(),
                "sales": amount
            })
    
    elif period == "weekly":
        # Group by week
        sales_by_week = {}
        for order in orders:
            # Calculate week number and year
            year = order.created_at.year
            week = order.created_at.isocalendar()[1]
            week_key = f"{year}-W{week:02d}"
            
            sales_by_week[week_key] = sales_by_week.get(week_key, 0) + order.total_amount
            total_sales += order.total_amount
        
        # Format data
        for week_key, amount in sorted(sales_by_week.items()):
            data.append({
                "date": week_key,
                "sales": amount
            })
    
    elif period == "monthly":
        # Group by month
        sales_by_month = {}
        for order in orders:
            month_key = f"{order.created_at.year}-{order.created_at.month:02d}"
            
            sales_by_month[month_key] = sales_by_month.get(month_key, 0) + order.total_amount
            total_sales += order.total_amount
        
        # Format data
        for month_key, amount in sorted(sales_by_month.items()):
            data.append({
                "date": month_key,
                "sales": amount
            })
    
    elif period == "yearly":
        # Group by year
        sales_by_year = {}
        for order in orders:
            year = order.created_at.year
            
            sales_by_year[year] = sales_by_year.get(year, 0) + order.total_amount
            total_sales += order.total_amount
        
        # Format data
        for year, amount in sorted(sales_by_year.items()):
            data.append({
                "date": str(year),
                "sales": amount
            })
    
    return SalesReport(
        period=period,
        data=data,
        total_sales=total_sales
    )

@router.get("/low-stock", response_model=List[Dict[str, Any]])
def get_low_stock_products(
    threshold: int = Query(default=10, ge=1),
    current_user: User = Depends(get_current_staff_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Get products with low stock (staff only).
    """
    # Query low stock products
    query = select(Product).where(
        Product.stock_quantity <= threshold,
        Product.is_active == True
    ).order_by(Product.stock_quantity)
    
    products = session.exec(query).all()
    
    # Format response
    result = []
    for product in products:
        category = session.get(Category, product.category_id)
        category_name = category.name if category else "Unknown"
        
        result.append({
            "id": product.id,
            "name": product.name,
            "category": category_name,
            "stock_quantity": product.stock_quantity,
            "price": product.price,
            "unit": product.unit
        })
    
    return result

=== backend/app/api/api_v1/endpoints/auth.py ===

from datetime import timedelta
from typing import Any

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlmodel import Session, select

from app.database import get_session
from app.core.security import (
    create_access_token,
    get_password_hash,
    verify_password,
)
from app.core.config import settings
from app.models.user import User, UserCreate, UserRead

router = APIRouter()

@router.post("/login", response_model=dict)
def login_access_token(
    form_data: OAuth2PasswordRequestForm = Depends(),
    session: Session = Depends(get_session),
) -> Any:
    """
    OAuth2 compatible token login, get an access token for future requests
    """
    user = session.exec(select(User).where(User.email == form_data.username)).first()
    if not user or not verify_password(form_data.password, user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
        )
    elif not user.is_active:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, 
            detail="Inactive user"
        )
    
    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    return {
        "access_token": create_access_token(
            user.email, expires_delta=access_token_expires
        ),
        "token_type": "bearer",
    }

@router.post("/register", response_model=UserRead)
def register_new_user(
    user_in: UserCreate,
    session: Session = Depends(get_session),
) -> Any:
    """
    Create new user without the need to be logged in.
    """
    user = session.exec(select(User).where(User.email == user_in.email)).first()
    if user:
        raise HTTPException(
            status_code=400,
            detail="The user with this email already exists.",
        )
    
    new_user = User(
        email=user_in.email,
        hashed_password=get_password_hash(user_in.password),
        full_name=user_in.full_name,
        phone=user_in.phone,
        address=user_in.address,
        role=user_in.role,
        is_active=True,
    )
    session.add(new_user)
    session.commit()
    session.refresh(new_user)
    return new_user

=== backend/app/api/api_v1/endpoints/categories.py ===

from typing import Any, List
from datetime import datetime, timezone

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlmodel import Session, select

from app.database import get_session
from app.models.category import Category, CategoryCreate, CategoryUpdate, CategoryRead
from app.core.security import get_current_staff_user, get_current_active_user
from app.models.user import User

router = APIRouter()

@router.post("", response_model=CategoryRead)
def create_category(
    category_in: CategoryCreate,
    current_user: User = Depends(get_current_staff_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Create new category (staff only).
    """
    # Check if category already exists
    existing = session.exec(
        select(Category).where(Category.name == category_in.name)
    ).first()
    
    if existing:
        raise HTTPException(
            status_code=400,
            detail="Category with this name already exists",
        )
    
    category = Category.model_validate(category_in)
    session.add(category)
    session.commit()
    session.refresh(category)
    return category

@router.get("", response_model=List[CategoryRead])
def read_categories(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    active_only: bool = Query(False),
    session: Session = Depends(get_session),
) -> Any:
    """
    Retrieve categories.
    """
    query = select(Category)
    
    if active_only:
        query = query.where(Category.is_active == True)
    
    categories = session.exec(query.offset(skip).limit(limit)).all()
    return categories

@router.get("/{category_id}", response_model=CategoryRead)
def read_category(
    category_id: int,
    session: Session = Depends(get_session),
) -> Any:
    """
    Get category by ID.
    """
    category = session.get(Category, category_id)
    if not category:
        raise HTTPException(
            status_code=404,
            detail="Category not found",
        )
    return category

@router.patch("/{category_id}", response_model=CategoryRead)
def update_category(
    category_id: int,
    category_in: CategoryUpdate,
    current_user: User = Depends(get_current_staff_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Update a category (staff only).
    """
    category = session.get(Category, category_id)
    if not category:
        raise HTTPException(
            status_code=404,
            detail="Category not found",
        )
    
    # Check if name is being changed and already exists
    if category_in.name is not None and category_in.name != category.name:
        existing = session.exec(
            select(Category).where(Category.name == category_in.name)
        ).first()
        
        if existing:
            raise HTTPException(
                status_code=400,
                detail="Category with this name already exists",
            )
    
    # Update fields
    update_data = category_in.model_dump(exclude_unset=True)
    for field, value in update_data.items():
        setattr(category, field, value)
    
    category.updated_at = datetime.now(timezone.utc)
    
    session.add(category)
    session.commit()
    session.refresh(category)
    return category

@router.delete("/{category_id}")
def delete_category(
    category_id: int,
    current_user: User = Depends(get_current_staff_user),
    session: Session = Depends(get_session),
) -> None:  # Change return type to None
    """
    Delete a category (staff only).
    """
    category = session.get(Category, category_id)
    if not category:
        raise HTTPException(
            status_code=404,
            detail="Category not found",
        )
    
    # Check if category has products
    if category.products:
        # Instead of deleting, mark as inactive
        category.is_active = False
        category.updated_at = datetime.now(timezone.utc)
        session.add(category)
        session.commit()
    else:
        # Delete category if it has no products
        session.delete(category)
        session.commit()
    
    return None  # Explicitly return None

=== backend/app/api/api_v1/endpoints/orders.py ===

from typing import Any, List, Optional
from datetime import datetime, timezone
from sqlalchemy.orm import joinedload
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlmodel import Session, select

from app.database import get_session
from app.models.order import (
    Order, OrderCreate, OrderUpdate, OrderRead, OrderItem, 
    OrderStatus, OrderWithItems
)
from app.models.product import Product
from app.core.security import get_current_active_user, get_current_staff_user
from app.models.user import User, UserRole
from app.api.utils.common import format_price

router = APIRouter()

@router.post("", response_model=OrderRead)
def create_order(
    order_in: OrderCreate,
    current_user: User = Depends(get_current_active_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Create new order.
    """
    # Ensure user can only create orders for themselves
    if order_in.user_id != current_user.id:
        raise HTTPException(
            status_code=403,
            detail="Not authorized to create order for another user",
        )
    
    # Process order items
    order_items = []
    total_amount = 0
    
    for item in order_in.items:
        # Check if product exists and is active
        product = session.get(Product, item.product_id)
        if not product:
            raise HTTPException(
                status_code=404,
                detail=f"Product with ID {item.product_id} not found",
            )
        
        if not product.is_active:
            raise HTTPException(
                status_code=400,
                detail=f"Product {product.name} is not available",
            )
        
        # Check stock
        if product.stock_quantity < item.quantity:
            raise HTTPException(
                status_code=400,
                detail=f"Not enough stock for {product.name}. Available: {product.stock_quantity}",
            )
        
        # Calculate item total
        item_total = product.price * item.quantity
        total_amount += item_total
        
        # Create order item
        order_item = OrderItem(
            product_id=item.product_id,
            quantity=item.quantity,
            unit_price=product.price,
            product_name=product.name,
            product_unit=product.unit,
            order_id=0  # Will be updated after order creation
        )
        
        order_items.append(order_item)
        
        # Update product stock
        product.stock_quantity -= item.quantity
        session.add(product)
    
    # Format total amount
    total_amount = format_price(total_amount)
    
    # Create order
    order = Order(
        user_id=current_user.id,
        status=OrderStatus.PENDING,
        shipping_address=order_in.shipping_address,
        contact_phone=order_in.contact_phone,
        total_amount=total_amount
    )
    
    session.add(order)
    session.commit()
    session.refresh(order)
    
    # Update order items with order ID and add to database
    for item in order_items:
        item.order_id = order.id
        session.add(item)
    
    session.commit()
    session.refresh(order)
    
    return order

# The rest of the file remains unchanged
@router.get("", response_model=List[OrderRead])
def read_user_orders(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    current_user: User = Depends(get_current_active_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Get current user's orders.
    """
    # Regular users can only see their own orders
    if current_user.role == UserRole.CUSTOMER:
        orders = session.exec(
            select(Order)
            .where(Order.user_id == current_user.id)
            .offset(skip)
            .limit(limit)
            .order_by(Order.created_at.desc())
        ).all()
    # Staff and admins can see all orders
    else:
        orders = session.exec(
            select(Order)
            .offset(skip)
            .limit(limit)
            .order_by(Order.created_at.desc())
        ).all()
    
    return orders

@router.get("/{order_id}", response_model=OrderWithItems)
def read_order(
    order_id: int,
    current_user: User = Depends(get_current_active_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Get order by ID.
    """
    order = session.exec(
        select(Order)
        .where(Order.id == order_id)
        .options(joinedload(Order.items))  # This explicitly loads the items
    ).first()
    
    if not order:
        raise HTTPException(
            status_code=404,
            detail="Order not found",
        )
    
    # Regular users can only view their own orders
    if current_user.role == UserRole.CUSTOMER and order.user_id != current_user.id:
        raise HTTPException(
            status_code=403,
            detail="Not authorized to access this order",
        )
    
    # Include order items in response
    return order

@router.patch("/{order_id}", response_model=Order)
def update_order(
    order_id: int,
    order_in: OrderUpdate,
    current_user: User = Depends(get_current_active_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Update order.
    """
    order = session.get(Order, order_id)
    
    if not order:
        raise HTTPException(
            status_code=404,
            detail="Order not found",
        )
    
    # Regular users can only cancel their own pending orders
    if current_user.role == UserRole.CUSTOMER:
        if order.user_id != current_user.id:
            raise HTTPException(
                status_code=403,
                detail="Not authorized to modify this order",
            )
        
        # Regular users can only update status to cancelled and only if order is pending
        if order_in.status and order_in.status != OrderStatus.CANCELLED:
            raise HTTPException(
                status_code=403,
                detail="Not authorized to change order status to anything other than cancelled",
            )
        
        if order_in.status == OrderStatus.CANCELLED and order.status != OrderStatus.PENDING:
            raise HTTPException(
                status_code=400,
                detail="Only pending orders can be cancelled",
            )
        
        # Only allow updating status field for regular users
        update_data = {"status": order_in.status} if order_in.status else {}
    else:
        # Staff and admins can update all fields
        update_data = order_in.model_dump(exclude_unset=True)
    
    # Apply updates
    for field, value in update_data.items():
        setattr(order, field, value)
    
    order.updated_at = datetime.now(timezone.utc)
    
    session.add(order)
    session.commit()
    session.refresh(order)
    
    # Include order items in response
    return order

=== backend/app/api/api_v1/endpoints/products.py ===

from typing import Any, List, Optional
from datetime import datetime, timezone

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlmodel import Session, select, or_

from app.database import get_session
from app.models.product import Product, ProductCreate, ProductUpdate, ProductRead
from app.models.category import Category
from app.core.security import get_current_staff_user, get_current_active_user
from app.models.user import User

router = APIRouter()

@router.post("", response_model=ProductRead)
def create_product(
    product_in: ProductCreate,
    current_user: User = Depends(get_current_staff_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Create new product (staff only).
    """
    # Check if category exists
    category = session.get(Category, product_in.category_id)
    if not category:
        raise HTTPException(
            status_code=404,
            detail="Category not found",
        )
    
    product = Product.model_validate(product_in)
    session.add(product)
    session.commit()
    session.refresh(product)
    return product

@router.get("", response_model=List[ProductRead])
def read_products(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    category_id: Optional[int] = None,
    is_organic: Optional[bool] = None,
    active_only: bool = Query(True),
    search: Optional[str] = None,
    min_price: Optional[float] = None,
    max_price: Optional[float] = None,
    sort_by: str = Query("name", enum=["name", "price", "created_at"]),
    sort_order: str = Query("asc", enum=["asc", "desc"]),
    session: Session = Depends(get_session),
) -> Any:
    """
    Retrieve products with various filters.
    """
    query = select(Product)
    
    # Apply filters
    if category_id:
        query = query.where(Product.category_id == category_id)
    
    if is_organic is not None:
        query = query.where(Product.is_organic == is_organic)
    
    if active_only:
        query = query.where(Product.is_active == True)
    
    if min_price is not None:
        query = query.where(Product.price >= min_price)
    
    if max_price is not None:
        query = query.where(Product.price <= max_price)
    
    if search:
        query = query.where(
            or_(
                Product.name.ilike(f"%{search}%"),
                Product.description.ilike(f"%{search}%")
            )
        )
    
    # Apply sorting
    if sort_by == "name":
        query = query.order_by(Product.name.desc() if sort_order == "desc" else Product.name)
    elif sort_by == "price":
        query = query.order_by(Product.price.desc() if sort_order == "desc" else Product.price)
    elif sort_by == "created_at":
        query = query.order_by(Product.created_at.desc() if sort_order == "desc" else Product.created_at)
    
    # Apply pagination
    products = session.exec(query.offset(skip).limit(limit)).all()
    return products

@router.get("/{product_id}", response_model=ProductRead)
def read_product(
    product_id: int,
    session: Session = Depends(get_session),
) -> Any:
    """
    Get product by ID.
    """
    product = session.get(Product, product_id)
    if not product:
        raise HTTPException(
            status_code=404,
            detail="Product not found",
        )
    return product

@router.patch("/{product_id}", response_model=ProductRead)
def update_product(
    product_id: int,
    product_in: ProductUpdate,
    current_user: User = Depends(get_current_staff_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Update a product (staff only).
    """
    product = session.get(Product, product_id)
    if not product:
        raise HTTPException(
            status_code=404,
            detail="Product not found",
        )
    
    # Check if category exists if being updated
    if product_in.category_id is not None:
        category = session.get(Category, product_in.category_id)
        if not category:
            raise HTTPException(
                status_code=404,
                detail="Category not found",
            )
    
    # Update fields
    update_data = product_in.model_dump(exclude_unset=True)
    for field, value in update_data.items():
        setattr(product, field, value)
    
    product.updated_at = datetime.now(timezone.utc)
    
    session.add(product)
    session.commit()
    session.refresh(product)
    return product

@router.delete("/{product_id}")
def delete_product(
    product_id: int,
    current_user: User = Depends(get_current_staff_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Delete a product (staff only).
    """
    product = session.get(Product, product_id)
    if not product:
        raise HTTPException(
            status_code=404,
            detail="Product not found",
        )
    
    # Check if product has related orders
    if product.order_items:
        # Instead of deleting, mark as inactive
        product.is_active = False
        product.updated_at = datetime.now(timezone.utc)
        session.add(product)
        session.commit()
    else:
        # Delete product if no related records
        session.delete(product)
        session.commit()
    
    return None

@router.get("/category/{category_id}", response_model=List[ProductRead])
def read_products_by_category(
    category_id: int,
    active_only: bool = Query(True),
    session: Session = Depends(get_session),
) -> Any:
    """
    Get all products in a specific category.
    """
    # Check if category exists
    category = session.get(Category, category_id)
    if not category:
        raise HTTPException(
            status_code=404,
            detail="Category not found",
        )
    
    # Build query
    query = select(Product).where(Product.category_id == category_id)
    
    if active_only:
        query = query.where(Product.is_active == True)
    
    products = session.exec(query).all()
    return products

=== backend/app/api/api_v1/endpoints/users.py ===

from typing import Any, List
from datetime import datetime, timezone

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlmodel import Session, select

from app.database import get_session
from app.models.user import User, UserUpdate, UserRead, UserRole
from app.core.security import (
    get_current_active_user,
    get_current_admin_user,
    get_password_hash,
)

router = APIRouter()

@router.get("/me", response_model=UserRead)
def read_user_me(
    current_user: User = Depends(get_current_active_user),
) -> Any:
    """
    Get current user.
    """
    return current_user

@router.patch("/me", response_model=UserRead)
def update_user_me(
    user_in: UserUpdate,
    current_user: User = Depends(get_current_active_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Update own user information.
    """
    # Ensure user can't update their own role
    if user_in.role is not None:
        raise HTTPException(
            status_code=400,
            detail="Changing your own role is not allowed",
        )
    
    # Update user fields
    update_data = user_in.model_dump(exclude_unset=True)
    
    # Handle password update
    if "password" in update_data:
        update_data["hashed_password"] = get_password_hash(update_data.pop("password"))
    
    # Apply updates
    for field, value in update_data.items():
        setattr(current_user, field, value)
    
    current_user.updated_at = datetime.now(timezone.utc)
    
    session.add(current_user)
    session.commit()
    session.refresh(current_user)
    return current_user

@router.get("", response_model=List[UserRead])
def read_users(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    current_user: User = Depends(get_current_admin_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Retrieve users (admin only).
    """
    users = session.exec(select(User).offset(skip).limit(limit)).all()
    return users

@router.get("/{user_id}", response_model=UserRead)
def read_user_by_id(
    user_id: int,
    current_user: User = Depends(get_current_active_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Get a specific user by id.
    """
    user = session.get(User, user_id)
    if not user:
        raise HTTPException(
            status_code=404,
            detail="User not found",
        )
    
    # Only admin can view other users
    if user.id != current_user.id and current_user.role != UserRole.ADMIN:
        raise HTTPException(
            status_code=403,
            detail="Access denied",
        )
    
    return user

@router.patch("/{user_id}", response_model=UserRead)
def update_user(
    user_id: int,
    user_in: UserUpdate,
    current_user: User = Depends(get_current_admin_user),
    session: Session = Depends(get_session),
) -> Any:
    """
    Update a user (admin only).
    """
    user = session.get(User, user_id)
    if not user:
        raise HTTPException(
            status_code=404,
            detail="User not found",
        )
    
    # Update user fields
    update_data = user_in.model_dump(exclude_unset=True)
    
    # Handle password update
    if "password" in update_data:
        update_data["hashed_password"] = get_password_hash(update_data.pop("password"))
    
    # Apply updates
    for field, value in update_data.items():
        setattr(user, field, value)
    
    user.updated_at = datetime.now(timezone.utc)
    
    session.add(user)
    session.commit()
    session.refresh(user)
    return user

@router.delete("/{user_id}")
def delete_user(
    user_id: int,
    current_user: User = Depends(get_current_admin_user),
    session: Session = Depends(get_session),
) -> None:  # Changed to None
    """
    Delete a user (admin only).
    """
    user = session.get(User, user_id)
    if not user:
        raise HTTPException(
            status_code=404,
            detail="User not found",
        )
    
    # Prevent self-deletion
    if user.id == current_user.id:
        raise HTTPException(
            status_code=400,
            detail="Cannot delete your own user account",
        )
    
    session.delete(user)
    session.commit()
    return None  # Explicitly return None

=== backend/app/api/utils/__init__.py ===

# Import utility functions to make them available
from app.api.utils.common import format_price, calculate_order_total, format_date

=== backend/app/api/utils/common.py ===

from typing import Dict, List, Union, Any
from datetime import datetime

def format_price(price: float) -> float:
    """Format price to 2 decimal places"""
    return round(price, 2)

def calculate_order_total(items: List[Dict[str, Any]]) -> float:
    """Calculate the total price of order items"""
    return sum(item.get("quantity", 0) * item.get("unit_price", 0) for item in items)

def format_date(date: datetime) -> str:
    """Format date to ISO string"""
    return date.isoformat()